<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="EXP_BindFileOptionNotApplicable" xml:space="preserve">
    <value>The -bf (bind files) option is only applicable with the -xo option.</value>
  </data>
  <data name="EXP_CannotLinkObjFilesWithOutpuFile" xml:space="preserve">
    <value>Cannot link object files (.wixobj) files with an output file (.wixout)</value>
  </data>
  <data name="EXP_CannotLoadBinderFileManager" xml:space="preserve">
    <value>cannot load binder file manager: {0}.  light can only load one binder file manager and has already loaded binder file manager: {1}.</value>
  </data>
  <data name="EXP_CannotLoadLinkerExtension" xml:space="preserve">
    <value>cannot load linker extension: {0}.  light can only load one link extension and has already loaded link extension: {1}.</value>
  </data>
  <data name="HelpMessage" xml:space="preserve">
<value><![CDATA[ usage:  light.exe [-?] [-b basePath] [-nologo] [-out outputFile] objectFile [objectFile ...] [@responseFile]

   -ai        allow identical rows, identical rows will be treated as a warning
   -au        (experimental) allow unresolved references
              (will not create a valid output)
   -b <path>  specify a base path to locate all files
              (default: current directory)
   -bcgg      use backwards compatible guid generation algorithm
              (almost never needed)
   -bf        bind files into a wixout (only valid with -xo option)
   -cc <path> path to cache built cabinets (will not be deleted after linking)
   -ct <N>    number of threads to use when creating cabinets
              (default: %NUMBER_OF_PROCESSORS%)
   -cub <file.cub> additional .cub file containing ICEs to run
   -cultures:<cultures>  semicolon or comma delimited list of localized
             string cultures to load from .wxl files and libraries.
             Precedence of cultures is from left to right.
   -d<name>[=<value>]  define a wix variable, with or without a value.
   -dcl:level set default cabinet compression level
              (low, medium, high, none, mszip; mszip default)
   -dut       drop unreal tables from the output image
   -ext <extension>  extension assembly or "class, assembly"
   -fv        add a 'fileVersion' entry to the MsiAssemblyName table
              (rarely needed)
   -ice:<ICE>   run a specific internal consistency evaluator (ICE)
   -loc <loc.wxl>  read localization strings from .wxl file
   -nologo    skip printing light logo information
   -notidy    do not delete temporary files (useful for debugging)
   -o[ut]     specify output file (default: write to current directory)
   -O1        optimize smart cabbing for smallest cabinets (default).
   -O2        optimize smart cabbing for faster install time.
   -pdbout <output.wixpdb>  save the WixPdb to a specific file
              (default: same name as output with wixpdb extension)
   -pedantic  show pedantic messages
   -reusecab  reuse cabinets from cabinet cache
   -sa        suppress assemblies: do not get assembly name information
              for assemblies
   -sacl      suppress resetting ACLs
              (useful when laying out image to a network share)
   -sadmin    suppress default admin sequence actions
   -sadv      suppress default adv sequence actions
   -sf        suppress files: do not get any file information
              (equivalent to -sa and -sh)
   -sh        suppress file info: do not get hash, version, language, etc
   -sice:<ICE>  suppress an internal consistency evaluator (ICE)
   -sl        suppress layout
   -sloc      suppress localization
   -sma       suppress processing the data in MsiAssembly table
   -spdb      suppress outputting the WixPdb
   -ss        suppress schema validation of documents (performance boost)
   -sts       suppress tagging sectionId attribute on rows
   -sui       suppress default UI sequence actions
   -sv        suppress intermediate file version mismatch checking
   -sval      suppress MSI/MSM validation
   -sw[N]     suppress all warnings or a specific message ID
              (example: -sw1009 -sw1103)
   -swall     suppress all warnings (deprecated)
   -usf <output.xml>  unreferenced symbols file
   -v         verbose output
   -wx[N]     treat all warnings or a specific message ID as an error
              (example: -wx1009 -wx1103)
   -wxall     treat all warnings as errors (deprecated)
   -xo        output wixout format instead of MSI format
   -? | -help this help information

Environment variables:
   WIX_TEMP   overrides the temporary directory used for cab creation, msm exploding, ...]]></value>
  </data>
  <data name="INF_BinderTempDirLocatedAt" xml:space="preserve">
    <value>Binder temporary directory located at '{0}'.</value>
  </data>
  <data name="INF_ValidatorTempDirLocatedAt" xml:space="preserve">
    <value>Validator temporary directory located at '{0}'.</value>
  </data>
  <data name="WAR_FailedToDeleteTempDir" xml:space="preserve">
    <value>Warning, failed to delete temporary directory: {0}</value>
  </data>
</root>
