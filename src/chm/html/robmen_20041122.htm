<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<link rel="stylesheet" type="text/css" href="style.css" />
<title>Localization and your MSI file.</title>
</head>
<body>
<h1><a href='http://blogs.msdn.com/robmen/archive/2004/11/22/268343.aspx'>Localization and your MSI file.</a></h1>

<p>Jenny signed off on my <A href="http://blogs.msdn.com/robmen/archive/2004/11/20/267320.aspx">Monday night blog hours</a> so I'm curled up in my big comfy chair with my laptop ready to discuss some details of the Windows Installer.&nbsp; Honestly, every time I sit in this big chair I consider <a href="http://www.google.com/url?sa=U&amp;start=1&amp;q=http://blogs.msdn.com/robmen/archive/2004/07/09/178938.aspx&amp;e=747">writing that book</a> again.&nbsp; But not tonight.&nbsp; For tonight we talk about localization and the Windows Installer.</p> <p>Before I get started, I want to throw out a very important disclaimer up front.&nbsp; I am not a localization expert and I personally have never fully-localized a product.&nbsp; Most of what I'm presenting here is information that I've gleaned from talking to or just watching localizers.&nbsp; The rest of it I stole from the <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/windows_installer_start_page.asp">Windows Installer SDK</a>.</p> <p>For those of you who have not been indoctrinated in building global software, know that "localization" is the process of making your software available for other "locations" (or locales).&nbsp; "Localizers" are the individuals responsible for localizing your software.&nbsp; Obviously most "localizers" speak or read or comprehend more than one culture.&nbsp; This particular talent is one of the major reasons I make a really lousy localizer.&nbsp; I only really understand American English, C/C++, C#, VBScript and a bit of Australian English (from living with <A href="http://blogs.msdn.com/ptorr">Peter</a> for a few years).&nbsp; But I digress.</p> <p>Most people think localization is all about translating the text in their program from one language to another.&nbsp; While this is an important part of the process, there are many other facets of localization.&nbsp; For example, directly related to the text translation process but often neglected is the planning for translated text to take more (or less) space in dialog boxes than the first language did.&nbsp; I remember a localizer mentioning to me once that--in general--a dialog box for German text needs to be somewhere around 1.5 times larger than a dialog box with the same text in English.&nbsp; Another important facet of localization is adjusting text and images to be geopolitically appropriate.&nbsp; Words and images accepted in one part of the world are not always appropriate for other parts of the world.&nbsp; Thus it is important to understand the cultures not just the languages when localizing software.</p> <p>Okay, so that is probably enough to cover the "Localization" part of this blog entry's title, now let's move on "your MSI file".&nbsp; For the remainder of this blog entry, unless I specifically mention it, the term "MSI file" will be synonymous with "Windows Installer database" (which includes not only MSI files but Merge Modules [.msm files] as well).&nbsp; So what we're really talking about here is localizing your &lt;Products/&gt; and &lt;Modules/&gt; if you use the <a href="http://wix.sourceforge.net/">WiX toolset</a>.</p> <p>As promised in the beginning, much of what I'm covering here is covered in what I consider the "Windows Installer Bible", the Windows Installer SDK.&nbsp; When I have questions about the way the Window Installer works, I go back and refer to that documentation.&nbsp; Fortunately, for me and this blog, the Windows Installer SDK can get kinda' cryptic at times.&nbsp; So I'm here to add more words to what already exists.</p> <p>In particular, the <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/localizing_a_windows_installer_package.asp">Localization Overview</a> in the Windows Installer SDK is a great place to start (and I expect I will refer to it several times in this blog entry).&nbsp; That help topic does a pretty good job providing a check-list of things to do when localizing your MSI file.&nbsp; I particularly like the first step, plan for localization.</p> <p>I am fully aware that many people save setup for the end of the product cycle.&nbsp; I personally believe this practice is very reckless and ill-advised (especially consider there are now tools like the WiX toolset that can integrate directly into your build process).&nbsp; However, I've also noticed that localization is often considered after setup!&nbsp; That doubles down the trouble because right when you need to lock-in the <a href="http://www.google.com/url?sa=U&amp;start=1&amp;q=http://blogs.msdn.com/robmen/archive/2003/10/18/56497.aspx&amp;e=747">Componentization</a> your product you're going to be adding more files.&nbsp; Bad planning can make this a horrible chore.</p> <p>So, here's my standard template for success with localization.&nbsp; First, break out all of the localizable text in your product into a separate <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/vccore/html/_core_Create_a_Resource.2d.Only_DLL.asp">resource-only DLL</a>.&nbsp; Second, put that resource-only DLL in a sub-directory named for the language of the resource-only DLL.&nbsp; Keep the name of the resource-only DLL the same though.&nbsp; Since I'm an old Office guy, I usually use the <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/intl/nls_8sj7.asp">LCID</a> (1033 is American English) for the directory name but I've seen the trend towards using the ISO locale names (en-us is American English) since the Common Language Runtime goes that way.&nbsp; Third, store the default installation's language in your per-application data store.&nbsp; For example, an HKLM registry key is an okay store if your product was installed per-machine and an HKU registry key would be okay if your product was installed per-user.&nbsp; The Registry/@Root="HKMU" value in Windows Installer XML syntax was designed for this type of scenario.&nbsp; Fourth, store the user's current language preference in a per-user data store (a per-user registry key works okay) when it differs from the installed value.&nbsp; Finally, when you boot your application load the resource-only DLL from the appropriate sub-directory based on the per-user key if it exists and the per-application key if it does not exist.&nbsp; </p> <p>You can also do more interesting scenarios if you want to take the system's current language into account, but that's for people that know more about localization that I do.&nbsp; Of course, you should also have some fallback plan if your registry keys are all busted.&nbsp; For example, if the per-application registry key was deleted you could repair a portion of your product.&nbsp; I'll try tossing more advanced scenarios in a later blog entry.</p> <p>Now that you have a plan for your product's organization, you can go back to thinking about your MSI file.&nbsp; First of all, you'll want to think about the <a href="http://en.wikipedia.org/wiki/Codepage">codepage</a> for your MSI file.&nbsp; <A href="http://blogs.msdn.com/robmen/archive/2003/11/25/56510.aspx">Remember</a> MSI files are not Unicode.&nbsp; That means if you pick the wrong codepage for your MSI file that you'll get square boxes or question marks showing up in your database.&nbsp; The Windows Installer SDK talks about <a href="http://msdn.microsoft.com/library/en-us/msi/setup/setting_the_code_page_of_a_database.asp">setting the codepage</a> but if you use the WiX toolset you only need to specify your codepage LCID in the Product/@Codepage or Module/@Codepage attribute for your MSI or MSM file respectively.&nbsp; If you're curious, you can see that the WiX toolset does exactly what the Windows installer SDK says in Binder.cs in the Binder's SetDatabaseCodepage() method.&nbsp; </p> <p>Also note that because the MSI files are not Unicode files they cannot be truly multi-lingual.&nbsp; This is okay because if we skip over the Overview's steps 3 and 4 (I'll discuss those more later), we see in step 5 that the MSI file has a <a href="http://msdn.microsoft.com/library/en-us/msi/setup/productlanguage_property.asp">ProductLanguage Property</a> that must be set to the LCID of the product.&nbsp; That ProductLanguage Property maps to the Product/@Language or Module/@Language attributes.&nbsp; One of the bugs I discussed in my <A href="http://blogs.msdn.com/robmen/archive/2004/11/20/267320.aspx">previous blog entry</a> is enabling the localization of those attributes.&nbsp; </p> <p>I'm going to lump in the Overview's steps 5, 6, 7, and 8 under the heading "Things That Identify Your Product as a Unique Identity in the World."&nbsp; The world is a scary place out there with lots of other products to collide and otherwise get lost in.&nbsp; Make sure you follow all of these steps to ensure that you can find your product when it comes time to patch or upgrade.&nbsp; I've seen a few cases where setup developers were being particularly lazy and thought they could skip over some of these steps.&nbsp; They showed up a few months after their products shipped asking how they can target the appropriate localized version of their MSI file.&nbsp; </p> <p>In one particular case, a product had some geo-political issue preventing the product from being allowed across the border of some country.&nbsp; I don't remember all of the finer details but I believe the final recommendation was to build a new "politically correct" MSI package, send that off for manufacturing and eat the cost of the thousands of CDs that had already been stamped.&nbsp; I can only imagine how much fun they had <a href="http://apache.airnet.com.au/~fastinfo/microwave/cd/">creating coasters in their microwave</a> (or how much explaining they had to do with their "higher-ups").</p> <p>I was originally going to toss the Overview's step 9 in with the above, but (as many of you know) the Component Rules are very near and dear to my heart.&nbsp; Follow my standard template for organizing your product and you'll naturally have to put each resource-only DLL in its own Component.&nbsp; More importantly you will only need to put the non-localized executables in their own Components.&nbsp; If you had localized text in the executables, you'd be in the unfortunate position of needing to create different Components to install the different language versions of the file even though they would all get installed to the same location (a Component Rule violation).&nbsp; Also, as mentioned above, with this product layout I'll be able to demonstrate some interesting advanced install tricks.</p> <p>Finally, all that is left now is the real localization work (steps 3 and 4 from the Overview).&nbsp; I know this is something of a let down after such a long blog entry, but I'm going to save the details of how the WiX toolset can help with the localization process for later.&nbsp; My hope is to re-finish (er, "un-break") the localization features in the WiX toolset tomorrow night.&nbsp; Then I will try to write the step-by-step process using the WiX toolset using a really simple example.&nbsp; Some time after that, I'll create a more complicated example that takes advantage of some of those advanced tricks I was talking about.</p> <p>Until next time, take a look at this <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/checking_the_installation_database_code_page.asp">localization example</a> from the Windows Installer SDK, and keep coding.&nbsp; You know I am.</p>
<p><i>Copyright © Rob Mensching</i></p>

</body>
</html>