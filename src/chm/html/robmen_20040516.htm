<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<link rel="stylesheet" type="text/css" href="style.css" />
<title>My philsophical musings about building setup for software.</title>
</head>
<body>
<h1><a href='http://blogs.msdn.com/robmen/archive/2004/05/16/132928.aspx'>My philsophical musings about building setup for software.</a></h1>

<P><A href="http://www.larkware.com/">Mike Gunderloy</A>, who has written a <A href="http://www.adtmag.com/article.asp?id=9359">couple</A> <A href="http://www.ondotnet.com/pub/a/dotnet/2004/04/19/wix.html">articles</A> about the <A href="http://wix.sourceforge.net/">WiX toolset</A>, posted <A href="http://blogs.msdn.com/robmen/archive/2004/05/13/131692.aspx#131892">a comment</A> on a previous <A href="http://blogs.msdn.com/robmen/archive/2004/05/13/131692.aspx">blog entry</A>.&nbsp; In the comment, he suggests that splitting a setup project into fragments only moves the problem but doesn't solve it.&nbsp; Thus, he argued that adding a tool to generate the fragments has value.&nbsp; I still didn't agree.&nbsp; Then I realized that I disagreed because I have some philosophies about how to build software and setup for software that I've never posted here.&nbsp; So, I thought I'd share those philosophies today.&nbsp; Please note that these are guidelines that I use when discussing setup build processes with other people not hard rules.&nbsp; </P>
<P><B>The developer that wrote the feature knows best what needs to be authored into setup.</B></P>
<P>This part of my philosophy is based on the fact that the person that knows the most about a particular resource is the developer that wrote the resource.&nbsp; Seriously, if the developer who wrote the code doesn't know where his or her files need to be installed or doesn't know what registry keys are necessary to make the feature work (or whatever other resources are necessary) who does?</P>
<P>Yes, there have been (too many) cases in my career where the developer who wrote the code said, "Uhh, I don't know what my code depends on." &nbsp;However, in those cases it was pretty easy to look at him or her (or his or her manager) and ask, "Well, uhh, shouldn't you?"&nbsp; In every case, they went off and figured out what was necessary to get their software "in the box".</P>
<P>Fundamentally, if developers don't know what their dependencies are there is very little chance their project will have a solid <A href="http://blogs.msdn.com/michael_Howard">security</A>, <A href="http://blogs.msdn.com/ricom">performance</A>, or <A href="http://blogs.msdn.com/robmen">deployment</A> story.&nbsp; Area experts may be necessary to help developers work through complicated issues but, in general, developers must be aware of what their software is doing. </P>
<P><B>Setup authoring is a part of the development process.</B></P>
<P>Every team I have interacted with (the grand majority of Microsoft and some smaller companies), the developers on the team are expected to add their source files to the makefile before checking in new files to the project.&nbsp; Yet, many of those teams have people who are solely responsible for adding new files to the setup project.&nbsp; In many cases, one set of developers write registry keys into the code for <A href="http://msdn.microsoft.com/library/en-us/msi/setup/selfreg_table.asp">SelfReg</A> (this is evil, and I'll explain why one day) and the setup developers have to reverse engineer the registry keys out of the built executables to author setup.&nbsp; Why didn't the original developer just author the registry key into setup in the first place?</P>
<P>There was a point in time where it was arguably difficult to distribute the authoring to all developers when you had to buy custom tools that didn't fit well into the development process.&nbsp; However, today there are a few alternatives out there (like the <A href="http://wix.sourceforge.net/">WiX toolset</A>) that allow setup to be treated like source code.&nbsp; Now there are no excuses I've heard that hold water why setup authoring for the majority of the resources in setup cannot be distributed across the developers in the organization.&nbsp; Doing that distribution leaves only the "look and feel" and integration between the individual pieces of setup to the core setup developers.&nbsp; All other excuses have always been just <A href="http://infosecuritymag.techtarget.com/2003/jan/curmudgeon.shtml">whinging</A> (as <A href="http://blogs.msdn.com/ptorr">Peter</A> might say).</P>
<P>This part of my philosophy and the one above are the reasons I disagree when Mike says that "breaking up the package into multiple source fragments pushes the problem back one level, but doesn't necessarily solve it."&nbsp; Breaking up your setup in to multiple text files enables developers to maintain setup authoring the same way they maintain all the other code that is part of a project.&nbsp; And that brings me to my final point.</P>
<P><B>Text files should be the only inputs into the build process.</B></P>
<P>Over the years, developers have created fairly significant processes for tracking, merging, and reverting changes to text files.&nbsp; For example, <A href="http://www.cvshome.org/">Concurrent Version System</A> (better known as CVS) is used heavily by <A href="http://sourceforge.net/">SourceForge.net</A> can show you the individual lines changed in a text file over time.&nbsp; For a demonstration, take a look at <A href="http://cvs.sourceforge.net/viewcvs.py/wix/wix/src/wix/Compiler.cs?r1=1.6&amp;r2=1.7">Compiler.cs from v1.6 to v1.7 in CVS at SourceForge.net for WiX</A>.&nbsp; It is not generally possible to visualize the differences between two revisions of a binary file.</P>
<P>Every input into the build process that is manipulated by a human will eventually hose the process at least once.&nbsp; Being able to text search (using even the simplest tools like <A href="http://www.gnu.org/software/grep/grep.html">grep</A>) for the exact change that caused the problem significantly improves build throughput.&nbsp; Binary files usually hide the information by requiring custom tools to be opened and queried to find the break.</P>
<P>Of course, once you find the break it is really nice to be able to fix the problem by launching your favorite text editor and tweaking the line(s) of code with the fault.&nbsp; Requiring a tool to be installed on the build machines increases your impedance to fixing the issue.</P>
<P>Ultimately, keeping binary files out of your build process simplifies your life.&nbsp; That fact is why I disagree with Mike when he suggests it makes sense to "put one more tool into the chain, something with a friendly interface that could spit out the source fragments as needed? I could see doing that with Access/Excel, among other things."</P>
<P>Note I do think it is reasonable for developers to use tools that help generate text files.&nbsp; Those text files then can get checked into source control and built as part of the standard process.&nbsp; However, the tools need to generate human friendly text files.&nbsp; Text files that can only be modified with a custom tool are only half a step better than raw binary files.</P>
<P>This is the philosophy that I developed during my tenure in <A href="http://office.microsoft.com/">Office</A> and have promoted across the company for a couple years now.&nbsp; Many teams have had an incredible amount of success with their setup processes when following these guidelines.&nbsp; There have been many cases where I was asked by other teams to talk about the philosophy.&nbsp; At the end of my talk I always left them with, "If you have someone resisting change, have them contact me.&nbsp; I'll be happy to talk to him or her to discuss how successful other teams have been with this process&nbsp;and see if there isn't some way to address their concerns."&nbsp; I'd be happy to do the same for you.</P>
<P><I>PS:&nbsp; This philosophy has worked out extremely well for me, but if you have a unique situation that you think wouldn't work using these guidelines, I'd be very interested to hear about them.&nbsp; I'm always looking for alternative views (as long as people aren't just whinging &lt;smile/&gt;).</I></P>
<p><i>Copyright © Rob Mensching</i></p>

</body>
</html>