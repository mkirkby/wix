<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<link rel="stylesheet" type="text/css" href="style.css" />
<title>Creating localized MSI files using WiX toolset and .wxl files.</title>
</head>
<body>
<h1><a href='http://blogs.msdn.com/robmen/archive/2004/11/30/272141.aspx'>Creating localized MSI files using WiX toolset and .wxl files.</a></h1>

<p>Tonight we pick up where I left off last week and continue with the topic of localizing your MSI file.&nbsp; If you haven't read <A href="http://blogs.msdn.com/robmen/archive/2004/11/22/268343.aspx">last week's blog entry</a>, you should do that now.&nbsp; Yes, it's pretty long.&nbsp; Don't worry I'll wait.&nbsp; There's lots of good background information in there.</p> <p>Great, I want to cover a couple more things before we really get started.&nbsp; First, just like in my previous blog entry all of the information presented here works equally well for Merge Modules (MSM files) as it does for MSI files.&nbsp; I'll be using an MSI file in my example and I'll use the words "MSI file" a lot (that's how I get such a high page rank for Windows Installer stuff... just kidding) because I'm lazy and get tired of writing MSI/MSM file.&nbsp; Second, I am using the latest build of the <a href="http://wix.sourceforge.net/">WiX toolset</a> <a href="http://sourceforge.net/project/showfiles.php?group_id=105970&amp;package_id=114109&amp;release_id=286109">v2.0.2328.0</a> in my examples.&nbsp; This is important because, as you'll note in the <a href="http://sourceforge.net/project/shownotes.php?release_id=286109">release notes</a>, I fixed many localization issues with this release of the toolset.&nbsp; If you want to follow along, be sure you have a recent version of the WiX toolset.</p> <p>Today there are really two ways to localize your MSI file.&nbsp; <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/importing_localized_error_and_actiontext_tables.asp">Step 3</a> and <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/localizing_database_columns.asp">step 4</a> of the <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/a_localization_example.asp">Localization Example</a> in the Windows Installer SDK that I pointed at last week demonstrate those two methods.&nbsp; First, you can export your MSI file's tables to IDT file format, localize that text file then import the IDT file back into your MSI.&nbsp; This method is the fastest way to update information in your MSI file.&nbsp; However, it also requires the most care because you must ensure the codepage of the IDT file matches the codepage of the MSI file or the import will fail with terribly helpful error messages like, "Failed to import your IDT file for some reason.&nbsp; Have a nice day" (note: <a href="http://msdn.microsoft.com/library/en-us/msi/setup/msigetlasterrorrecord.asp">::MsiGetLastErrorRecord()</a> will give you more information about the error but it rarely gives you the exact answer to the issue).&nbsp; It is interesting to note that the remarks in <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/msidatabaseimport.asp">::MsiDatabaseImport() function</a> discourage using this method for updating your MSI file because of the codepage and other IDT encoding issues (like tabs and carriage returns).</p> <p>The second way to localize data in your MSI file is to use the Windows Installer <a href="http://msdn.microsoft.com/library/en-us/msi/setup/sql_syntax.asp">SQL Syntax</a> to update the appropriate columns.&nbsp; This method is arguably easier than the previous method because you don't have to worry about encoding tabs or carriage returns and the APIs will attempt to encode your text the best it can to match the MSI file's current codepage.&nbsp; Unfortunately, this method is also slower than the previous method because the Windows Installer SQL processor is not particularly speedy.</p> <p>So how about a solution that provides you, the setup developer, with the fastest method to create localized MSI files without needing to worry too much about encoding all of your data in IDT files correctly?&nbsp; What if all you needed to do was to provide the localized data and the codepage for that data (codepage is still necessary because I don't know how to look at several random strings of text and accurately reverse engineer the codepage from them)?&nbsp; What if you could actually compile all of your source code files once then only link the object files together once for each language?&nbsp; How?&nbsp; Well with the <a href="http://wix.sourceforge.net/">WiX toolset</a>, of course.</p> <p>Admittedly, the WiX toolset's localization features are some of the least documented features in the WiX toolset.&nbsp; In fact, the only documentation is WiX Localization file, .wxl files, schema (wixloc.xsd) and the code in light.cs that processes the .wxl files.&nbsp; So I'm here now to turn that all around with a step-by-step example.</p> <p>Let's look at a small example source file that installs a simple file with a shortcut.&nbsp; Let's call this source file "example.wxs":</p> <pre> &lt;?xml version='1.0'?&gt;<br /> &lt;Wix xmlns='http:/ / schemas.microsoft.com/wix/2003/01/wi'&gt;<br /> &nbsp; &lt;Product Id='????????-????-????-????-????????????' Name='ExampleProduct' <br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Language='1033' Version='1.0.0.0' Manufacturer='Microsoft Corporation'&gt;<br /> &nbsp; &nbsp; &nbsp;&lt;Package Id='????????-????-????-????-????????????' <br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Description='Example Description for Product' <br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Comments='Example Product to demonstrate localized Data' <br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; InstallerVersion='200' Compressed='yes' /&gt;<br /> &nbsp; &nbsp; &nbsp;&lt;Media Id='1' Cabinet='product.cab' EmbedCab='yes' /&gt;<br /> &nbsp; &nbsp; &nbsp;&lt;Directory Id='TARGETDIR' Name='SourceDir'&gt;<br /> &nbsp; &nbsp; &nbsp; &nbsp; &lt;Directory Id='ProgramFilesFolder' Name='PFiles'&gt;<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;Directory Id='EXAMPLEDIR' Name='example' LongName='Example Directory'&gt;<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;Directory Id='LangDir' Name='1033'&gt;<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;Component Id='ExampleComponent' Guid='PUT-GUID-HERE' DiskId='1'&gt;<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;File Id='ExampleFile' Name='example.txt' src='example.txt'&gt;<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;Shortcut Id='ExampleShortcut' <br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Directory='ProgramMenuFolder'<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Name='Example' LongName='Example Shortcut'<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Description='Shortcut to example.txt'/&gt;<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;/File&gt;<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;/Component&gt;<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;/Directory&gt;<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;/Directory&gt;<br /> &nbsp; &nbsp; &nbsp; &nbsp; &lt;/Directory&gt;<br /> &nbsp; &nbsp; &nbsp; &nbsp; &lt;Directory Id='ProgramMenuFolder' Name='ProgMenu'/&gt;<br /> &nbsp; &nbsp; &nbsp;&lt;/Directory&gt;<br /> &nbsp; &nbsp; &nbsp;&lt;Feature Id='ExampleFeature' Title='Example Feature for Product' Level='1'&gt;<br /> &nbsp; &nbsp; &nbsp; &nbsp; &lt;ComponentRef Id='ExampleComponent' /&gt;<br /> &nbsp; &nbsp; &nbsp;&lt;/Feature&gt;<br /> &nbsp; &lt;/Product&gt;<br /> &lt;/Wix&gt;<br /> </pre> <p>Note, to compile the code above with candle.exe, you'll need to replace "PUT-GUID-HERE" with your own GUID.&nbsp; I don't provide GUIDs in my examples because people like to copy the examples then forget to change the GUID before shipping.&nbsp; Of course, that would be an immediate <A href="http://blogs.msdn.com/robmen/archive/2003/10/18/56497.aspx">Component Rule</a> violation and I don't want to be responsible for that.&nbsp; Also, before we can link that code with light.exe, we'll need to create a text file called, "example.txt".&nbsp; Here's what my example.txt file looks like:</p> <pre> Each day is a gift, that's why we call it the present.<br /> </pre> <p>Okay, after creating example.wxs (and adding your own GUID) and creating example.txt, you should be able to create an "example.msi" file by compiling and linking the files like so:</p> <pre> C:\wix&gt;candle example.wxs<br /> Microsoft (R) Windows Installer Xml Compiler version 2.0.2328.0<br /> Copyright (C) Microsoft Corporation 2003. All rights reserved.<br /> <br /> example.wxs<br /> <br /> C:\wix&gt;light example.wixobj<br /> Microsoft (R) Windows Installer Xml Linker version 2.0.2328.0<br /> Copyright (C) Microsoft Corporation 2003. All rights reserved.<br /> <br /> C:\wix&gt;<br /> </pre> <p>As always, no news from light.exe is good news.&nbsp; You can install the newly created MSI file using "msiexec /i example.msi" and should notice a new shortcut in your ProgramMenuFolder ("Start" -&gt; "All Programs" on Windows XP).&nbsp; But I'm sure for you old WiX toolset hacks out there this example is boring.&nbsp; So, let's get to localizing.&nbsp; </p> <p>If you used the preprocessor, you are already familiar with $(var.VAR) for defined variables and $(env.VAR) for environment variables.&nbsp; Localization in the WiX toolset is done by inserting "localization variables".&nbsp; Localization variables look like $(loc.VAR).&nbsp; Let's look at our modified source file:</p> <pre> &lt;?xml version='1.0'?&gt;<br /> &lt;Wix xmlns='http://schemas.microsoft.com/wix/2003/01/wi'&gt;<br /> &nbsp; &lt;Product Id='????????-????-????-????-????????????' Name='ExampleProduct' <br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Language='$(loc.LANG)' Version='1.0.0.0' Manufacturer='Microsoft Corporation'&gt;<br /> &nbsp; &nbsp; &nbsp;&lt;Package Id='????????-????-????-????-????????????' <br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Description='$(loc.Description)' <br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Comments='$(loc.Comments)' <br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; InstallerVersion='200' Compressed='yes' /&gt;<br /> &nbsp; &nbsp; &nbsp;&lt;Media Id='1' Cabinet='product.cab' EmbedCab='yes' /&gt;<br /> &nbsp; &nbsp; &nbsp;&lt;Directory Id='TARGETDIR' Name='SourceDir'&gt;<br /> &nbsp; &nbsp; &nbsp; &nbsp; &lt;Directory Id='ProgramFilesFolder' Name='PFiles'&gt;<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;Directory Id='EXAMPLEDIR' Name='$(loc.ShortDirName)' LongName='$(loc.LongDirName)'&gt;<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;Directory Id='LangDir' Name='$(loc.LANG)'&gt;<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;Component Id='ExampleComponent' Guid='PUT-GUID-HERE' DiskId='1'&gt;<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;File Id='ExampleFile' Name='$(loc.FileName)' src='example.txt'&gt;<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;Shortcut Id='ExampleShortcut' <br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Directory='ProgramMenuFolder'<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Name='Example' LongName='$(loc.ShortShortcutName)'<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Description='$(loc.LongShortcutName)'/&gt;<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;/File&gt;<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;/Component&gt;<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;/Directory&gt;<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;/Directory&gt;<br /> &nbsp; &nbsp; &nbsp; &nbsp; &lt;/Directory&gt;<br /> &nbsp; &nbsp; &nbsp; &nbsp; &lt;Directory Id='ProgramMenuFolder' Name='ProgMenu'/&gt;<br /> &nbsp; &nbsp; &nbsp;&lt;/Directory&gt;<br /> &nbsp; &nbsp; &nbsp;&lt;Feature Id='ExampleFeature' Title='$(loc.FeatureTitle)' Level='1'&gt;<br /> &nbsp; &nbsp; &nbsp; &nbsp; &lt;ComponentRef Id='ExampleComponent' /&gt;<br /> &nbsp; &nbsp; &nbsp;&lt;/Feature&gt;<br /> &nbsp; &lt;/Product&gt;<br /> &lt;/Wix&gt;<br /> </pre> <p>You should again be able to compile that file but if you try to link you should see error messages such as, "light.exe : fatal error LGHT0023: Localization string&nbsp; 'FeatureTitle' unknown.&nbsp; Ensure that the $(loc.FeatureTitle) is defined."&nbsp; That error message basically means we did not provide a Localization file with all of the localizable identifiers and text.&nbsp; So, now we need to create our first .wxl file.&nbsp; I've called mine example1033.wxl and it goes a little like this:</p> <pre> &lt;?xml version='1.0'?&gt;<br /> &lt;WixLocalization xmlns='http://schemas.microsoft.com/wix/2003/01/localization' Codepage='1252'&gt;<br /> &nbsp; &lt;String Id='LANG'&gt;1033&lt;/String&gt;<br /> &nbsp; &lt;String Id='Description'&gt;Example Description for Product&lt;/String&gt;<br /> &nbsp; &lt;String Id='Comments'&gt;Example Product to demonstrate localized Data&lt;/String&gt;<br /> &nbsp; &lt;String Id='ShortDirName'&gt;example&lt;/String&gt;<br /> &nbsp; &lt;String Id='LongDirName'&gt;Example Directory&lt;/String&gt;<br /> &nbsp; &lt;String Id='Filename'&gt;example.txt&lt;/String&gt;<br /> &nbsp; &lt;String Id='ShortShortcutName'&gt;Example&lt;/String&gt;<br /> &nbsp; &lt;String Id='LongShortcutName'&gt;Shortcut to example.txt&lt;/String&gt;<br /> &nbsp; &lt;String Id='FeatureTitle'&gt;Example Feature for Product&lt;/String&gt;<br /> &lt;/WixLocalization&gt;<br /> </pre> <p>Now, to get our MSI file back.<br />&nbsp;</p> <pre> C:\wix&gt;candle example.wxs<br /> Microsoft (R) Windows Installer Xml Compiler version 2.0.2328.0<br /> Copyright (C) Microsoft Corporation 2003. All rights reserved.<br /> <br /> example.wxs<br /> <br /> C:\wix&gt;light example.wixobj -loc example1033.wxl<br /> Microsoft (R) Windows Installer Xml Linker version 2.0.2328.0<br /> Copyright (C) Microsoft Corporation 2003. All rights reserved.<br /> <br /> C:\wix&gt;<br /> </pre> <p>I want to note that (barring any typos) this MSI file should be identical to the first MSI file we created.&nbsp; I also want to note that this will be the last time we compile the example.wxs.&nbsp; Since we have specified all of our localization variables we no longer need to compile to get changes in our MSI file.&nbsp; All we need to do localize our example1033.wxl file into other languages.&nbsp; Since, I don't know any other languages, I'm going to localize our example1033.wxl file into the "Foo language" and use the Japanese LCID, 1041, since I happen to remember that one.&nbsp; Here's the example1041.wxl file localized into the "Foo language":</p> <pre> &lt;?xml version='1.0'?&gt;<br /> &lt;WixLocalization xmlns='http://schemas.microsoft.com/wix/2003/01/localization' Codepage='932'&gt;<br /> &nbsp; &lt;String Id='LANGID'&gt;1041&lt;/String&gt;<br /> &nbsp; &lt;String Id='Description'&gt;Foo Foo foo Foo&lt;/String&gt;<br /> &nbsp; &lt;String Id='Comments'&gt;Foo Foo foo foo foo Foo&lt;/String&gt;<br /> &nbsp; &lt;String Id='ShortDirName'&gt;Foo&lt;/String&gt;<br /> &nbsp; &lt;String Id='LongDirName'&gt;Foo Foo&lt;/String&gt;<br /> &nbsp; &lt;String Id='Filename'&gt;foo.txt&lt;/String&gt;<br /> &nbsp; &lt;String Id='ShortShortcutName'&gt;Foo&lt;/String&gt;<br /> &nbsp; &lt;String Id='LongShortcutName'&gt;Foo foo foo.txt&lt;/String&gt;<br /> &nbsp; &lt;String Id='FeatureTitle'&gt;Foo Foo foo Foo&lt;/String&gt;<br /> &lt;/WixLocalization&gt;<br /> </pre> <p>Notice how elegant the "Foo language" is.&nbsp; The elegance really is lost in text format.&nbsp; So much of the "Foo language" is transmitted via the pitch and duration of each word.&nbsp; But I digress.&nbsp; Let's build our "Foo language" example.msi file.&nbsp; This will just stomp over our previous example.msi so make sure you uninstall the previous example.msi file using "msiexec /x example.msi" (or you'll have to go to Control Panel -&gt; Add/Remove Programs).&nbsp; Let's link (and only link) our MSI file:</p> <pre> C:\wix&gt;light example.wixobj -loc example1041.wxl<br /> Microsoft (R) Windows Installer Xml Linker version 2.0.2328.0<br /> Copyright (C) Microsoft Corporation 2003. All rights reserved.<br /> <br /> C:\wix&gt;<br /> </pre> <p>Now if you install the MSI file you are likely to see square boxes for the ActionText during the progress dialog box.&nbsp; I believe this occurs when you don't have the Japanese fonts necessary to display the Windows Installer's default text messages.&nbsp; In any case, I don't have Japanese fonts installed on my machine so I see square boxes.&nbsp; However, square boxes or no square boxes everything should install just fine.&nbsp; After installing, you too should see a "Foo" shortcut in your ProgramMenuFolder.</p> <p>That's all there is to .wxl files.&nbsp; Hopefully, you can see how the Localization files can greatly simplify the relationship between you, your localizers, and your setup.&nbsp; I would also like to note that .wxl files are relatively new constructs in the WiX toolset so if you have suggestions how to improve them please feel free to send your feedback to the "wix-devs at sourceforge.net" mailing list.</p> <p>And that brings me to my final point.&nbsp; There is one very fatal flaw in the code above.&nbsp; I debated delaying this blog entry to fix the issue but decided the content here was valuable even with the mistake.&nbsp; Have you found it yet?&nbsp; Look closely at the Component/@Guid attribute.&nbsp; Did that value change each time you created a completely different Component like the step 9 in the <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/localizing_a_windows_installer_package.asp">Localization Overview</a> suggests?&nbsp; Probably not because you can't currently localize GUID values as described by <a href="http://sourceforge.net/tracker/index.php?func=detail&amp;aid=1075824&amp;group_id=105970&amp;atid=642714">this bug on SourceForge</a>.&nbsp; However, the value should change because you have very different Shortcuts in the two Components (and the example.txt file is installed to different locations so there is no overlap).&nbsp; So, I apologize profusely for creating an example that violates the <A href="http://blogs.msdn.com/robmen/archive/2003/10/18/56497.aspx">Component Rules</a> and I will fix the bug ASAP.</p> <p>In the meantime, have fun playing with your .wxl files and keep coding.</p>
<p><i>Copyright © Rob Mensching</i></p>

</body>
</html>