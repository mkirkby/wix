//-------------------------------------------------------------------------------------------------
// <copyright file="ConsoleMessageHandler.cs" company="Microsoft">
//    Copyright (c) Microsoft Corporation.  All rights reserved.
//    
//    The use and distribution terms for this software are covered by the
//    Common Public License 1.0 (http://opensource.org/licenses/cpl.php)
//    which can be found in the file CPL.TXT at the root of this distribution.
//    By using this software in any fashion, you are agreeing to be bound by
//    the terms of this license.
//    
//    You must not remove this notice, or any other, from this software.
// </copyright>
//
// <summary>
// Message handler for console.
// </summary>
//-------------------------------------------------------------------------------------------------
namespace Microsoft.Tools.WindowsInstallerXml
{
    using System;
    using System.Collections;
    using System.Diagnostics.CodeAnalysis;
    using System.Globalization;
    using System.Text;

    /// <summary>
    /// Message handler for console applications.
    /// </summary>
    public class ConsoleMessageHandler : MessageHandler
    {
        private const int SuccessErrorNumber = 0;

        private int lastErrorNumber;
        private string shortAppName;
        private string longAppName;

        /// <summary>
        /// Create a new console message handler.
        /// </summary>
        /// <param name="shortAppName">Short application name; usually 4 uppercase characters.</param>
        /// <param name="longAppName">Long application name; usually the executable name.</param>
        public ConsoleMessageHandler(string shortAppName, string longAppName)
        {
            this.shortAppName = shortAppName;
            this.longAppName = longAppName;
        }

        /// <summary>
        /// Gets the last error code encountered by the message handler.
        /// </summary>
        /// <value>The exit code for the process.</value>
        public int LastErrorNumber
        {
            get { return this.lastErrorNumber; }
        }

        /// <summary>
        /// Display a message to the console.
        /// </summary>
        /// <param name="sender">Sender of the message.</param>
        /// <param name="mea">Arguments for the message event.</param>
        [SuppressMessage("Microsoft.Security", "CA2109:ReviewVisibleEventHandlers")]
        public virtual void Display(object sender, MessageEventArgs mea)
        {
            string message = this.GetMessageString(sender, mea);

            if (null != message)
            {
                Console.WriteLine(message);
            }
        }

        /// <summary>
        /// Creates a properly formatted message string.
        /// </summary>
        /// <param name="messageLevel">Level of the message, as generated by MessageLevel(MessageEventArgs).</param>
        /// <param name="mea">Event arguments for the message.</param>
        /// <returns>String containing the formatted message.</returns>
        protected override string GenerateMessageString(MessageLevel messageLevel, MessageEventArgs mea)
        {
            string message = base.GenerateMessageString(messageLevel, mea);

            if (null == message)
            {
                return null;
            }

            StringBuilder messageBuilder = new StringBuilder();
            ArrayList fileNames = new ArrayList();
            string errorFileName = this.longAppName;
            string messageType = String.Empty;

            if (MessageLevel.Warning == messageLevel)
            {
                messageType = WConsoleStrings.MessageType_Warning;
            }
            else if (MessageLevel.Error == messageLevel)
            {
                this.lastErrorNumber = mea.Id;
                messageType = WConsoleStrings.MessageType_Error;
            }

            if (null != mea.SourceLineNumbers && 0 < mea.SourceLineNumbers.Count)
            {
                bool first = true;
                foreach (SourceLineNumber sln in mea.SourceLineNumbers)
                {
                    if (sln.HasLineNumber)
                    {
                        if (first)
                        {
                            first = false;
                            errorFileName = String.Format(CultureInfo.CurrentUICulture, WConsoleStrings.Format_FirstLineNumber, sln.FileName, sln.LineNumber);
                        }

                        fileNames.Add(String.Format(CultureInfo.CurrentUICulture, WConsoleStrings.Format_LineNumber, sln.FileName, sln.LineNumber));
                    }
                    else
                    {
                        if (first)
                        {
                            first = false;
                            errorFileName = sln.FileName;
                        }

                        fileNames.Add(sln.FileName);
                    }
                }
            }

            if (MessageLevel.Information == messageLevel)
            {
                messageBuilder.AppendFormat(WConsoleStrings.Format_InfoMessage, message);
            }
            else
            {
                messageBuilder.AppendFormat(WConsoleStrings.Format_NonInfoMessage, errorFileName, messageType, this.shortAppName, mea.Id, message);
            }

            if (this.SourceTrace)
            {
                if (0 == fileNames.Count)
                {
                    messageBuilder.AppendFormat(WConsoleStrings.INF_SourceTraceUnavailable, Environment.NewLine);
                }
                else
                {
                    messageBuilder.AppendFormat(WConsoleStrings.INF_SourceTrace, Environment.NewLine);
                    foreach (string fileName in fileNames)
                    {
                        messageBuilder.AppendFormat(WConsoleStrings.INF_SourceTraceLocation, fileName, Environment.NewLine);
                    }
                }

                messageBuilder.Append(Environment.NewLine);
            }

            return messageBuilder.ToString();
        }
    }
}
