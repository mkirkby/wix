//------------------------------------------------------------------------------
// <copyright file="wix.cs" company="Microsoft">
//    Copyright (c) Microsoft Corporation.  All rights reserved.
//    
//    The use and distribution terms for this software are covered by the
//    Common Public License 1.0 (http://opensource.org/licenses/cpl.php)
//    which can be found in the file CPL.TXT at the root of this distribution.
//    By using this software in any fashion, you are agreeing to be bound by
//    the terms of this license.
//    
//    You must not remove this notice, or any other, from this software.
// </copyright>
// 
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2300
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Microsoft.Tools.WindowsInstallerXml.Serialize
{
    using System;
    using System.Collections;
    using System.Xml;
    
    
    [Flags()]
    public enum ClassContextType
    {
        
        None = 0,
        
        LocalServer = 1,
        
        LocalServer32 = 2,
        
        InprocServer = 4,
        
        InprocServer32 = 8,
    }
    
    public enum YesNoType
    {
        
        no,
        
        yes,
    }
    
    public enum YesNoDefaultType
    {
        
        @default,
        
        no,
        
        yes,
    }
    
    public abstract class ActionSequenceType : ISchemaElement
    {
        
        private int sequenceField;
        
        private bool sequenceFieldSet;
        
        private YesNoType suppressField;
        
        private bool suppressFieldSet;
        
        private string contentField;
        
        private bool contentFieldSet;
        
        public int Sequence
        {
            get
            {
                return this.sequenceField;
            }
            set
            {
                this.sequenceFieldSet = true;
                this.sequenceField = value;
            }
        }
        
        public YesNoType Suppress
        {
            get
            {
                return this.suppressField;
            }
            set
            {
                this.suppressFieldSet = true;
                this.suppressField = value;
            }
        }
        
        public string Content
        {
            get
            {
                return this.contentField;
            }
            set
            {
                this.contentFieldSet = true;
                this.contentField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            if (this.sequenceFieldSet)
            {
                writer.WriteAttributeString("Sequence", this.sequenceField.ToString());
            }
            if (this.suppressFieldSet)
            {
                if ((this.suppressField == YesNoType.no))
                {
                    writer.WriteAttributeString("Suppress", "no");
                }
                if ((this.suppressField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Suppress", "yes");
                }
            }
            if (this.contentFieldSet)
            {
                writer.WriteString(this.contentField);
            }
        }
    }
    
    public abstract class ActionModuleSequenceType : ISchemaElement
    {
        
        private string beforeField;
        
        private bool beforeFieldSet;
        
        private string afterField;
        
        private bool afterFieldSet;
        
        private int sequenceField;
        
        private bool sequenceFieldSet;
        
        private YesNoType suppressField;
        
        private bool suppressFieldSet;
        
        private string contentField;
        
        private bool contentFieldSet;
        
        public string Before
        {
            get
            {
                return this.beforeField;
            }
            set
            {
                this.beforeFieldSet = true;
                this.beforeField = value;
            }
        }
        
        public string After
        {
            get
            {
                return this.afterField;
            }
            set
            {
                this.afterFieldSet = true;
                this.afterField = value;
            }
        }
        
        public int Sequence
        {
            get
            {
                return this.sequenceField;
            }
            set
            {
                this.sequenceFieldSet = true;
                this.sequenceField = value;
            }
        }
        
        public YesNoType Suppress
        {
            get
            {
                return this.suppressField;
            }
            set
            {
                this.suppressFieldSet = true;
                this.suppressField = value;
            }
        }
        
        public string Content
        {
            get
            {
                return this.contentField;
            }
            set
            {
                this.contentFieldSet = true;
                this.contentField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            if (this.beforeFieldSet)
            {
                writer.WriteAttributeString("Before", this.beforeField);
            }
            if (this.afterFieldSet)
            {
                writer.WriteAttributeString("After", this.afterField);
            }
            if (this.sequenceFieldSet)
            {
                writer.WriteAttributeString("Sequence", this.sequenceField.ToString());
            }
            if (this.suppressFieldSet)
            {
                if ((this.suppressField == YesNoType.no))
                {
                    writer.WriteAttributeString("Suppress", "no");
                }
                if ((this.suppressField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Suppress", "yes");
                }
            }
            if (this.contentFieldSet)
            {
                writer.WriteString(this.contentField);
            }
        }
    }
    
    public enum ModularizeType
    {
        
        None,
        
        Column,
        
        Property,
        
        Condition,
        
        CompanionFile,
        
        SemicolonDelimited,
    }
    
    public class ReserveCost : ISchemaElement
    {
        
        private string idField;
        
        private bool idFieldSet;
        
        private string directoryField;
        
        private bool directoryFieldSet;
        
        private int runLocalField;
        
        private bool runLocalFieldSet;
        
        private int runFromSourceField;
        
        private bool runFromSourceFieldSet;
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string Directory
        {
            get
            {
                return this.directoryField;
            }
            set
            {
                this.directoryFieldSet = true;
                this.directoryField = value;
            }
        }
        
        public int RunLocal
        {
            get
            {
                return this.runLocalField;
            }
            set
            {
                this.runLocalFieldSet = true;
                this.runLocalField = value;
            }
        }
        
        public int RunFromSource
        {
            get
            {
                return this.runFromSourceField;
            }
            set
            {
                this.runFromSourceFieldSet = true;
                this.runFromSourceField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("ReserveCost", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.directoryFieldSet)
            {
                writer.WriteAttributeString("Directory", this.directoryField);
            }
            if (this.runLocalFieldSet)
            {
                writer.WriteAttributeString("RunLocal", this.runLocalField.ToString());
            }
            if (this.runFromSourceFieldSet)
            {
                writer.WriteAttributeString("RunFromSource", this.runFromSourceField.ToString());
            }
            writer.WriteEndElement();
        }
    }
    
    public class IsolateComponents : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("IsolateComponents", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class WebProperty : ISchemaElement
    {
        
        private IdType idField;
        
        private bool idFieldSet;
        
        private string valueField;
        
        private bool valueFieldSet;
        
        public IdType Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string Value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueFieldSet = true;
                this.valueField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("WebProperty", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                if ((this.idField == IdType.ETagChangeNumber))
                {
                    writer.WriteAttributeString("Id", "ETagChangeNumber");
                }
                if ((this.idField == IdType.IIs5IsolationMode))
                {
                    writer.WriteAttributeString("Id", "IIs5IsolationMode");
                }
                if ((this.idField == IdType.MaxGlobalBandwidth))
                {
                    writer.WriteAttributeString("Id", "MaxGlobalBandwidth");
                }
                if ((this.idField == IdType.LogInUTF8))
                {
                    writer.WriteAttributeString("Id", "LogInUTF8");
                }
            }
            if (this.valueFieldSet)
            {
                writer.WriteAttributeString("Value", this.valueField);
            }
            writer.WriteEndElement();
        }
        
        public enum IdType
        {
            
            ETagChangeNumber,
            
            IIs5IsolationMode,
            
            MaxGlobalBandwidth,
            
            LogInUTF8,
        }
    }
    
    public class RemoveEnvironmentStrings : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("RemoveEnvironmentStrings", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class PatchInformation : ISchemaElement
    {
        
        private string descriptionField;
        
        private bool descriptionFieldSet;
        
        private string platformsField;
        
        private bool platformsFieldSet;
        
        private string languagesField;
        
        private bool languagesFieldSet;
        
        private string manufacturerField;
        
        private bool manufacturerFieldSet;
        
        private string keywordsField;
        
        private bool keywordsFieldSet;
        
        private string commentsField;
        
        private bool commentsFieldSet;
        
        private string summaryCodepageField;
        
        private bool summaryCodepageFieldSet;
        
        private YesNoType shortNamesField;
        
        private bool shortNamesFieldSet;
        
        private YesNoType compressedField;
        
        private bool compressedFieldSet;
        
        private YesNoType adminImageField;
        
        private bool adminImageFieldSet;
        
        public string Description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionFieldSet = true;
                this.descriptionField = value;
            }
        }
        
        public string Platforms
        {
            get
            {
                return this.platformsField;
            }
            set
            {
                this.platformsFieldSet = true;
                this.platformsField = value;
            }
        }
        
        public string Languages
        {
            get
            {
                return this.languagesField;
            }
            set
            {
                this.languagesFieldSet = true;
                this.languagesField = value;
            }
        }
        
        public string Manufacturer
        {
            get
            {
                return this.manufacturerField;
            }
            set
            {
                this.manufacturerFieldSet = true;
                this.manufacturerField = value;
            }
        }
        
        public string Keywords
        {
            get
            {
                return this.keywordsField;
            }
            set
            {
                this.keywordsFieldSet = true;
                this.keywordsField = value;
            }
        }
        
        public string Comments
        {
            get
            {
                return this.commentsField;
            }
            set
            {
                this.commentsFieldSet = true;
                this.commentsField = value;
            }
        }
        
        public string SummaryCodepage
        {
            get
            {
                return this.summaryCodepageField;
            }
            set
            {
                this.summaryCodepageFieldSet = true;
                this.summaryCodepageField = value;
            }
        }
        
        public YesNoType ShortNames
        {
            get
            {
                return this.shortNamesField;
            }
            set
            {
                this.shortNamesFieldSet = true;
                this.shortNamesField = value;
            }
        }
        
        public YesNoType Compressed
        {
            get
            {
                return this.compressedField;
            }
            set
            {
                this.compressedFieldSet = true;
                this.compressedField = value;
            }
        }
        
        public YesNoType AdminImage
        {
            get
            {
                return this.adminImageField;
            }
            set
            {
                this.adminImageFieldSet = true;
                this.adminImageField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("PatchInformation", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.descriptionFieldSet)
            {
                writer.WriteAttributeString("Description", this.descriptionField);
            }
            if (this.platformsFieldSet)
            {
                writer.WriteAttributeString("Platforms", this.platformsField);
            }
            if (this.languagesFieldSet)
            {
                writer.WriteAttributeString("Languages", this.languagesField);
            }
            if (this.manufacturerFieldSet)
            {
                writer.WriteAttributeString("Manufacturer", this.manufacturerField);
            }
            if (this.keywordsFieldSet)
            {
                writer.WriteAttributeString("Keywords", this.keywordsField);
            }
            if (this.commentsFieldSet)
            {
                writer.WriteAttributeString("Comments", this.commentsField);
            }
            if (this.summaryCodepageFieldSet)
            {
                writer.WriteAttributeString("SummaryCodepage", this.summaryCodepageField);
            }
            if (this.shortNamesFieldSet)
            {
                if ((this.shortNamesField == YesNoType.no))
                {
                    writer.WriteAttributeString("ShortNames", "no");
                }
                if ((this.shortNamesField == YesNoType.yes))
                {
                    writer.WriteAttributeString("ShortNames", "yes");
                }
            }
            if (this.compressedFieldSet)
            {
                if ((this.compressedField == YesNoType.no))
                {
                    writer.WriteAttributeString("Compressed", "no");
                }
                if ((this.compressedField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Compressed", "yes");
                }
            }
            if (this.adminImageFieldSet)
            {
                if ((this.adminImageField == YesNoType.no))
                {
                    writer.WriteAttributeString("AdminImage", "no");
                }
                if ((this.adminImageField == YesNoType.yes))
                {
                    writer.WriteAttributeString("AdminImage", "yes");
                }
            }
            writer.WriteEndElement();
        }
    }
    
    public class Fragment : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string idField;
        
        private bool idFieldSet;
        
        public Fragment()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Sequence);
            ElementCollection childCollection1 = new ElementCollection(ElementCollection.CollectionType.Choice, 0, -1);
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(AppId)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(Binary)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(ComplianceCheck)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(ComponentGroup)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(Condition)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(CustomAction)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(CustomTable)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(Directory)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(DirectoryRef)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(EnsureTable)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(Feature)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(FeatureRef)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(FragmentRef)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(Group)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(Icon)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(IgnoreModularization)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(Media)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(Property)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(PropertyRef)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(SFPCatalog)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(SqlDatabase)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(UI)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(Upgrade)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(User)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(WebApplication)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(WebAppPool)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(WebDirProperties)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(WebLog)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(WebSite)));
            ElementCollection childCollection2 = new ElementCollection(ElementCollection.CollectionType.Sequence);
            childCollection2.AddItem(new ElementCollection.SequenceItem(typeof(InstallExecuteSequence), 0, 1));
            childCollection2.AddItem(new ElementCollection.SequenceItem(typeof(InstallUISequence), 0, 1));
            childCollection2.AddItem(new ElementCollection.SequenceItem(typeof(AdminExecuteSequence), 0, 1));
            childCollection2.AddItem(new ElementCollection.SequenceItem(typeof(AdminUISequence), 0, 1));
            childCollection2.AddItem(new ElementCollection.SequenceItem(typeof(AdvertiseExecuteSequence), 0, 1));
            childCollection1.AddCollection(childCollection2);
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(ISchemaElement)));
            childCollection0.AddCollection(childCollection1);
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("Fragment", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
    
    public class TargetFile : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string idField;
        
        private bool idFieldSet;
        
        public TargetFile()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Sequence);
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(SymbolPath), 0, 1));
            ElementCollection childCollection1 = new ElementCollection(ElementCollection.CollectionType.Choice, 0, -1);
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(IgnoreRange)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(ProtectRange)));
            childCollection0.AddCollection(childCollection1);
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("TargetFile", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
    
    public class AdminUISequence : ISchemaElement
    {
        
        private ElementCollection children;
        
        public AdminUISequence()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Choice, 0, -1);
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Custom)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Show)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(CostInitialize)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(FileCost)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(CostFinalize)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(ExecuteAction)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(InstallValidate)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(InstallInitialize)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(InstallAdminPackage)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(InstallFiles)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(InstallFinalize)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(LaunchConditions)));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("AdminUISequence", "http://schemas.microsoft.com/wix/2003/01/wi");
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
    
    public class ForceReboot : ActionModuleSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("ForceReboot", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class FragmentRef : ISchemaElement
    {
        
        private string idField;
        
        private bool idFieldSet;
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("FragmentRef", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            writer.WriteEndElement();
        }
    }
    
    public class Icon : ISchemaElement
    {
        
        private string idField;
        
        private bool idFieldSet;
        
        private string srcField;
        
        private bool srcFieldSet;
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string src
        {
            get
            {
                return this.srcField;
            }
            set
            {
                this.srcFieldSet = true;
                this.srcField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("Icon", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.srcFieldSet)
            {
                writer.WriteAttributeString("src", this.srcField);
            }
            writer.WriteEndElement();
        }
    }
    
    public class Dialog : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string idField;
        
        private bool idFieldSet;
        
        private int xField;
        
        private bool xFieldSet;
        
        private int yField;
        
        private bool yFieldSet;
        
        private int widthField;
        
        private bool widthFieldSet;
        
        private int heightField;
        
        private bool heightFieldSet;
        
        private string titleField;
        
        private bool titleFieldSet;
        
        private YesNoType hiddenField;
        
        private bool hiddenFieldSet;
        
        private YesNoType modelessField;
        
        private bool modelessFieldSet;
        
        private YesNoType noMinimizeField;
        
        private bool noMinimizeFieldSet;
        
        private YesNoType systemModalField;
        
        private bool systemModalFieldSet;
        
        private YesNoType keepModelessField;
        
        private bool keepModelessFieldSet;
        
        private YesNoType trackDiskSpaceField;
        
        private bool trackDiskSpaceFieldSet;
        
        private YesNoType customPaletteField;
        
        private bool customPaletteFieldSet;
        
        private YesNoType rightToLeftField;
        
        private bool rightToLeftFieldSet;
        
        private YesNoType rightAlignedField;
        
        private bool rightAlignedFieldSet;
        
        private YesNoType leftScrollField;
        
        private bool leftScrollFieldSet;
        
        private YesNoType errorDialogField;
        
        private bool errorDialogFieldSet;
        
        public Dialog()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Sequence);
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(Control), 0, -1));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public int X
        {
            get
            {
                return this.xField;
            }
            set
            {
                this.xFieldSet = true;
                this.xField = value;
            }
        }
        
        public int Y
        {
            get
            {
                return this.yField;
            }
            set
            {
                this.yFieldSet = true;
                this.yField = value;
            }
        }
        
        public int Width
        {
            get
            {
                return this.widthField;
            }
            set
            {
                this.widthFieldSet = true;
                this.widthField = value;
            }
        }
        
        public int Height
        {
            get
            {
                return this.heightField;
            }
            set
            {
                this.heightFieldSet = true;
                this.heightField = value;
            }
        }
        
        public string Title
        {
            get
            {
                return this.titleField;
            }
            set
            {
                this.titleFieldSet = true;
                this.titleField = value;
            }
        }
        
        public YesNoType Hidden
        {
            get
            {
                return this.hiddenField;
            }
            set
            {
                this.hiddenFieldSet = true;
                this.hiddenField = value;
            }
        }
        
        public YesNoType Modeless
        {
            get
            {
                return this.modelessField;
            }
            set
            {
                this.modelessFieldSet = true;
                this.modelessField = value;
            }
        }
        
        public YesNoType NoMinimize
        {
            get
            {
                return this.noMinimizeField;
            }
            set
            {
                this.noMinimizeFieldSet = true;
                this.noMinimizeField = value;
            }
        }
        
        public YesNoType SystemModal
        {
            get
            {
                return this.systemModalField;
            }
            set
            {
                this.systemModalFieldSet = true;
                this.systemModalField = value;
            }
        }
        
        public YesNoType KeepModeless
        {
            get
            {
                return this.keepModelessField;
            }
            set
            {
                this.keepModelessFieldSet = true;
                this.keepModelessField = value;
            }
        }
        
        public YesNoType TrackDiskSpace
        {
            get
            {
                return this.trackDiskSpaceField;
            }
            set
            {
                this.trackDiskSpaceFieldSet = true;
                this.trackDiskSpaceField = value;
            }
        }
        
        public YesNoType CustomPalette
        {
            get
            {
                return this.customPaletteField;
            }
            set
            {
                this.customPaletteFieldSet = true;
                this.customPaletteField = value;
            }
        }
        
        public YesNoType RightToLeft
        {
            get
            {
                return this.rightToLeftField;
            }
            set
            {
                this.rightToLeftFieldSet = true;
                this.rightToLeftField = value;
            }
        }
        
        public YesNoType RightAligned
        {
            get
            {
                return this.rightAlignedField;
            }
            set
            {
                this.rightAlignedFieldSet = true;
                this.rightAlignedField = value;
            }
        }
        
        public YesNoType LeftScroll
        {
            get
            {
                return this.leftScrollField;
            }
            set
            {
                this.leftScrollFieldSet = true;
                this.leftScrollField = value;
            }
        }
        
        public YesNoType ErrorDialog
        {
            get
            {
                return this.errorDialogField;
            }
            set
            {
                this.errorDialogFieldSet = true;
                this.errorDialogField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("Dialog", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.xFieldSet)
            {
                writer.WriteAttributeString("X", this.xField.ToString());
            }
            if (this.yFieldSet)
            {
                writer.WriteAttributeString("Y", this.yField.ToString());
            }
            if (this.widthFieldSet)
            {
                writer.WriteAttributeString("Width", this.widthField.ToString());
            }
            if (this.heightFieldSet)
            {
                writer.WriteAttributeString("Height", this.heightField.ToString());
            }
            if (this.titleFieldSet)
            {
                writer.WriteAttributeString("Title", this.titleField);
            }
            if (this.hiddenFieldSet)
            {
                if ((this.hiddenField == YesNoType.no))
                {
                    writer.WriteAttributeString("Hidden", "no");
                }
                if ((this.hiddenField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Hidden", "yes");
                }
            }
            if (this.modelessFieldSet)
            {
                if ((this.modelessField == YesNoType.no))
                {
                    writer.WriteAttributeString("Modeless", "no");
                }
                if ((this.modelessField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Modeless", "yes");
                }
            }
            if (this.noMinimizeFieldSet)
            {
                if ((this.noMinimizeField == YesNoType.no))
                {
                    writer.WriteAttributeString("NoMinimize", "no");
                }
                if ((this.noMinimizeField == YesNoType.yes))
                {
                    writer.WriteAttributeString("NoMinimize", "yes");
                }
            }
            if (this.systemModalFieldSet)
            {
                if ((this.systemModalField == YesNoType.no))
                {
                    writer.WriteAttributeString("SystemModal", "no");
                }
                if ((this.systemModalField == YesNoType.yes))
                {
                    writer.WriteAttributeString("SystemModal", "yes");
                }
            }
            if (this.keepModelessFieldSet)
            {
                if ((this.keepModelessField == YesNoType.no))
                {
                    writer.WriteAttributeString("KeepModeless", "no");
                }
                if ((this.keepModelessField == YesNoType.yes))
                {
                    writer.WriteAttributeString("KeepModeless", "yes");
                }
            }
            if (this.trackDiskSpaceFieldSet)
            {
                if ((this.trackDiskSpaceField == YesNoType.no))
                {
                    writer.WriteAttributeString("TrackDiskSpace", "no");
                }
                if ((this.trackDiskSpaceField == YesNoType.yes))
                {
                    writer.WriteAttributeString("TrackDiskSpace", "yes");
                }
            }
            if (this.customPaletteFieldSet)
            {
                if ((this.customPaletteField == YesNoType.no))
                {
                    writer.WriteAttributeString("CustomPalette", "no");
                }
                if ((this.customPaletteField == YesNoType.yes))
                {
                    writer.WriteAttributeString("CustomPalette", "yes");
                }
            }
            if (this.rightToLeftFieldSet)
            {
                if ((this.rightToLeftField == YesNoType.no))
                {
                    writer.WriteAttributeString("RightToLeft", "no");
                }
                if ((this.rightToLeftField == YesNoType.yes))
                {
                    writer.WriteAttributeString("RightToLeft", "yes");
                }
            }
            if (this.rightAlignedFieldSet)
            {
                if ((this.rightAlignedField == YesNoType.no))
                {
                    writer.WriteAttributeString("RightAligned", "no");
                }
                if ((this.rightAlignedField == YesNoType.yes))
                {
                    writer.WriteAttributeString("RightAligned", "yes");
                }
            }
            if (this.leftScrollFieldSet)
            {
                if ((this.leftScrollField == YesNoType.no))
                {
                    writer.WriteAttributeString("LeftScroll", "no");
                }
                if ((this.leftScrollField == YesNoType.yes))
                {
                    writer.WriteAttributeString("LeftScroll", "yes");
                }
            }
            if (this.errorDialogFieldSet)
            {
                if ((this.errorDialogField == YesNoType.no))
                {
                    writer.WriteAttributeString("ErrorDialog", "no");
                }
                if ((this.errorDialogField == YesNoType.yes))
                {
                    writer.WriteAttributeString("ErrorDialog", "yes");
                }
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
    
    public class ExecuteAction : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("ExecuteAction", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class SqlScript : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string idField;
        
        private bool idFieldSet;
        
        private string sqlDbField;
        
        private bool sqlDbFieldSet;
        
        private string userField;
        
        private bool userFieldSet;
        
        private string binaryKeyField;
        
        private bool binaryKeyFieldSet;
        
        private YesNoType executeOnInstallField;
        
        private bool executeOnInstallFieldSet;
        
        private YesNoType executeOnReInstallField;
        
        private bool executeOnReInstallFieldSet;
        
        private YesNoType executeOnUninstallField;
        
        private bool executeOnUninstallFieldSet;
        
        private YesNoType rollbackOnInstallField;
        
        private bool rollbackOnInstallFieldSet;
        
        private YesNoType rollbackOnUninstallField;
        
        private bool rollbackOnUninstallFieldSet;
        
        private YesNoType continueOnErrorField;
        
        private bool continueOnErrorFieldSet;
        
        private int sequenceField;
        
        private bool sequenceFieldSet;
        
        public SqlScript()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Sequence);
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(Binary), 0, 1));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string SqlDb
        {
            get
            {
                return this.sqlDbField;
            }
            set
            {
                this.sqlDbFieldSet = true;
                this.sqlDbField = value;
            }
        }
        
        public string User
        {
            get
            {
                return this.userField;
            }
            set
            {
                this.userFieldSet = true;
                this.userField = value;
            }
        }
        
        public string BinaryKey
        {
            get
            {
                return this.binaryKeyField;
            }
            set
            {
                this.binaryKeyFieldSet = true;
                this.binaryKeyField = value;
            }
        }
        
        public YesNoType ExecuteOnInstall
        {
            get
            {
                return this.executeOnInstallField;
            }
            set
            {
                this.executeOnInstallFieldSet = true;
                this.executeOnInstallField = value;
            }
        }
        
        public YesNoType ExecuteOnReInstall
        {
            get
            {
                return this.executeOnReInstallField;
            }
            set
            {
                this.executeOnReInstallFieldSet = true;
                this.executeOnReInstallField = value;
            }
        }
        
        public YesNoType ExecuteOnUninstall
        {
            get
            {
                return this.executeOnUninstallField;
            }
            set
            {
                this.executeOnUninstallFieldSet = true;
                this.executeOnUninstallField = value;
            }
        }
        
        public YesNoType RollbackOnInstall
        {
            get
            {
                return this.rollbackOnInstallField;
            }
            set
            {
                this.rollbackOnInstallFieldSet = true;
                this.rollbackOnInstallField = value;
            }
        }
        
        public YesNoType RollbackOnUninstall
        {
            get
            {
                return this.rollbackOnUninstallField;
            }
            set
            {
                this.rollbackOnUninstallFieldSet = true;
                this.rollbackOnUninstallField = value;
            }
        }
        
        public YesNoType ContinueOnError
        {
            get
            {
                return this.continueOnErrorField;
            }
            set
            {
                this.continueOnErrorFieldSet = true;
                this.continueOnErrorField = value;
            }
        }
        
        public int Sequence
        {
            get
            {
                return this.sequenceField;
            }
            set
            {
                this.sequenceFieldSet = true;
                this.sequenceField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("SqlScript", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.sqlDbFieldSet)
            {
                writer.WriteAttributeString("SqlDb", this.sqlDbField);
            }
            if (this.userFieldSet)
            {
                writer.WriteAttributeString("User", this.userField);
            }
            if (this.binaryKeyFieldSet)
            {
                writer.WriteAttributeString("BinaryKey", this.binaryKeyField);
            }
            if (this.executeOnInstallFieldSet)
            {
                if ((this.executeOnInstallField == YesNoType.no))
                {
                    writer.WriteAttributeString("ExecuteOnInstall", "no");
                }
                if ((this.executeOnInstallField == YesNoType.yes))
                {
                    writer.WriteAttributeString("ExecuteOnInstall", "yes");
                }
            }
            if (this.executeOnReInstallFieldSet)
            {
                if ((this.executeOnReInstallField == YesNoType.no))
                {
                    writer.WriteAttributeString("ExecuteOnReInstall", "no");
                }
                if ((this.executeOnReInstallField == YesNoType.yes))
                {
                    writer.WriteAttributeString("ExecuteOnReInstall", "yes");
                }
            }
            if (this.executeOnUninstallFieldSet)
            {
                if ((this.executeOnUninstallField == YesNoType.no))
                {
                    writer.WriteAttributeString("ExecuteOnUninstall", "no");
                }
                if ((this.executeOnUninstallField == YesNoType.yes))
                {
                    writer.WriteAttributeString("ExecuteOnUninstall", "yes");
                }
            }
            if (this.rollbackOnInstallFieldSet)
            {
                if ((this.rollbackOnInstallField == YesNoType.no))
                {
                    writer.WriteAttributeString("RollbackOnInstall", "no");
                }
                if ((this.rollbackOnInstallField == YesNoType.yes))
                {
                    writer.WriteAttributeString("RollbackOnInstall", "yes");
                }
            }
            if (this.rollbackOnUninstallFieldSet)
            {
                if ((this.rollbackOnUninstallField == YesNoType.no))
                {
                    writer.WriteAttributeString("RollbackOnUninstall", "no");
                }
                if ((this.rollbackOnUninstallField == YesNoType.yes))
                {
                    writer.WriteAttributeString("RollbackOnUninstall", "yes");
                }
            }
            if (this.continueOnErrorFieldSet)
            {
                if ((this.continueOnErrorField == YesNoType.no))
                {
                    writer.WriteAttributeString("ContinueOnError", "no");
                }
                if ((this.continueOnErrorField == YesNoType.yes))
                {
                    writer.WriteAttributeString("ContinueOnError", "yes");
                }
            }
            if (this.sequenceFieldSet)
            {
                writer.WriteAttributeString("Sequence", this.sequenceField.ToString());
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
    
    public class RMCCPSearch : ActionModuleSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("RMCCPSearch", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class CustomProperty : ISchemaElement
    {
        
        private string companyField;
        
        private bool companyFieldSet;
        
        private string propertyField;
        
        private bool propertyFieldSet;
        
        private string valueField;
        
        private bool valueFieldSet;
        
        public string Company
        {
            get
            {
                return this.companyField;
            }
            set
            {
                this.companyFieldSet = true;
                this.companyField = value;
            }
        }
        
        public string Property
        {
            get
            {
                return this.propertyField;
            }
            set
            {
                this.propertyFieldSet = true;
                this.propertyField = value;
            }
        }
        
        public string Value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueFieldSet = true;
                this.valueField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("CustomProperty", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.companyFieldSet)
            {
                writer.WriteAttributeString("Company", this.companyField);
            }
            if (this.propertyFieldSet)
            {
                writer.WriteAttributeString("Property", this.propertyField);
            }
            if (this.valueFieldSet)
            {
                writer.WriteAttributeString("Value", this.valueField);
            }
            writer.WriteEndElement();
        }
    }
    
    public class InstallExecuteSequence : ISchemaElement
    {
        
        private ElementCollection children;
        
        public InstallExecuteSequence()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Choice, 0, -1);
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Custom)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(ScheduleReboot)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(ForceReboot)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(ResolveSource)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(LaunchConditions)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(FindRelatedProducts)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(AppSearch)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(CCPSearch)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(RMCCPSearch)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(ValidateProductID)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(CostInitialize)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(FileCost)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(IsolateComponents)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(CostFinalize)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(SetODBCFolders)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(MigrateFeatureStates)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(InstallValidate)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(InstallInitialize)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(AllocateRegistrySpace)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(ProcessComponents)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(UnpublishComponents)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(UnpublishFeatures)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(StopServices)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(DeleteServices)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(UnregisterComPlus)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(SelfUnregModules)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(UnregisterTypeLibraries)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(RemoveODBC)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(UnregisterFonts)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(RemoveRegistryValues)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(UnregisterClassInfo)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(UnregisterExtensionInfo)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(UnregisterProgIdInfo)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(UnregisterMIMEInfo)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(RemoveIniValues)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(RemoveShortcuts)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(RemoveEnvironmentStrings)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(RemoveDuplicateFiles)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(RemoveFiles)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(RemoveFolders)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(CreateFolders)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(MoveFiles)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(InstallFiles)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(DuplicateFiles)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(PatchFiles)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(BindImage)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(CreateShortcuts)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(RegisterClassInfo)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(RegisterExtensionInfo)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(RegisterProgIdInfo)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(RegisterMIMEInfo)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(WriteRegistryValues)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(WriteIniValues)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(WriteEnvironmentStrings)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(RegisterFonts)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(InstallODBC)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(RegisterTypeLibraries)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(SelfRegModules)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(RegisterComPlus)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(InstallServices)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(StartServices)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(RegisterUser)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(RegisterProduct)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(PublishComponents)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(PublishFeatures)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(PublishProduct)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(InstallFinalize)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(RemoveExistingProducts)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(DisableRollback)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(InstallExecute)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(InstallExecuteAgain)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(MsiPublishAssemblies)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(MsiUnpublishAssemblies)));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("InstallExecuteSequence", "http://schemas.microsoft.com/wix/2003/01/wi");
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
    
    public class WriteRegistryValues : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("WriteRegistryValues", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class RemoveFiles : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("RemoveFiles", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class BillboardAction : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string idField;
        
        private bool idFieldSet;
        
        public BillboardAction()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Sequence);
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(Billboard), 1, -1));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("BillboardAction", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
    
    public class Module : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string idField;
        
        private bool idFieldSet;
        
        private int codepageField;
        
        private bool codepageFieldSet;
        
        private string guidField;
        
        private bool guidFieldSet;
        
        private string languageField;
        
        private bool languageFieldSet;
        
        private string versionField;
        
        private bool versionFieldSet;
        
        public Module()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Sequence);
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(Package), 1, 1));
            ElementCollection childCollection1 = new ElementCollection(ElementCollection.CollectionType.Choice, 0, -1);
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(AppId)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(Binary)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(ComponentGroupRef)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(ComponentRef)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(Configuration)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(CustomAction)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(CustomTable)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(Dependency)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(Directory)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(DirectoryRef)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(EnsureTable)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(Exclusion)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(FragmentRef)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(Group)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(Icon)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(IgnoreModularization)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(Property)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(PropertyRef)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(SFPCatalog)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(SqlDatabase)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(Substitution)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(UI)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(User)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(WebApplication)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(WebAppPool)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(WebDirProperties)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(WebLog)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(WebSite)));
            ElementCollection childCollection2 = new ElementCollection(ElementCollection.CollectionType.Sequence);
            childCollection2.AddItem(new ElementCollection.SequenceItem(typeof(InstallExecuteSequence), 0, 1));
            childCollection2.AddItem(new ElementCollection.SequenceItem(typeof(InstallUISequence), 0, 1));
            childCollection2.AddItem(new ElementCollection.SequenceItem(typeof(AdminExecuteSequence), 0, 1));
            childCollection2.AddItem(new ElementCollection.SequenceItem(typeof(AdminUISequence), 0, 1));
            childCollection2.AddItem(new ElementCollection.SequenceItem(typeof(AdvertiseExecuteSequence), 0, 1));
            childCollection1.AddCollection(childCollection2);
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(ISchemaElement)));
            childCollection0.AddCollection(childCollection1);
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public int Codepage
        {
            get
            {
                return this.codepageField;
            }
            set
            {
                this.codepageFieldSet = true;
                this.codepageField = value;
            }
        }
        
        public string Guid
        {
            get
            {
                return this.guidField;
            }
            set
            {
                this.guidFieldSet = true;
                this.guidField = value;
            }
        }
        
        public string Language
        {
            get
            {
                return this.languageField;
            }
            set
            {
                this.languageFieldSet = true;
                this.languageField = value;
            }
        }
        
        public string Version
        {
            get
            {
                return this.versionField;
            }
            set
            {
                this.versionFieldSet = true;
                this.versionField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("Module", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.codepageFieldSet)
            {
                writer.WriteAttributeString("Codepage", this.codepageField.ToString());
            }
            if (this.guidFieldSet)
            {
                writer.WriteAttributeString("Guid", this.guidField);
            }
            if (this.languageFieldSet)
            {
                writer.WriteAttributeString("Language", this.languageField);
            }
            if (this.versionFieldSet)
            {
                writer.WriteAttributeString("Version", this.versionField);
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
    
    public class UpgradeVersion : ISchemaElement
    {
        
        private string minimumField;
        
        private bool minimumFieldSet;
        
        private string maximumField;
        
        private bool maximumFieldSet;
        
        private string languageField;
        
        private bool languageFieldSet;
        
        private string removeFeaturesField;
        
        private bool removeFeaturesFieldSet;
        
        private string propertyField;
        
        private bool propertyFieldSet;
        
        private YesNoType migrateFeaturesField;
        
        private bool migrateFeaturesFieldSet;
        
        private YesNoType onlyDetectField;
        
        private bool onlyDetectFieldSet;
        
        private YesNoType ignoreRemoveFailureField;
        
        private bool ignoreRemoveFailureFieldSet;
        
        private YesNoType includeMinimumField;
        
        private bool includeMinimumFieldSet;
        
        private YesNoType includeMaximumField;
        
        private bool includeMaximumFieldSet;
        
        private YesNoType excludeLanguagesField;
        
        private bool excludeLanguagesFieldSet;
        
        private string contentField;
        
        private bool contentFieldSet;
        
        public string Minimum
        {
            get
            {
                return this.minimumField;
            }
            set
            {
                this.minimumFieldSet = true;
                this.minimumField = value;
            }
        }
        
        public string Maximum
        {
            get
            {
                return this.maximumField;
            }
            set
            {
                this.maximumFieldSet = true;
                this.maximumField = value;
            }
        }
        
        public string Language
        {
            get
            {
                return this.languageField;
            }
            set
            {
                this.languageFieldSet = true;
                this.languageField = value;
            }
        }
        
        public string RemoveFeatures
        {
            get
            {
                return this.removeFeaturesField;
            }
            set
            {
                this.removeFeaturesFieldSet = true;
                this.removeFeaturesField = value;
            }
        }
        
        public string Property
        {
            get
            {
                return this.propertyField;
            }
            set
            {
                this.propertyFieldSet = true;
                this.propertyField = value;
            }
        }
        
        public YesNoType MigrateFeatures
        {
            get
            {
                return this.migrateFeaturesField;
            }
            set
            {
                this.migrateFeaturesFieldSet = true;
                this.migrateFeaturesField = value;
            }
        }
        
        public YesNoType OnlyDetect
        {
            get
            {
                return this.onlyDetectField;
            }
            set
            {
                this.onlyDetectFieldSet = true;
                this.onlyDetectField = value;
            }
        }
        
        public YesNoType IgnoreRemoveFailure
        {
            get
            {
                return this.ignoreRemoveFailureField;
            }
            set
            {
                this.ignoreRemoveFailureFieldSet = true;
                this.ignoreRemoveFailureField = value;
            }
        }
        
        public YesNoType IncludeMinimum
        {
            get
            {
                return this.includeMinimumField;
            }
            set
            {
                this.includeMinimumFieldSet = true;
                this.includeMinimumField = value;
            }
        }
        
        public YesNoType IncludeMaximum
        {
            get
            {
                return this.includeMaximumField;
            }
            set
            {
                this.includeMaximumFieldSet = true;
                this.includeMaximumField = value;
            }
        }
        
        public YesNoType ExcludeLanguages
        {
            get
            {
                return this.excludeLanguagesField;
            }
            set
            {
                this.excludeLanguagesFieldSet = true;
                this.excludeLanguagesField = value;
            }
        }
        
        public string Content
        {
            get
            {
                return this.contentField;
            }
            set
            {
                this.contentFieldSet = true;
                this.contentField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("UpgradeVersion", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.minimumFieldSet)
            {
                writer.WriteAttributeString("Minimum", this.minimumField);
            }
            if (this.maximumFieldSet)
            {
                writer.WriteAttributeString("Maximum", this.maximumField);
            }
            if (this.languageFieldSet)
            {
                writer.WriteAttributeString("Language", this.languageField);
            }
            if (this.removeFeaturesFieldSet)
            {
                writer.WriteAttributeString("RemoveFeatures", this.removeFeaturesField);
            }
            if (this.propertyFieldSet)
            {
                writer.WriteAttributeString("Property", this.propertyField);
            }
            if (this.migrateFeaturesFieldSet)
            {
                if ((this.migrateFeaturesField == YesNoType.no))
                {
                    writer.WriteAttributeString("MigrateFeatures", "no");
                }
                if ((this.migrateFeaturesField == YesNoType.yes))
                {
                    writer.WriteAttributeString("MigrateFeatures", "yes");
                }
            }
            if (this.onlyDetectFieldSet)
            {
                if ((this.onlyDetectField == YesNoType.no))
                {
                    writer.WriteAttributeString("OnlyDetect", "no");
                }
                if ((this.onlyDetectField == YesNoType.yes))
                {
                    writer.WriteAttributeString("OnlyDetect", "yes");
                }
            }
            if (this.ignoreRemoveFailureFieldSet)
            {
                if ((this.ignoreRemoveFailureField == YesNoType.no))
                {
                    writer.WriteAttributeString("IgnoreRemoveFailure", "no");
                }
                if ((this.ignoreRemoveFailureField == YesNoType.yes))
                {
                    writer.WriteAttributeString("IgnoreRemoveFailure", "yes");
                }
            }
            if (this.includeMinimumFieldSet)
            {
                if ((this.includeMinimumField == YesNoType.no))
                {
                    writer.WriteAttributeString("IncludeMinimum", "no");
                }
                if ((this.includeMinimumField == YesNoType.yes))
                {
                    writer.WriteAttributeString("IncludeMinimum", "yes");
                }
            }
            if (this.includeMaximumFieldSet)
            {
                if ((this.includeMaximumField == YesNoType.no))
                {
                    writer.WriteAttributeString("IncludeMaximum", "no");
                }
                if ((this.includeMaximumField == YesNoType.yes))
                {
                    writer.WriteAttributeString("IncludeMaximum", "yes");
                }
            }
            if (this.excludeLanguagesFieldSet)
            {
                if ((this.excludeLanguagesField == YesNoType.no))
                {
                    writer.WriteAttributeString("ExcludeLanguages", "no");
                }
                if ((this.excludeLanguagesField == YesNoType.yes))
                {
                    writer.WriteAttributeString("ExcludeLanguages", "yes");
                }
            }
            if (this.contentFieldSet)
            {
                writer.WriteString(this.contentField);
            }
            writer.WriteEndElement();
        }
    }
    
    public class RadioButton : ISchemaElement
    {
        
        private string bitmapField;
        
        private bool bitmapFieldSet;
        
        private int heightField;
        
        private bool heightFieldSet;
        
        private string helpField;
        
        private bool helpFieldSet;
        
        private string iconField;
        
        private bool iconFieldSet;
        
        private string textField;
        
        private bool textFieldSet;
        
        private string toolTipField;
        
        private bool toolTipFieldSet;
        
        private string valueField;
        
        private bool valueFieldSet;
        
        private int widthField;
        
        private bool widthFieldSet;
        
        private int xField;
        
        private bool xFieldSet;
        
        private int yField;
        
        private bool yFieldSet;
        
        private string contentField;
        
        private bool contentFieldSet;
        
        public string Bitmap
        {
            get
            {
                return this.bitmapField;
            }
            set
            {
                this.bitmapFieldSet = true;
                this.bitmapField = value;
            }
        }
        
        public int Height
        {
            get
            {
                return this.heightField;
            }
            set
            {
                this.heightFieldSet = true;
                this.heightField = value;
            }
        }
        
        public string Help
        {
            get
            {
                return this.helpField;
            }
            set
            {
                this.helpFieldSet = true;
                this.helpField = value;
            }
        }
        
        public string Icon
        {
            get
            {
                return this.iconField;
            }
            set
            {
                this.iconFieldSet = true;
                this.iconField = value;
            }
        }
        
        public string Text
        {
            get
            {
                return this.textField;
            }
            set
            {
                this.textFieldSet = true;
                this.textField = value;
            }
        }
        
        public string ToolTip
        {
            get
            {
                return this.toolTipField;
            }
            set
            {
                this.toolTipFieldSet = true;
                this.toolTipField = value;
            }
        }
        
        public string Value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueFieldSet = true;
                this.valueField = value;
            }
        }
        
        public int Width
        {
            get
            {
                return this.widthField;
            }
            set
            {
                this.widthFieldSet = true;
                this.widthField = value;
            }
        }
        
        public int X
        {
            get
            {
                return this.xField;
            }
            set
            {
                this.xFieldSet = true;
                this.xField = value;
            }
        }
        
        public int Y
        {
            get
            {
                return this.yField;
            }
            set
            {
                this.yFieldSet = true;
                this.yField = value;
            }
        }
        
        public string Content
        {
            get
            {
                return this.contentField;
            }
            set
            {
                this.contentFieldSet = true;
                this.contentField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("RadioButton", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.bitmapFieldSet)
            {
                writer.WriteAttributeString("Bitmap", this.bitmapField);
            }
            if (this.heightFieldSet)
            {
                writer.WriteAttributeString("Height", this.heightField.ToString());
            }
            if (this.helpFieldSet)
            {
                writer.WriteAttributeString("Help", this.helpField);
            }
            if (this.iconFieldSet)
            {
                writer.WriteAttributeString("Icon", this.iconField);
            }
            if (this.textFieldSet)
            {
                writer.WriteAttributeString("Text", this.textField);
            }
            if (this.toolTipFieldSet)
            {
                writer.WriteAttributeString("ToolTip", this.toolTipField);
            }
            if (this.valueFieldSet)
            {
                writer.WriteAttributeString("Value", this.valueField);
            }
            if (this.widthFieldSet)
            {
                writer.WriteAttributeString("Width", this.widthField.ToString());
            }
            if (this.xFieldSet)
            {
                writer.WriteAttributeString("X", this.xField.ToString());
            }
            if (this.yFieldSet)
            {
                writer.WriteAttributeString("Y", this.yField.ToString());
            }
            if (this.contentFieldSet)
            {
                writer.WriteString(this.contentField);
            }
            writer.WriteEndElement();
        }
    }
    
    public class FindRelatedProducts : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("FindRelatedProducts", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class AllocateRegistrySpace : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("AllocateRegistrySpace", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class Permission : ISchemaElement
    {
        
        private string domainField;
        
        private bool domainFieldSet;
        
        private YesNoType extendedField;
        
        private bool extendedFieldSet;
        
        private string userField;
        
        private bool userFieldSet;
        
        private YesNoType readField;
        
        private bool readFieldSet;
        
        private YesNoType deleteField;
        
        private bool deleteFieldSet;
        
        private YesNoType readPermissionField;
        
        private bool readPermissionFieldSet;
        
        private YesNoType changePermissionField;
        
        private bool changePermissionFieldSet;
        
        private YesNoType takeOwnershipField;
        
        private bool takeOwnershipFieldSet;
        
        private YesNoType readAttributesField;
        
        private bool readAttributesFieldSet;
        
        private YesNoType writeAttributesField;
        
        private bool writeAttributesFieldSet;
        
        private YesNoType readExtendedAttributesField;
        
        private bool readExtendedAttributesFieldSet;
        
        private YesNoType writeExtendedAttributesField;
        
        private bool writeExtendedAttributesFieldSet;
        
        private YesNoType synchronizeField;
        
        private bool synchronizeFieldSet;
        
        private YesNoType createFileField;
        
        private bool createFileFieldSet;
        
        private YesNoType createChildField;
        
        private bool createChildFieldSet;
        
        private YesNoType deleteChildField;
        
        private bool deleteChildFieldSet;
        
        private YesNoType traverseField;
        
        private bool traverseFieldSet;
        
        private YesNoType appendField;
        
        private bool appendFieldSet;
        
        private YesNoType executeField;
        
        private bool executeFieldSet;
        
        private YesNoType writeField;
        
        private bool writeFieldSet;
        
        private YesNoType createSubkeysField;
        
        private bool createSubkeysFieldSet;
        
        private YesNoType enumerateSubkeysField;
        
        private bool enumerateSubkeysFieldSet;
        
        private YesNoType notifyField;
        
        private bool notifyFieldSet;
        
        private YesNoType createLinkField;
        
        private bool createLinkFieldSet;
        
        private YesNoType genericAllField;
        
        private bool genericAllFieldSet;
        
        private YesNoType genericExecuteField;
        
        private bool genericExecuteFieldSet;
        
        private YesNoType genericWriteField;
        
        private bool genericWriteFieldSet;
        
        private YesNoType genericReadField;
        
        private bool genericReadFieldSet;
        
        private YesNoType serviceQueryConfigField;
        
        private bool serviceQueryConfigFieldSet;
        
        private YesNoType serviceChangeConfigField;
        
        private bool serviceChangeConfigFieldSet;
        
        private YesNoType serviceQueryStatusField;
        
        private bool serviceQueryStatusFieldSet;
        
        private YesNoType serviceEnumerateDependentsField;
        
        private bool serviceEnumerateDependentsFieldSet;
        
        private YesNoType serviceStartField;
        
        private bool serviceStartFieldSet;
        
        private YesNoType serviceStopField;
        
        private bool serviceStopFieldSet;
        
        private YesNoType servicePauseContinueField;
        
        private bool servicePauseContinueFieldSet;
        
        private YesNoType serviceInterrogateField;
        
        private bool serviceInterrogateFieldSet;
        
        private YesNoType serviceUserDefinedControlField;
        
        private bool serviceUserDefinedControlFieldSet;
        
        public string Domain
        {
            get
            {
                return this.domainField;
            }
            set
            {
                this.domainFieldSet = true;
                this.domainField = value;
            }
        }
        
        public YesNoType Extended
        {
            get
            {
                return this.extendedField;
            }
            set
            {
                this.extendedFieldSet = true;
                this.extendedField = value;
            }
        }
        
        public string User
        {
            get
            {
                return this.userField;
            }
            set
            {
                this.userFieldSet = true;
                this.userField = value;
            }
        }
        
        public YesNoType Read
        {
            get
            {
                return this.readField;
            }
            set
            {
                this.readFieldSet = true;
                this.readField = value;
            }
        }
        
        public YesNoType Delete
        {
            get
            {
                return this.deleteField;
            }
            set
            {
                this.deleteFieldSet = true;
                this.deleteField = value;
            }
        }
        
        public YesNoType ReadPermission
        {
            get
            {
                return this.readPermissionField;
            }
            set
            {
                this.readPermissionFieldSet = true;
                this.readPermissionField = value;
            }
        }
        
        public YesNoType ChangePermission
        {
            get
            {
                return this.changePermissionField;
            }
            set
            {
                this.changePermissionFieldSet = true;
                this.changePermissionField = value;
            }
        }
        
        public YesNoType TakeOwnership
        {
            get
            {
                return this.takeOwnershipField;
            }
            set
            {
                this.takeOwnershipFieldSet = true;
                this.takeOwnershipField = value;
            }
        }
        
        public YesNoType ReadAttributes
        {
            get
            {
                return this.readAttributesField;
            }
            set
            {
                this.readAttributesFieldSet = true;
                this.readAttributesField = value;
            }
        }
        
        public YesNoType WriteAttributes
        {
            get
            {
                return this.writeAttributesField;
            }
            set
            {
                this.writeAttributesFieldSet = true;
                this.writeAttributesField = value;
            }
        }
        
        public YesNoType ReadExtendedAttributes
        {
            get
            {
                return this.readExtendedAttributesField;
            }
            set
            {
                this.readExtendedAttributesFieldSet = true;
                this.readExtendedAttributesField = value;
            }
        }
        
        public YesNoType WriteExtendedAttributes
        {
            get
            {
                return this.writeExtendedAttributesField;
            }
            set
            {
                this.writeExtendedAttributesFieldSet = true;
                this.writeExtendedAttributesField = value;
            }
        }
        
        public YesNoType Synchronize
        {
            get
            {
                return this.synchronizeField;
            }
            set
            {
                this.synchronizeFieldSet = true;
                this.synchronizeField = value;
            }
        }
        
        public YesNoType CreateFile
        {
            get
            {
                return this.createFileField;
            }
            set
            {
                this.createFileFieldSet = true;
                this.createFileField = value;
            }
        }
        
        public YesNoType CreateChild
        {
            get
            {
                return this.createChildField;
            }
            set
            {
                this.createChildFieldSet = true;
                this.createChildField = value;
            }
        }
        
        public YesNoType DeleteChild
        {
            get
            {
                return this.deleteChildField;
            }
            set
            {
                this.deleteChildFieldSet = true;
                this.deleteChildField = value;
            }
        }
        
        public YesNoType Traverse
        {
            get
            {
                return this.traverseField;
            }
            set
            {
                this.traverseFieldSet = true;
                this.traverseField = value;
            }
        }
        
        public YesNoType Append
        {
            get
            {
                return this.appendField;
            }
            set
            {
                this.appendFieldSet = true;
                this.appendField = value;
            }
        }
        
        public YesNoType Execute
        {
            get
            {
                return this.executeField;
            }
            set
            {
                this.executeFieldSet = true;
                this.executeField = value;
            }
        }
        
        public YesNoType Write
        {
            get
            {
                return this.writeField;
            }
            set
            {
                this.writeFieldSet = true;
                this.writeField = value;
            }
        }
        
        public YesNoType CreateSubkeys
        {
            get
            {
                return this.createSubkeysField;
            }
            set
            {
                this.createSubkeysFieldSet = true;
                this.createSubkeysField = value;
            }
        }
        
        public YesNoType EnumerateSubkeys
        {
            get
            {
                return this.enumerateSubkeysField;
            }
            set
            {
                this.enumerateSubkeysFieldSet = true;
                this.enumerateSubkeysField = value;
            }
        }
        
        public YesNoType Notify
        {
            get
            {
                return this.notifyField;
            }
            set
            {
                this.notifyFieldSet = true;
                this.notifyField = value;
            }
        }
        
        public YesNoType CreateLink
        {
            get
            {
                return this.createLinkField;
            }
            set
            {
                this.createLinkFieldSet = true;
                this.createLinkField = value;
            }
        }
        
        public YesNoType GenericAll
        {
            get
            {
                return this.genericAllField;
            }
            set
            {
                this.genericAllFieldSet = true;
                this.genericAllField = value;
            }
        }
        
        public YesNoType GenericExecute
        {
            get
            {
                return this.genericExecuteField;
            }
            set
            {
                this.genericExecuteFieldSet = true;
                this.genericExecuteField = value;
            }
        }
        
        public YesNoType GenericWrite
        {
            get
            {
                return this.genericWriteField;
            }
            set
            {
                this.genericWriteFieldSet = true;
                this.genericWriteField = value;
            }
        }
        
        public YesNoType GenericRead
        {
            get
            {
                return this.genericReadField;
            }
            set
            {
                this.genericReadFieldSet = true;
                this.genericReadField = value;
            }
        }
        
        public YesNoType ServiceQueryConfig
        {
            get
            {
                return this.serviceQueryConfigField;
            }
            set
            {
                this.serviceQueryConfigFieldSet = true;
                this.serviceQueryConfigField = value;
            }
        }
        
        public YesNoType ServiceChangeConfig
        {
            get
            {
                return this.serviceChangeConfigField;
            }
            set
            {
                this.serviceChangeConfigFieldSet = true;
                this.serviceChangeConfigField = value;
            }
        }
        
        public YesNoType ServiceQueryStatus
        {
            get
            {
                return this.serviceQueryStatusField;
            }
            set
            {
                this.serviceQueryStatusFieldSet = true;
                this.serviceQueryStatusField = value;
            }
        }
        
        public YesNoType ServiceEnumerateDependents
        {
            get
            {
                return this.serviceEnumerateDependentsField;
            }
            set
            {
                this.serviceEnumerateDependentsFieldSet = true;
                this.serviceEnumerateDependentsField = value;
            }
        }
        
        public YesNoType ServiceStart
        {
            get
            {
                return this.serviceStartField;
            }
            set
            {
                this.serviceStartFieldSet = true;
                this.serviceStartField = value;
            }
        }
        
        public YesNoType ServiceStop
        {
            get
            {
                return this.serviceStopField;
            }
            set
            {
                this.serviceStopFieldSet = true;
                this.serviceStopField = value;
            }
        }
        
        public YesNoType ServicePauseContinue
        {
            get
            {
                return this.servicePauseContinueField;
            }
            set
            {
                this.servicePauseContinueFieldSet = true;
                this.servicePauseContinueField = value;
            }
        }
        
        public YesNoType ServiceInterrogate
        {
            get
            {
                return this.serviceInterrogateField;
            }
            set
            {
                this.serviceInterrogateFieldSet = true;
                this.serviceInterrogateField = value;
            }
        }
        
        public YesNoType ServiceUserDefinedControl
        {
            get
            {
                return this.serviceUserDefinedControlField;
            }
            set
            {
                this.serviceUserDefinedControlFieldSet = true;
                this.serviceUserDefinedControlField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("Permission", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.domainFieldSet)
            {
                writer.WriteAttributeString("Domain", this.domainField);
            }
            if (this.extendedFieldSet)
            {
                if ((this.extendedField == YesNoType.no))
                {
                    writer.WriteAttributeString("Extended", "no");
                }
                if ((this.extendedField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Extended", "yes");
                }
            }
            if (this.userFieldSet)
            {
                writer.WriteAttributeString("User", this.userField);
            }
            if (this.readFieldSet)
            {
                if ((this.readField == YesNoType.no))
                {
                    writer.WriteAttributeString("Read", "no");
                }
                if ((this.readField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Read", "yes");
                }
            }
            if (this.deleteFieldSet)
            {
                if ((this.deleteField == YesNoType.no))
                {
                    writer.WriteAttributeString("Delete", "no");
                }
                if ((this.deleteField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Delete", "yes");
                }
            }
            if (this.readPermissionFieldSet)
            {
                if ((this.readPermissionField == YesNoType.no))
                {
                    writer.WriteAttributeString("ReadPermission", "no");
                }
                if ((this.readPermissionField == YesNoType.yes))
                {
                    writer.WriteAttributeString("ReadPermission", "yes");
                }
            }
            if (this.changePermissionFieldSet)
            {
                if ((this.changePermissionField == YesNoType.no))
                {
                    writer.WriteAttributeString("ChangePermission", "no");
                }
                if ((this.changePermissionField == YesNoType.yes))
                {
                    writer.WriteAttributeString("ChangePermission", "yes");
                }
            }
            if (this.takeOwnershipFieldSet)
            {
                if ((this.takeOwnershipField == YesNoType.no))
                {
                    writer.WriteAttributeString("TakeOwnership", "no");
                }
                if ((this.takeOwnershipField == YesNoType.yes))
                {
                    writer.WriteAttributeString("TakeOwnership", "yes");
                }
            }
            if (this.readAttributesFieldSet)
            {
                if ((this.readAttributesField == YesNoType.no))
                {
                    writer.WriteAttributeString("ReadAttributes", "no");
                }
                if ((this.readAttributesField == YesNoType.yes))
                {
                    writer.WriteAttributeString("ReadAttributes", "yes");
                }
            }
            if (this.writeAttributesFieldSet)
            {
                if ((this.writeAttributesField == YesNoType.no))
                {
                    writer.WriteAttributeString("WriteAttributes", "no");
                }
                if ((this.writeAttributesField == YesNoType.yes))
                {
                    writer.WriteAttributeString("WriteAttributes", "yes");
                }
            }
            if (this.readExtendedAttributesFieldSet)
            {
                if ((this.readExtendedAttributesField == YesNoType.no))
                {
                    writer.WriteAttributeString("ReadExtendedAttributes", "no");
                }
                if ((this.readExtendedAttributesField == YesNoType.yes))
                {
                    writer.WriteAttributeString("ReadExtendedAttributes", "yes");
                }
            }
            if (this.writeExtendedAttributesFieldSet)
            {
                if ((this.writeExtendedAttributesField == YesNoType.no))
                {
                    writer.WriteAttributeString("WriteExtendedAttributes", "no");
                }
                if ((this.writeExtendedAttributesField == YesNoType.yes))
                {
                    writer.WriteAttributeString("WriteExtendedAttributes", "yes");
                }
            }
            if (this.synchronizeFieldSet)
            {
                if ((this.synchronizeField == YesNoType.no))
                {
                    writer.WriteAttributeString("Synchronize", "no");
                }
                if ((this.synchronizeField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Synchronize", "yes");
                }
            }
            if (this.createFileFieldSet)
            {
                if ((this.createFileField == YesNoType.no))
                {
                    writer.WriteAttributeString("CreateFile", "no");
                }
                if ((this.createFileField == YesNoType.yes))
                {
                    writer.WriteAttributeString("CreateFile", "yes");
                }
            }
            if (this.createChildFieldSet)
            {
                if ((this.createChildField == YesNoType.no))
                {
                    writer.WriteAttributeString("CreateChild", "no");
                }
                if ((this.createChildField == YesNoType.yes))
                {
                    writer.WriteAttributeString("CreateChild", "yes");
                }
            }
            if (this.deleteChildFieldSet)
            {
                if ((this.deleteChildField == YesNoType.no))
                {
                    writer.WriteAttributeString("DeleteChild", "no");
                }
                if ((this.deleteChildField == YesNoType.yes))
                {
                    writer.WriteAttributeString("DeleteChild", "yes");
                }
            }
            if (this.traverseFieldSet)
            {
                if ((this.traverseField == YesNoType.no))
                {
                    writer.WriteAttributeString("Traverse", "no");
                }
                if ((this.traverseField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Traverse", "yes");
                }
            }
            if (this.appendFieldSet)
            {
                if ((this.appendField == YesNoType.no))
                {
                    writer.WriteAttributeString("Append", "no");
                }
                if ((this.appendField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Append", "yes");
                }
            }
            if (this.executeFieldSet)
            {
                if ((this.executeField == YesNoType.no))
                {
                    writer.WriteAttributeString("Execute", "no");
                }
                if ((this.executeField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Execute", "yes");
                }
            }
            if (this.writeFieldSet)
            {
                if ((this.writeField == YesNoType.no))
                {
                    writer.WriteAttributeString("Write", "no");
                }
                if ((this.writeField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Write", "yes");
                }
            }
            if (this.createSubkeysFieldSet)
            {
                if ((this.createSubkeysField == YesNoType.no))
                {
                    writer.WriteAttributeString("CreateSubkeys", "no");
                }
                if ((this.createSubkeysField == YesNoType.yes))
                {
                    writer.WriteAttributeString("CreateSubkeys", "yes");
                }
            }
            if (this.enumerateSubkeysFieldSet)
            {
                if ((this.enumerateSubkeysField == YesNoType.no))
                {
                    writer.WriteAttributeString("EnumerateSubkeys", "no");
                }
                if ((this.enumerateSubkeysField == YesNoType.yes))
                {
                    writer.WriteAttributeString("EnumerateSubkeys", "yes");
                }
            }
            if (this.notifyFieldSet)
            {
                if ((this.notifyField == YesNoType.no))
                {
                    writer.WriteAttributeString("Notify", "no");
                }
                if ((this.notifyField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Notify", "yes");
                }
            }
            if (this.createLinkFieldSet)
            {
                if ((this.createLinkField == YesNoType.no))
                {
                    writer.WriteAttributeString("CreateLink", "no");
                }
                if ((this.createLinkField == YesNoType.yes))
                {
                    writer.WriteAttributeString("CreateLink", "yes");
                }
            }
            if (this.genericAllFieldSet)
            {
                if ((this.genericAllField == YesNoType.no))
                {
                    writer.WriteAttributeString("GenericAll", "no");
                }
                if ((this.genericAllField == YesNoType.yes))
                {
                    writer.WriteAttributeString("GenericAll", "yes");
                }
            }
            if (this.genericExecuteFieldSet)
            {
                if ((this.genericExecuteField == YesNoType.no))
                {
                    writer.WriteAttributeString("GenericExecute", "no");
                }
                if ((this.genericExecuteField == YesNoType.yes))
                {
                    writer.WriteAttributeString("GenericExecute", "yes");
                }
            }
            if (this.genericWriteFieldSet)
            {
                if ((this.genericWriteField == YesNoType.no))
                {
                    writer.WriteAttributeString("GenericWrite", "no");
                }
                if ((this.genericWriteField == YesNoType.yes))
                {
                    writer.WriteAttributeString("GenericWrite", "yes");
                }
            }
            if (this.genericReadFieldSet)
            {
                if ((this.genericReadField == YesNoType.no))
                {
                    writer.WriteAttributeString("GenericRead", "no");
                }
                if ((this.genericReadField == YesNoType.yes))
                {
                    writer.WriteAttributeString("GenericRead", "yes");
                }
            }
            if (this.serviceQueryConfigFieldSet)
            {
                if ((this.serviceQueryConfigField == YesNoType.no))
                {
                    writer.WriteAttributeString("ServiceQueryConfig", "no");
                }
                if ((this.serviceQueryConfigField == YesNoType.yes))
                {
                    writer.WriteAttributeString("ServiceQueryConfig", "yes");
                }
            }
            if (this.serviceChangeConfigFieldSet)
            {
                if ((this.serviceChangeConfigField == YesNoType.no))
                {
                    writer.WriteAttributeString("ServiceChangeConfig", "no");
                }
                if ((this.serviceChangeConfigField == YesNoType.yes))
                {
                    writer.WriteAttributeString("ServiceChangeConfig", "yes");
                }
            }
            if (this.serviceQueryStatusFieldSet)
            {
                if ((this.serviceQueryStatusField == YesNoType.no))
                {
                    writer.WriteAttributeString("ServiceQueryStatus", "no");
                }
                if ((this.serviceQueryStatusField == YesNoType.yes))
                {
                    writer.WriteAttributeString("ServiceQueryStatus", "yes");
                }
            }
            if (this.serviceEnumerateDependentsFieldSet)
            {
                if ((this.serviceEnumerateDependentsField == YesNoType.no))
                {
                    writer.WriteAttributeString("ServiceEnumerateDependents", "no");
                }
                if ((this.serviceEnumerateDependentsField == YesNoType.yes))
                {
                    writer.WriteAttributeString("ServiceEnumerateDependents", "yes");
                }
            }
            if (this.serviceStartFieldSet)
            {
                if ((this.serviceStartField == YesNoType.no))
                {
                    writer.WriteAttributeString("ServiceStart", "no");
                }
                if ((this.serviceStartField == YesNoType.yes))
                {
                    writer.WriteAttributeString("ServiceStart", "yes");
                }
            }
            if (this.serviceStopFieldSet)
            {
                if ((this.serviceStopField == YesNoType.no))
                {
                    writer.WriteAttributeString("ServiceStop", "no");
                }
                if ((this.serviceStopField == YesNoType.yes))
                {
                    writer.WriteAttributeString("ServiceStop", "yes");
                }
            }
            if (this.servicePauseContinueFieldSet)
            {
                if ((this.servicePauseContinueField == YesNoType.no))
                {
                    writer.WriteAttributeString("ServicePauseContinue", "no");
                }
                if ((this.servicePauseContinueField == YesNoType.yes))
                {
                    writer.WriteAttributeString("ServicePauseContinue", "yes");
                }
            }
            if (this.serviceInterrogateFieldSet)
            {
                if ((this.serviceInterrogateField == YesNoType.no))
                {
                    writer.WriteAttributeString("ServiceInterrogate", "no");
                }
                if ((this.serviceInterrogateField == YesNoType.yes))
                {
                    writer.WriteAttributeString("ServiceInterrogate", "yes");
                }
            }
            if (this.serviceUserDefinedControlFieldSet)
            {
                if ((this.serviceUserDefinedControlField == YesNoType.no))
                {
                    writer.WriteAttributeString("ServiceUserDefinedControl", "no");
                }
                if ((this.serviceUserDefinedControlField == YesNoType.yes))
                {
                    writer.WriteAttributeString("ServiceUserDefinedControl", "yes");
                }
            }
            writer.WriteEndElement();
        }
    }
    
    public class UnregisterComPlus : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("UnregisterComPlus", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class ServiceInstall : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string idField;
        
        private bool idFieldSet;
        
        private string nameField;
        
        private bool nameFieldSet;
        
        private string displayNameField;
        
        private bool displayNameFieldSet;
        
        private TypeType typeField;
        
        private bool typeFieldSet;
        
        private YesNoType interactiveField;
        
        private bool interactiveFieldSet;
        
        private StartType startField;
        
        private bool startFieldSet;
        
        private ErrorControlType errorControlField;
        
        private bool errorControlFieldSet;
        
        private YesNoType vitalField;
        
        private bool vitalFieldSet;
        
        private string localGroupField;
        
        private bool localGroupFieldSet;
        
        private string loadOrderGroupField;
        
        private bool loadOrderGroupFieldSet;
        
        private string accountField;
        
        private bool accountFieldSet;
        
        private string passwordField;
        
        private bool passwordFieldSet;
        
        private string argumentsField;
        
        private bool argumentsFieldSet;
        
        private string descriptionField;
        
        private bool descriptionFieldSet;
        
        private YesNoType eraseDescriptionField;
        
        private bool eraseDescriptionFieldSet;
        
        public ServiceInstall()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Sequence);
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(Permission), 0, -1));
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(ServiceConfig), 0, 1));
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(ServiceDependency), 0, -1));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameFieldSet = true;
                this.nameField = value;
            }
        }
        
        public string DisplayName
        {
            get
            {
                return this.displayNameField;
            }
            set
            {
                this.displayNameFieldSet = true;
                this.displayNameField = value;
            }
        }
        
        public TypeType Type
        {
            get
            {
                return this.typeField;
            }
            set
            {
                this.typeFieldSet = true;
                this.typeField = value;
            }
        }
        
        public YesNoType Interactive
        {
            get
            {
                return this.interactiveField;
            }
            set
            {
                this.interactiveFieldSet = true;
                this.interactiveField = value;
            }
        }
        
        public StartType Start
        {
            get
            {
                return this.startField;
            }
            set
            {
                this.startFieldSet = true;
                this.startField = value;
            }
        }
        
        public ErrorControlType ErrorControl
        {
            get
            {
                return this.errorControlField;
            }
            set
            {
                this.errorControlFieldSet = true;
                this.errorControlField = value;
            }
        }
        
        public YesNoType Vital
        {
            get
            {
                return this.vitalField;
            }
            set
            {
                this.vitalFieldSet = true;
                this.vitalField = value;
            }
        }
        
        public string LocalGroup
        {
            get
            {
                return this.localGroupField;
            }
            set
            {
                this.localGroupFieldSet = true;
                this.localGroupField = value;
            }
        }
        
        public string LoadOrderGroup
        {
            get
            {
                return this.loadOrderGroupField;
            }
            set
            {
                this.loadOrderGroupFieldSet = true;
                this.loadOrderGroupField = value;
            }
        }
        
        public string Account
        {
            get
            {
                return this.accountField;
            }
            set
            {
                this.accountFieldSet = true;
                this.accountField = value;
            }
        }
        
        public string Password
        {
            get
            {
                return this.passwordField;
            }
            set
            {
                this.passwordFieldSet = true;
                this.passwordField = value;
            }
        }
        
        public string Arguments
        {
            get
            {
                return this.argumentsField;
            }
            set
            {
                this.argumentsFieldSet = true;
                this.argumentsField = value;
            }
        }
        
        public string Description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionFieldSet = true;
                this.descriptionField = value;
            }
        }
        
        public YesNoType EraseDescription
        {
            get
            {
                return this.eraseDescriptionField;
            }
            set
            {
                this.eraseDescriptionFieldSet = true;
                this.eraseDescriptionField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("ServiceInstall", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.nameFieldSet)
            {
                writer.WriteAttributeString("Name", this.nameField);
            }
            if (this.displayNameFieldSet)
            {
                writer.WriteAttributeString("DisplayName", this.displayNameField);
            }
            if (this.typeFieldSet)
            {
                if ((this.typeField == TypeType.ownProcess))
                {
                    writer.WriteAttributeString("Type", "ownProcess");
                }
                if ((this.typeField == TypeType.shareProcess))
                {
                    writer.WriteAttributeString("Type", "shareProcess");
                }
                if ((this.typeField == TypeType.kernelDriver))
                {
                    writer.WriteAttributeString("Type", "kernelDriver");
                }
                if ((this.typeField == TypeType.systemDriver))
                {
                    writer.WriteAttributeString("Type", "systemDriver");
                }
            }
            if (this.interactiveFieldSet)
            {
                if ((this.interactiveField == YesNoType.no))
                {
                    writer.WriteAttributeString("Interactive", "no");
                }
                if ((this.interactiveField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Interactive", "yes");
                }
            }
            if (this.startFieldSet)
            {
                if ((this.startField == StartType.auto))
                {
                    writer.WriteAttributeString("Start", "auto");
                }
                if ((this.startField == StartType.demand))
                {
                    writer.WriteAttributeString("Start", "demand");
                }
                if ((this.startField == StartType.disabled))
                {
                    writer.WriteAttributeString("Start", "disabled");
                }
                if ((this.startField == StartType.boot))
                {
                    writer.WriteAttributeString("Start", "boot");
                }
                if ((this.startField == StartType.system))
                {
                    writer.WriteAttributeString("Start", "system");
                }
            }
            if (this.errorControlFieldSet)
            {
                if ((this.errorControlField == ErrorControlType.ignore))
                {
                    writer.WriteAttributeString("ErrorControl", "ignore");
                }
                if ((this.errorControlField == ErrorControlType.normal))
                {
                    writer.WriteAttributeString("ErrorControl", "normal");
                }
                if ((this.errorControlField == ErrorControlType.critical))
                {
                    writer.WriteAttributeString("ErrorControl", "critical");
                }
            }
            if (this.vitalFieldSet)
            {
                if ((this.vitalField == YesNoType.no))
                {
                    writer.WriteAttributeString("Vital", "no");
                }
                if ((this.vitalField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Vital", "yes");
                }
            }
            if (this.localGroupFieldSet)
            {
                writer.WriteAttributeString("LocalGroup", this.localGroupField);
            }
            if (this.loadOrderGroupFieldSet)
            {
                writer.WriteAttributeString("LoadOrderGroup", this.loadOrderGroupField);
            }
            if (this.accountFieldSet)
            {
                writer.WriteAttributeString("Account", this.accountField);
            }
            if (this.passwordFieldSet)
            {
                writer.WriteAttributeString("Password", this.passwordField);
            }
            if (this.argumentsFieldSet)
            {
                writer.WriteAttributeString("Arguments", this.argumentsField);
            }
            if (this.descriptionFieldSet)
            {
                writer.WriteAttributeString("Description", this.descriptionField);
            }
            if (this.eraseDescriptionFieldSet)
            {
                if ((this.eraseDescriptionField == YesNoType.no))
                {
                    writer.WriteAttributeString("EraseDescription", "no");
                }
                if ((this.eraseDescriptionField == YesNoType.yes))
                {
                    writer.WriteAttributeString("EraseDescription", "yes");
                }
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
        
        public enum TypeType
        {
            
            ownProcess,
            
            shareProcess,
            
            kernelDriver,
            
            systemDriver,
        }
        
        public enum StartType
        {
            
            auto,
            
            demand,
            
            disabled,
            
            boot,
            
            system,
        }
        
        public enum ErrorControlType
        {
            
            ignore,
            
            normal,
            
            critical,
        }
    }
    
    public class Custom : ISchemaElement
    {
        
        private string actionField;
        
        private bool actionFieldSet;
        
        private OnExitType onExitField;
        
        private bool onExitFieldSet;
        
        private string beforeField;
        
        private bool beforeFieldSet;
        
        private string afterField;
        
        private bool afterFieldSet;
        
        private int sequenceField;
        
        private bool sequenceFieldSet;
        
        private string contentField;
        
        private bool contentFieldSet;
        
        public string Action
        {
            get
            {
                return this.actionField;
            }
            set
            {
                this.actionFieldSet = true;
                this.actionField = value;
            }
        }
        
        public OnExitType OnExit
        {
            get
            {
                return this.onExitField;
            }
            set
            {
                this.onExitFieldSet = true;
                this.onExitField = value;
            }
        }
        
        public string Before
        {
            get
            {
                return this.beforeField;
            }
            set
            {
                this.beforeFieldSet = true;
                this.beforeField = value;
            }
        }
        
        public string After
        {
            get
            {
                return this.afterField;
            }
            set
            {
                this.afterFieldSet = true;
                this.afterField = value;
            }
        }
        
        public int Sequence
        {
            get
            {
                return this.sequenceField;
            }
            set
            {
                this.sequenceFieldSet = true;
                this.sequenceField = value;
            }
        }
        
        public string Content
        {
            get
            {
                return this.contentField;
            }
            set
            {
                this.contentFieldSet = true;
                this.contentField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("Custom", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.actionFieldSet)
            {
                writer.WriteAttributeString("Action", this.actionField);
            }
            if (this.onExitFieldSet)
            {
                if ((this.onExitField == OnExitType.success))
                {
                    writer.WriteAttributeString("OnExit", "success");
                }
                if ((this.onExitField == OnExitType.cancel))
                {
                    writer.WriteAttributeString("OnExit", "cancel");
                }
                if ((this.onExitField == OnExitType.error))
                {
                    writer.WriteAttributeString("OnExit", "error");
                }
                if ((this.onExitField == OnExitType.suspend))
                {
                    writer.WriteAttributeString("OnExit", "suspend");
                }
            }
            if (this.beforeFieldSet)
            {
                writer.WriteAttributeString("Before", this.beforeField);
            }
            if (this.afterFieldSet)
            {
                writer.WriteAttributeString("After", this.afterField);
            }
            if (this.sequenceFieldSet)
            {
                writer.WriteAttributeString("Sequence", this.sequenceField.ToString());
            }
            if (this.contentFieldSet)
            {
                writer.WriteString(this.contentField);
            }
            writer.WriteEndElement();
        }
        
        public enum OnExitType
        {
            
            success,
            
            cancel,
            
            error,
            
            suspend,
        }
    }
    
    public class IgnoreRange : ISchemaElement
    {
        
        private int offsetField;
        
        private bool offsetFieldSet;
        
        private int lengthField;
        
        private bool lengthFieldSet;
        
        public int Offset
        {
            get
            {
                return this.offsetField;
            }
            set
            {
                this.offsetFieldSet = true;
                this.offsetField = value;
            }
        }
        
        public int Length
        {
            get
            {
                return this.lengthField;
            }
            set
            {
                this.lengthFieldSet = true;
                this.lengthField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("IgnoreRange", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.offsetFieldSet)
            {
                writer.WriteAttributeString("Offset", this.offsetField.ToString());
            }
            if (this.lengthFieldSet)
            {
                writer.WriteAttributeString("Length", this.lengthField.ToString());
            }
            writer.WriteEndElement();
        }
    }
    
    public class StartServices : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("StartServices", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class MsiPublishAssemblies : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("MsiPublishAssemblies", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class CCPSearch : ActionModuleSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("CCPSearch", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class InstallFiles : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("InstallFiles", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class ConfigurationData : ISchemaElement
    {
        
        private string nameField;
        
        private bool nameFieldSet;
        
        private string valueField;
        
        private bool valueFieldSet;
        
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameFieldSet = true;
                this.nameField = value;
            }
        }
        
        public string Value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueFieldSet = true;
                this.valueField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("ConfigurationData", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.nameFieldSet)
            {
                writer.WriteAttributeString("Name", this.nameField);
            }
            if (this.valueFieldSet)
            {
                writer.WriteAttributeString("Value", this.valueField);
            }
            writer.WriteEndElement();
        }
    }
    
    public class WebApplicationExtension : ISchemaElement
    {
        
        private string idField;
        
        private bool idFieldSet;
        
        private string executableField;
        
        private bool executableFieldSet;
        
        private string extensionField;
        
        private bool extensionFieldSet;
        
        private string verbsField;
        
        private bool verbsFieldSet;
        
        private YesNoType scriptField;
        
        private bool scriptFieldSet;
        
        private YesNoType checkPathField;
        
        private bool checkPathFieldSet;
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string Executable
        {
            get
            {
                return this.executableField;
            }
            set
            {
                this.executableFieldSet = true;
                this.executableField = value;
            }
        }
        
        public string Extension
        {
            get
            {
                return this.extensionField;
            }
            set
            {
                this.extensionFieldSet = true;
                this.extensionField = value;
            }
        }
        
        public string Verbs
        {
            get
            {
                return this.verbsField;
            }
            set
            {
                this.verbsFieldSet = true;
                this.verbsField = value;
            }
        }
        
        public YesNoType Script
        {
            get
            {
                return this.scriptField;
            }
            set
            {
                this.scriptFieldSet = true;
                this.scriptField = value;
            }
        }
        
        public YesNoType CheckPath
        {
            get
            {
                return this.checkPathField;
            }
            set
            {
                this.checkPathFieldSet = true;
                this.checkPathField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("WebApplicationExtension", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.executableFieldSet)
            {
                writer.WriteAttributeString("Executable", this.executableField);
            }
            if (this.extensionFieldSet)
            {
                writer.WriteAttributeString("Extension", this.extensionField);
            }
            if (this.verbsFieldSet)
            {
                writer.WriteAttributeString("Verbs", this.verbsField);
            }
            if (this.scriptFieldSet)
            {
                if ((this.scriptField == YesNoType.no))
                {
                    writer.WriteAttributeString("Script", "no");
                }
                if ((this.scriptField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Script", "yes");
                }
            }
            if (this.checkPathFieldSet)
            {
                if ((this.checkPathField == YesNoType.no))
                {
                    writer.WriteAttributeString("CheckPath", "no");
                }
                if ((this.checkPathField == YesNoType.yes))
                {
                    writer.WriteAttributeString("CheckPath", "yes");
                }
            }
            writer.WriteEndElement();
        }
    }
    
    public class WebError : ISchemaElement
    {
        
        private int errorCodeField;
        
        private bool errorCodeFieldSet;
        
        private int subCodeField;
        
        private bool subCodeFieldSet;
        
        private TypeType typeField;
        
        private bool typeFieldSet;
        
        private string pathField;
        
        private bool pathFieldSet;
        
        public int ErrorCode
        {
            get
            {
                return this.errorCodeField;
            }
            set
            {
                this.errorCodeFieldSet = true;
                this.errorCodeField = value;
            }
        }
        
        public int SubCode
        {
            get
            {
                return this.subCodeField;
            }
            set
            {
                this.subCodeFieldSet = true;
                this.subCodeField = value;
            }
        }
        
        public TypeType Type
        {
            get
            {
                return this.typeField;
            }
            set
            {
                this.typeFieldSet = true;
                this.typeField = value;
            }
        }
        
        public string Path
        {
            get
            {
                return this.pathField;
            }
            set
            {
                this.pathFieldSet = true;
                this.pathField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("WebError", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.errorCodeFieldSet)
            {
                writer.WriteAttributeString("ErrorCode", this.errorCodeField.ToString());
            }
            if (this.subCodeFieldSet)
            {
                writer.WriteAttributeString("SubCode", this.subCodeField.ToString());
            }
            if (this.typeFieldSet)
            {
                if ((this.typeField == TypeType.@default))
                {
                    writer.WriteAttributeString("Type", "default");
                }
                if ((this.typeField == TypeType.file))
                {
                    writer.WriteAttributeString("Type", "file");
                }
                if ((this.typeField == TypeType.url))
                {
                    writer.WriteAttributeString("Type", "url");
                }
            }
            if (this.pathFieldSet)
            {
                writer.WriteAttributeString("Path", this.pathField);
            }
            writer.WriteEndElement();
        }
        
        public enum TypeType
        {
            
            @default,
            
            file,
            
            url,
        }
    }
    
    public class SymbolPath : ISchemaElement
    {
        
        private string pathField;
        
        private bool pathFieldSet;
        
        public string Path
        {
            get
            {
                return this.pathField;
            }
            set
            {
                this.pathFieldSet = true;
                this.pathField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("SymbolPath", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.pathFieldSet)
            {
                writer.WriteAttributeString("Path", this.pathField);
            }
            writer.WriteEndElement();
        }
    }
    
    public class ComboBox : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string propertyField;
        
        private bool propertyFieldSet;
        
        public ComboBox()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Sequence);
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(ListItem), 0, -1));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string Property
        {
            get
            {
                return this.propertyField;
            }
            set
            {
                this.propertyFieldSet = true;
                this.propertyField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("ComboBox", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.propertyFieldSet)
            {
                writer.WriteAttributeString("Property", this.propertyField);
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
    
    public class ProtectRange : ISchemaElement
    {
        
        private int offsetField;
        
        private bool offsetFieldSet;
        
        private int lengthField;
        
        private bool lengthFieldSet;
        
        public int Offset
        {
            get
            {
                return this.offsetField;
            }
            set
            {
                this.offsetFieldSet = true;
                this.offsetField = value;
            }
        }
        
        public int Length
        {
            get
            {
                return this.lengthField;
            }
            set
            {
                this.lengthFieldSet = true;
                this.lengthField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("ProtectRange", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.offsetFieldSet)
            {
                writer.WriteAttributeString("Offset", this.offsetField.ToString());
            }
            if (this.lengthFieldSet)
            {
                writer.WriteAttributeString("Length", this.lengthField.ToString());
            }
            writer.WriteEndElement();
        }
    }
    
    public class RemoveRegistryValues : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("RemoveRegistryValues", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class CreateFolder : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string directoryField;
        
        private bool directoryFieldSet;
        
        public CreateFolder()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Choice, 0, -1);
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Shortcut)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Permission)));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string Directory
        {
            get
            {
                return this.directoryField;
            }
            set
            {
                this.directoryFieldSet = true;
                this.directoryField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("CreateFolder", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.directoryFieldSet)
            {
                writer.WriteAttributeString("Directory", this.directoryField);
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
    
    public class AppData : ISchemaElement
    {
        
        private string contentField;
        
        private bool contentFieldSet;
        
        public string Content
        {
            get
            {
                return this.contentField;
            }
            set
            {
                this.contentFieldSet = true;
                this.contentField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("AppData", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.contentFieldSet)
            {
                writer.WriteString(this.contentField);
            }
            writer.WriteEndElement();
        }
    }
    
    public class DirectorySearch : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string idField;
        
        private bool idFieldSet;
        
        private string pathField;
        
        private bool pathFieldSet;
        
        private int depthField;
        
        private bool depthFieldSet;
        
        public DirectorySearch()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Choice, 0, 1);
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(DirectorySearch)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(DirectorySearchRef)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(FileSearch)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(FileSearchRef)));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string Path
        {
            get
            {
                return this.pathField;
            }
            set
            {
                this.pathFieldSet = true;
                this.pathField = value;
            }
        }
        
        public int Depth
        {
            get
            {
                return this.depthField;
            }
            set
            {
                this.depthFieldSet = true;
                this.depthField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("DirectorySearch", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.pathFieldSet)
            {
                writer.WriteAttributeString("Path", this.pathField);
            }
            if (this.depthFieldSet)
            {
                writer.WriteAttributeString("Depth", this.depthField.ToString());
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
    
    public class UnregisterFonts : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("UnregisterFonts", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class ServiceControl : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string idField;
        
        private bool idFieldSet;
        
        private string nameField;
        
        private bool nameFieldSet;
        
        private StartType startField;
        
        private bool startFieldSet;
        
        private StopType stopField;
        
        private bool stopFieldSet;
        
        private RemoveType removeField;
        
        private bool removeFieldSet;
        
        private YesNoType waitField;
        
        private bool waitFieldSet;
        
        public ServiceControl()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Sequence);
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(ServiceArgument), 0, -1));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameFieldSet = true;
                this.nameField = value;
            }
        }
        
        public StartType Start
        {
            get
            {
                return this.startField;
            }
            set
            {
                this.startFieldSet = true;
                this.startField = value;
            }
        }
        
        public StopType Stop
        {
            get
            {
                return this.stopField;
            }
            set
            {
                this.stopFieldSet = true;
                this.stopField = value;
            }
        }
        
        public RemoveType Remove
        {
            get
            {
                return this.removeField;
            }
            set
            {
                this.removeFieldSet = true;
                this.removeField = value;
            }
        }
        
        public YesNoType Wait
        {
            get
            {
                return this.waitField;
            }
            set
            {
                this.waitFieldSet = true;
                this.waitField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("ServiceControl", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.nameFieldSet)
            {
                writer.WriteAttributeString("Name", this.nameField);
            }
            if (this.startFieldSet)
            {
                if ((this.startField == StartType.install))
                {
                    writer.WriteAttributeString("Start", "install");
                }
                if ((this.startField == StartType.uninstall))
                {
                    writer.WriteAttributeString("Start", "uninstall");
                }
                if ((this.startField == StartType.both))
                {
                    writer.WriteAttributeString("Start", "both");
                }
            }
            if (this.stopFieldSet)
            {
                if ((this.stopField == StopType.install))
                {
                    writer.WriteAttributeString("Stop", "install");
                }
                if ((this.stopField == StopType.uninstall))
                {
                    writer.WriteAttributeString("Stop", "uninstall");
                }
                if ((this.stopField == StopType.both))
                {
                    writer.WriteAttributeString("Stop", "both");
                }
            }
            if (this.removeFieldSet)
            {
                if ((this.removeField == RemoveType.install))
                {
                    writer.WriteAttributeString("Remove", "install");
                }
                if ((this.removeField == RemoveType.uninstall))
                {
                    writer.WriteAttributeString("Remove", "uninstall");
                }
                if ((this.removeField == RemoveType.both))
                {
                    writer.WriteAttributeString("Remove", "both");
                }
            }
            if (this.waitFieldSet)
            {
                if ((this.waitField == YesNoType.no))
                {
                    writer.WriteAttributeString("Wait", "no");
                }
                if ((this.waitField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Wait", "yes");
                }
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
        
        public enum StartType
        {
            
            install,
            
            uninstall,
            
            both,
        }
        
        public enum StopType
        {
            
            install,
            
            uninstall,
            
            both,
        }
        
        public enum RemoveType
        {
            
            install,
            
            uninstall,
            
            both,
        }
    }
    
    public class ComplianceCheck : ISchemaElement
    {
        
        private ElementCollection children;
        
        public ComplianceCheck()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Sequence);
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(ComplianceDrive), 0, 1));
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(ComponentSearch), 0, -1));
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(RegistrySearch), 0, -1));
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(IniFileSearch), 0, -1));
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(DirectorySearch), 0, -1));
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(FileSearch), 0, -1));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("ComplianceCheck", "http://schemas.microsoft.com/wix/2003/01/wi");
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
    
    public class Interface : ISchemaElement
    {
        
        private string idField;
        
        private bool idFieldSet;
        
        private string nameField;
        
        private bool nameFieldSet;
        
        private string proxyStubClassIdField;
        
        private bool proxyStubClassIdFieldSet;
        
        private string proxyStubClassId32Field;
        
        private bool proxyStubClassId32FieldSet;
        
        private int numMethodsField;
        
        private bool numMethodsFieldSet;
        
        private YesNoType versionedField;
        
        private bool versionedFieldSet;
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameFieldSet = true;
                this.nameField = value;
            }
        }
        
        public string ProxyStubClassId
        {
            get
            {
                return this.proxyStubClassIdField;
            }
            set
            {
                this.proxyStubClassIdFieldSet = true;
                this.proxyStubClassIdField = value;
            }
        }
        
        public string ProxyStubClassId32
        {
            get
            {
                return this.proxyStubClassId32Field;
            }
            set
            {
                this.proxyStubClassId32FieldSet = true;
                this.proxyStubClassId32Field = value;
            }
        }
        
        public int NumMethods
        {
            get
            {
                return this.numMethodsField;
            }
            set
            {
                this.numMethodsFieldSet = true;
                this.numMethodsField = value;
            }
        }
        
        public YesNoType Versioned
        {
            get
            {
                return this.versionedField;
            }
            set
            {
                this.versionedFieldSet = true;
                this.versionedField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("Interface", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.nameFieldSet)
            {
                writer.WriteAttributeString("Name", this.nameField);
            }
            if (this.proxyStubClassIdFieldSet)
            {
                writer.WriteAttributeString("ProxyStubClassId", this.proxyStubClassIdField);
            }
            if (this.proxyStubClassId32FieldSet)
            {
                writer.WriteAttributeString("ProxyStubClassId32", this.proxyStubClassId32Field);
            }
            if (this.numMethodsFieldSet)
            {
                writer.WriteAttributeString("NumMethods", this.numMethodsField.ToString());
            }
            if (this.versionedFieldSet)
            {
                if ((this.versionedField == YesNoType.no))
                {
                    writer.WriteAttributeString("Versioned", "no");
                }
                if ((this.versionedField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Versioned", "yes");
                }
            }
            writer.WriteEndElement();
        }
    }
    
    public class Extension : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string idField;
        
        private bool idFieldSet;
        
        private string contentTypeField;
        
        private bool contentTypeFieldSet;
        
        private YesNoType advertiseField;
        
        private bool advertiseFieldSet;
        
        public Extension()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Choice, 0, -1);
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(MIME)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Verb)));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string ContentType
        {
            get
            {
                return this.contentTypeField;
            }
            set
            {
                this.contentTypeFieldSet = true;
                this.contentTypeField = value;
            }
        }
        
        public YesNoType Advertise
        {
            get
            {
                return this.advertiseField;
            }
            set
            {
                this.advertiseFieldSet = true;
                this.advertiseField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("Extension", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.contentTypeFieldSet)
            {
                writer.WriteAttributeString("ContentType", this.contentTypeField);
            }
            if (this.advertiseFieldSet)
            {
                if ((this.advertiseField == YesNoType.no))
                {
                    writer.WriteAttributeString("Advertise", "no");
                }
                if ((this.advertiseField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Advertise", "yes");
                }
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
    
    public class UpgradeImage : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string idField;
        
        private bool idFieldSet;
        
        private string srcField;
        
        private bool srcFieldSet;
        
        private string srcPatchField;
        
        private bool srcPatchFieldSet;
        
        public UpgradeImage()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Sequence);
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(TargetImage), 1, -1));
            ElementCollection childCollection1 = new ElementCollection(ElementCollection.CollectionType.Choice, 0, -1);
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(SymbolPath)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(UpgradeFile)));
            childCollection0.AddCollection(childCollection1);
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string src
        {
            get
            {
                return this.srcField;
            }
            set
            {
                this.srcFieldSet = true;
                this.srcField = value;
            }
        }
        
        public string srcPatch
        {
            get
            {
                return this.srcPatchField;
            }
            set
            {
                this.srcPatchFieldSet = true;
                this.srcPatchField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("UpgradeImage", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.srcFieldSet)
            {
                writer.WriteAttributeString("src", this.srcField);
            }
            if (this.srcPatchFieldSet)
            {
                writer.WriteAttributeString("srcPatch", this.srcPatchField);
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
    
    public class RemoveShortcuts : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("RemoveShortcuts", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class SelfUnregModules : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("SelfUnregModules", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class WebSite : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string idField;
        
        private bool idFieldSet;
        
        private YesNoType autoStartField;
        
        private bool autoStartFieldSet;
        
        private YesNoType configureIfExistsField;
        
        private bool configureIfExistsFieldSet;
        
        private int connectionTimeoutField;
        
        private bool connectionTimeoutFieldSet;
        
        private string descriptionField;
        
        private bool descriptionFieldSet;
        
        private string directoryField;
        
        private bool directoryFieldSet;
        
        private string dirPropertiesField;
        
        private bool dirPropertiesFieldSet;
        
        private int sequenceField;
        
        private bool sequenceFieldSet;
        
        private YesNoType startOnInstallField;
        
        private bool startOnInstallFieldSet;
        
        private string webApplicationField;
        
        private bool webApplicationFieldSet;
        
        private string webLogField;
        
        private bool webLogFieldSet;
        
        public WebSite()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Sequence);
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(WebAddress), 1, -1));
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(WebApplication), 0, 1));
            ElementCollection childCollection1 = new ElementCollection(ElementCollection.CollectionType.Choice, 0, -1);
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(WebDir)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(WebError)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(WebFilter)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(WebVirtualDir)));
            childCollection0.AddCollection(childCollection1);
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public YesNoType AutoStart
        {
            get
            {
                return this.autoStartField;
            }
            set
            {
                this.autoStartFieldSet = true;
                this.autoStartField = value;
            }
        }
        
        public YesNoType ConfigureIfExists
        {
            get
            {
                return this.configureIfExistsField;
            }
            set
            {
                this.configureIfExistsFieldSet = true;
                this.configureIfExistsField = value;
            }
        }
        
        public int ConnectionTimeout
        {
            get
            {
                return this.connectionTimeoutField;
            }
            set
            {
                this.connectionTimeoutFieldSet = true;
                this.connectionTimeoutField = value;
            }
        }
        
        public string Description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionFieldSet = true;
                this.descriptionField = value;
            }
        }
        
        public string Directory
        {
            get
            {
                return this.directoryField;
            }
            set
            {
                this.directoryFieldSet = true;
                this.directoryField = value;
            }
        }
        
        public string DirProperties
        {
            get
            {
                return this.dirPropertiesField;
            }
            set
            {
                this.dirPropertiesFieldSet = true;
                this.dirPropertiesField = value;
            }
        }
        
        public int Sequence
        {
            get
            {
                return this.sequenceField;
            }
            set
            {
                this.sequenceFieldSet = true;
                this.sequenceField = value;
            }
        }
        
        public YesNoType StartOnInstall
        {
            get
            {
                return this.startOnInstallField;
            }
            set
            {
                this.startOnInstallFieldSet = true;
                this.startOnInstallField = value;
            }
        }
        
        public string WebApplication
        {
            get
            {
                return this.webApplicationField;
            }
            set
            {
                this.webApplicationFieldSet = true;
                this.webApplicationField = value;
            }
        }
        
        public string WebLog
        {
            get
            {
                return this.webLogField;
            }
            set
            {
                this.webLogFieldSet = true;
                this.webLogField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("WebSite", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.autoStartFieldSet)
            {
                if ((this.autoStartField == YesNoType.no))
                {
                    writer.WriteAttributeString("AutoStart", "no");
                }
                if ((this.autoStartField == YesNoType.yes))
                {
                    writer.WriteAttributeString("AutoStart", "yes");
                }
            }
            if (this.configureIfExistsFieldSet)
            {
                if ((this.configureIfExistsField == YesNoType.no))
                {
                    writer.WriteAttributeString("ConfigureIfExists", "no");
                }
                if ((this.configureIfExistsField == YesNoType.yes))
                {
                    writer.WriteAttributeString("ConfigureIfExists", "yes");
                }
            }
            if (this.connectionTimeoutFieldSet)
            {
                writer.WriteAttributeString("ConnectionTimeout", this.connectionTimeoutField.ToString());
            }
            if (this.descriptionFieldSet)
            {
                writer.WriteAttributeString("Description", this.descriptionField);
            }
            if (this.directoryFieldSet)
            {
                writer.WriteAttributeString("Directory", this.directoryField);
            }
            if (this.dirPropertiesFieldSet)
            {
                writer.WriteAttributeString("DirProperties", this.dirPropertiesField);
            }
            if (this.sequenceFieldSet)
            {
                writer.WriteAttributeString("Sequence", this.sequenceField.ToString());
            }
            if (this.startOnInstallFieldSet)
            {
                if ((this.startOnInstallField == YesNoType.no))
                {
                    writer.WriteAttributeString("StartOnInstall", "no");
                }
                if ((this.startOnInstallField == YesNoType.yes))
                {
                    writer.WriteAttributeString("StartOnInstall", "yes");
                }
            }
            if (this.webApplicationFieldSet)
            {
                writer.WriteAttributeString("WebApplication", this.webApplicationField);
            }
            if (this.webLogFieldSet)
            {
                writer.WriteAttributeString("WebLog", this.webLogField);
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
    
    public class Group : ISchemaElement
    {
        
        private string idField;
        
        private bool idFieldSet;
        
        private string nameField;
        
        private bool nameFieldSet;
        
        private string domainField;
        
        private bool domainFieldSet;
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameFieldSet = true;
                this.nameField = value;
            }
        }
        
        public string Domain
        {
            get
            {
                return this.domainField;
            }
            set
            {
                this.domainFieldSet = true;
                this.domainField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("Group", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.nameFieldSet)
            {
                writer.WriteAttributeString("Name", this.nameField);
            }
            if (this.domainFieldSet)
            {
                writer.WriteAttributeString("Domain", this.domainField);
            }
            writer.WriteEndElement();
        }
    }
    
    public class ComponentGroup : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string idField;
        
        private bool idFieldSet;
        
        public ComponentGroup()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Choice, 1, -1);
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(ComponentRef)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(ISchemaElement)));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("ComponentGroup", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
    
    public class AdvertiseExecuteSequence : ISchemaElement
    {
        
        private ElementCollection children;
        
        public AdvertiseExecuteSequence()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Choice, 0, -1);
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(CostInitialize)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(CostFinalize)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Custom)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(InstallValidate)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(InstallInitialize)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(CreateShortcuts)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(RegisterClassInfo)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(RegisterExtensionInfo)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(RegisterMIMEInfo)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(RegisterProgIdInfo)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(PublishComponents)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(PublishFeatures)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(PublishProduct)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(InstallFinalize)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(MsiPublishAssemblies)));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("AdvertiseExecuteSequence", "http://schemas.microsoft.com/wix/2003/01/wi");
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
    
    public class DialogRef : ISchemaElement
    {
        
        private string idField;
        
        private bool idFieldSet;
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("DialogRef", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            writer.WriteEndElement();
        }
    }
    
    public class RegisterClassInfo : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("RegisterClassInfo", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class Property : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string idField;
        
        private bool idFieldSet;
        
        private string valueField;
        
        private bool valueFieldSet;
        
        private YesNoType complianceCheckField;
        
        private bool complianceCheckFieldSet;
        
        private YesNoType adminField;
        
        private bool adminFieldSet;
        
        private YesNoType secureField;
        
        private bool secureFieldSet;
        
        private YesNoType hiddenField;
        
        private bool hiddenFieldSet;
        
        public Property()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Sequence);
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(ComplianceDrive), 0, 1));
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(ComponentSearch), 0, -1));
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(RegistrySearch), 0, -1));
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(RegistrySearchRef), 0, -1));
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(IniFileSearch), 0, -1));
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(DirectorySearch), 0, -1));
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(DirectorySearchRef), 0, -1));
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(FileSearch), 0, -1));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string Value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueFieldSet = true;
                this.valueField = value;
            }
        }
        
        public YesNoType ComplianceCheck
        {
            get
            {
                return this.complianceCheckField;
            }
            set
            {
                this.complianceCheckFieldSet = true;
                this.complianceCheckField = value;
            }
        }
        
        public YesNoType Admin
        {
            get
            {
                return this.adminField;
            }
            set
            {
                this.adminFieldSet = true;
                this.adminField = value;
            }
        }
        
        public YesNoType Secure
        {
            get
            {
                return this.secureField;
            }
            set
            {
                this.secureFieldSet = true;
                this.secureField = value;
            }
        }
        
        public YesNoType Hidden
        {
            get
            {
                return this.hiddenField;
            }
            set
            {
                this.hiddenFieldSet = true;
                this.hiddenField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("Property", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.valueFieldSet)
            {
                writer.WriteAttributeString("Value", this.valueField);
            }
            if (this.complianceCheckFieldSet)
            {
                if ((this.complianceCheckField == YesNoType.no))
                {
                    writer.WriteAttributeString("ComplianceCheck", "no");
                }
                if ((this.complianceCheckField == YesNoType.yes))
                {
                    writer.WriteAttributeString("ComplianceCheck", "yes");
                }
            }
            if (this.adminFieldSet)
            {
                if ((this.adminField == YesNoType.no))
                {
                    writer.WriteAttributeString("Admin", "no");
                }
                if ((this.adminField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Admin", "yes");
                }
            }
            if (this.secureFieldSet)
            {
                if ((this.secureField == YesNoType.no))
                {
                    writer.WriteAttributeString("Secure", "no");
                }
                if ((this.secureField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Secure", "yes");
                }
            }
            if (this.hiddenFieldSet)
            {
                if ((this.hiddenField == YesNoType.no))
                {
                    writer.WriteAttributeString("Hidden", "no");
                }
                if ((this.hiddenField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Hidden", "yes");
                }
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
    
    public class PublishComponents : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("PublishComponents", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class Show : ISchemaElement
    {
        
        private string dialogField;
        
        private bool dialogFieldSet;
        
        private OnExitType onExitField;
        
        private bool onExitFieldSet;
        
        private string beforeField;
        
        private bool beforeFieldSet;
        
        private string afterField;
        
        private bool afterFieldSet;
        
        private int sequenceField;
        
        private bool sequenceFieldSet;
        
        private string contentField;
        
        private bool contentFieldSet;
        
        public string Dialog
        {
            get
            {
                return this.dialogField;
            }
            set
            {
                this.dialogFieldSet = true;
                this.dialogField = value;
            }
        }
        
        public OnExitType OnExit
        {
            get
            {
                return this.onExitField;
            }
            set
            {
                this.onExitFieldSet = true;
                this.onExitField = value;
            }
        }
        
        public string Before
        {
            get
            {
                return this.beforeField;
            }
            set
            {
                this.beforeFieldSet = true;
                this.beforeField = value;
            }
        }
        
        public string After
        {
            get
            {
                return this.afterField;
            }
            set
            {
                this.afterFieldSet = true;
                this.afterField = value;
            }
        }
        
        public int Sequence
        {
            get
            {
                return this.sequenceField;
            }
            set
            {
                this.sequenceFieldSet = true;
                this.sequenceField = value;
            }
        }
        
        public string Content
        {
            get
            {
                return this.contentField;
            }
            set
            {
                this.contentFieldSet = true;
                this.contentField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("Show", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.dialogFieldSet)
            {
                writer.WriteAttributeString("Dialog", this.dialogField);
            }
            if (this.onExitFieldSet)
            {
                if ((this.onExitField == OnExitType.success))
                {
                    writer.WriteAttributeString("OnExit", "success");
                }
                if ((this.onExitField == OnExitType.cancel))
                {
                    writer.WriteAttributeString("OnExit", "cancel");
                }
                if ((this.onExitField == OnExitType.error))
                {
                    writer.WriteAttributeString("OnExit", "error");
                }
                if ((this.onExitField == OnExitType.suspend))
                {
                    writer.WriteAttributeString("OnExit", "suspend");
                }
            }
            if (this.beforeFieldSet)
            {
                writer.WriteAttributeString("Before", this.beforeField);
            }
            if (this.afterFieldSet)
            {
                writer.WriteAttributeString("After", this.afterField);
            }
            if (this.sequenceFieldSet)
            {
                writer.WriteAttributeString("Sequence", this.sequenceField.ToString());
            }
            if (this.contentFieldSet)
            {
                writer.WriteString(this.contentField);
            }
            writer.WriteEndElement();
        }
        
        public enum OnExitType
        {
            
            success,
            
            cancel,
            
            error,
            
            suspend,
        }
    }
    
    public class DuplicateFiles : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("DuplicateFiles", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class File : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string idField;
        
        private bool idFieldSet;
        
        private string companionFileField;
        
        private bool companionFileFieldSet;
        
        private string nameField;
        
        private bool nameFieldSet;
        
        private string longNameField;
        
        private bool longNameFieldSet;
        
        private YesNoType keyPathField;
        
        private bool keyPathFieldSet;
        
        private YesNoType readOnlyField;
        
        private bool readOnlyFieldSet;
        
        private YesNoType hiddenField;
        
        private bool hiddenFieldSet;
        
        private YesNoType systemField;
        
        private bool systemFieldSet;
        
        private YesNoType vitalField;
        
        private bool vitalFieldSet;
        
        private YesNoType checksumField;
        
        private bool checksumFieldSet;
        
        private YesNoType patchAddedField;
        
        private bool patchAddedFieldSet;
        
        private YesNoDefaultType compressedField;
        
        private bool compressedFieldSet;
        
        private string bindPathField;
        
        private bool bindPathFieldSet;
        
        private int selfRegCostField;
        
        private bool selfRegCostFieldSet;
        
        private YesNoType trueTypeField;
        
        private bool trueTypeFieldSet;
        
        private string fontTitleField;
        
        private bool fontTitleFieldSet;
        
        private string defaultLanguageField;
        
        private bool defaultLanguageFieldSet;
        
        private int defaultSizeField;
        
        private bool defaultSizeFieldSet;
        
        private string defaultVersionField;
        
        private bool defaultVersionFieldSet;
        
        private AssemblyType assemblyField;
        
        private bool assemblyFieldSet;
        
        private string assemblyManifestField;
        
        private bool assemblyManifestFieldSet;
        
        private string assemblyApplicationField;
        
        private bool assemblyApplicationFieldSet;
        
        private ProcessorArchitectureType processorArchitectureField;
        
        private bool processorArchitectureFieldSet;
        
        private string diskIdField;
        
        private bool diskIdFieldSet;
        
        private string srcField;
        
        private bool srcFieldSet;
        
        private int patchGroupField;
        
        private bool patchGroupFieldSet;
        
        public File()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Choice, 0, -1);
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(AssemblyName)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Permission)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(CopyFile)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Shortcut)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(ODBCDriver)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(ODBCTranslator)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Class)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(AppId)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(TypeLib)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Patch)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(PerfCounter)));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string CompanionFile
        {
            get
            {
                return this.companionFileField;
            }
            set
            {
                this.companionFileFieldSet = true;
                this.companionFileField = value;
            }
        }
        
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameFieldSet = true;
                this.nameField = value;
            }
        }
        
        public string LongName
        {
            get
            {
                return this.longNameField;
            }
            set
            {
                this.longNameFieldSet = true;
                this.longNameField = value;
            }
        }
        
        public YesNoType KeyPath
        {
            get
            {
                return this.keyPathField;
            }
            set
            {
                this.keyPathFieldSet = true;
                this.keyPathField = value;
            }
        }
        
        public YesNoType ReadOnly
        {
            get
            {
                return this.readOnlyField;
            }
            set
            {
                this.readOnlyFieldSet = true;
                this.readOnlyField = value;
            }
        }
        
        public YesNoType Hidden
        {
            get
            {
                return this.hiddenField;
            }
            set
            {
                this.hiddenFieldSet = true;
                this.hiddenField = value;
            }
        }
        
        public YesNoType System
        {
            get
            {
                return this.systemField;
            }
            set
            {
                this.systemFieldSet = true;
                this.systemField = value;
            }
        }
        
        public YesNoType Vital
        {
            get
            {
                return this.vitalField;
            }
            set
            {
                this.vitalFieldSet = true;
                this.vitalField = value;
            }
        }
        
        public YesNoType Checksum
        {
            get
            {
                return this.checksumField;
            }
            set
            {
                this.checksumFieldSet = true;
                this.checksumField = value;
            }
        }
        
        public YesNoType PatchAdded
        {
            get
            {
                return this.patchAddedField;
            }
            set
            {
                this.patchAddedFieldSet = true;
                this.patchAddedField = value;
            }
        }
        
        public YesNoDefaultType Compressed
        {
            get
            {
                return this.compressedField;
            }
            set
            {
                this.compressedFieldSet = true;
                this.compressedField = value;
            }
        }
        
        public string BindPath
        {
            get
            {
                return this.bindPathField;
            }
            set
            {
                this.bindPathFieldSet = true;
                this.bindPathField = value;
            }
        }
        
        public int SelfRegCost
        {
            get
            {
                return this.selfRegCostField;
            }
            set
            {
                this.selfRegCostFieldSet = true;
                this.selfRegCostField = value;
            }
        }
        
        public YesNoType TrueType
        {
            get
            {
                return this.trueTypeField;
            }
            set
            {
                this.trueTypeFieldSet = true;
                this.trueTypeField = value;
            }
        }
        
        public string FontTitle
        {
            get
            {
                return this.fontTitleField;
            }
            set
            {
                this.fontTitleFieldSet = true;
                this.fontTitleField = value;
            }
        }
        
        public string DefaultLanguage
        {
            get
            {
                return this.defaultLanguageField;
            }
            set
            {
                this.defaultLanguageFieldSet = true;
                this.defaultLanguageField = value;
            }
        }
        
        public int DefaultSize
        {
            get
            {
                return this.defaultSizeField;
            }
            set
            {
                this.defaultSizeFieldSet = true;
                this.defaultSizeField = value;
            }
        }
        
        public string DefaultVersion
        {
            get
            {
                return this.defaultVersionField;
            }
            set
            {
                this.defaultVersionFieldSet = true;
                this.defaultVersionField = value;
            }
        }
        
        public AssemblyType Assembly
        {
            get
            {
                return this.assemblyField;
            }
            set
            {
                this.assemblyFieldSet = true;
                this.assemblyField = value;
            }
        }
        
        public string AssemblyManifest
        {
            get
            {
                return this.assemblyManifestField;
            }
            set
            {
                this.assemblyManifestFieldSet = true;
                this.assemblyManifestField = value;
            }
        }
        
        public string AssemblyApplication
        {
            get
            {
                return this.assemblyApplicationField;
            }
            set
            {
                this.assemblyApplicationFieldSet = true;
                this.assemblyApplicationField = value;
            }
        }
        
        public ProcessorArchitectureType ProcessorArchitecture
        {
            get
            {
                return this.processorArchitectureField;
            }
            set
            {
                this.processorArchitectureFieldSet = true;
                this.processorArchitectureField = value;
            }
        }
        
        public string DiskId
        {
            get
            {
                return this.diskIdField;
            }
            set
            {
                this.diskIdFieldSet = true;
                this.diskIdField = value;
            }
        }
        
        public string src
        {
            get
            {
                return this.srcField;
            }
            set
            {
                this.srcFieldSet = true;
                this.srcField = value;
            }
        }
        
        public int PatchGroup
        {
            get
            {
                return this.patchGroupField;
            }
            set
            {
                this.patchGroupFieldSet = true;
                this.patchGroupField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("File", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.companionFileFieldSet)
            {
                writer.WriteAttributeString("CompanionFile", this.companionFileField);
            }
            if (this.nameFieldSet)
            {
                writer.WriteAttributeString("Name", this.nameField);
            }
            if (this.longNameFieldSet)
            {
                writer.WriteAttributeString("LongName", this.longNameField);
            }
            if (this.keyPathFieldSet)
            {
                if ((this.keyPathField == YesNoType.no))
                {
                    writer.WriteAttributeString("KeyPath", "no");
                }
                if ((this.keyPathField == YesNoType.yes))
                {
                    writer.WriteAttributeString("KeyPath", "yes");
                }
            }
            if (this.readOnlyFieldSet)
            {
                if ((this.readOnlyField == YesNoType.no))
                {
                    writer.WriteAttributeString("ReadOnly", "no");
                }
                if ((this.readOnlyField == YesNoType.yes))
                {
                    writer.WriteAttributeString("ReadOnly", "yes");
                }
            }
            if (this.hiddenFieldSet)
            {
                if ((this.hiddenField == YesNoType.no))
                {
                    writer.WriteAttributeString("Hidden", "no");
                }
                if ((this.hiddenField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Hidden", "yes");
                }
            }
            if (this.systemFieldSet)
            {
                if ((this.systemField == YesNoType.no))
                {
                    writer.WriteAttributeString("System", "no");
                }
                if ((this.systemField == YesNoType.yes))
                {
                    writer.WriteAttributeString("System", "yes");
                }
            }
            if (this.vitalFieldSet)
            {
                if ((this.vitalField == YesNoType.no))
                {
                    writer.WriteAttributeString("Vital", "no");
                }
                if ((this.vitalField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Vital", "yes");
                }
            }
            if (this.checksumFieldSet)
            {
                if ((this.checksumField == YesNoType.no))
                {
                    writer.WriteAttributeString("Checksum", "no");
                }
                if ((this.checksumField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Checksum", "yes");
                }
            }
            if (this.patchAddedFieldSet)
            {
                if ((this.patchAddedField == YesNoType.no))
                {
                    writer.WriteAttributeString("PatchAdded", "no");
                }
                if ((this.patchAddedField == YesNoType.yes))
                {
                    writer.WriteAttributeString("PatchAdded", "yes");
                }
            }
            if (this.compressedFieldSet)
            {
                if ((this.compressedField == YesNoDefaultType.@default))
                {
                    writer.WriteAttributeString("Compressed", "default");
                }
                if ((this.compressedField == YesNoDefaultType.no))
                {
                    writer.WriteAttributeString("Compressed", "no");
                }
                if ((this.compressedField == YesNoDefaultType.yes))
                {
                    writer.WriteAttributeString("Compressed", "yes");
                }
            }
            if (this.bindPathFieldSet)
            {
                writer.WriteAttributeString("BindPath", this.bindPathField);
            }
            if (this.selfRegCostFieldSet)
            {
                writer.WriteAttributeString("SelfRegCost", this.selfRegCostField.ToString());
            }
            if (this.trueTypeFieldSet)
            {
                if ((this.trueTypeField == YesNoType.no))
                {
                    writer.WriteAttributeString("TrueType", "no");
                }
                if ((this.trueTypeField == YesNoType.yes))
                {
                    writer.WriteAttributeString("TrueType", "yes");
                }
            }
            if (this.fontTitleFieldSet)
            {
                writer.WriteAttributeString("FontTitle", this.fontTitleField);
            }
            if (this.defaultLanguageFieldSet)
            {
                writer.WriteAttributeString("DefaultLanguage", this.defaultLanguageField);
            }
            if (this.defaultSizeFieldSet)
            {
                writer.WriteAttributeString("DefaultSize", this.defaultSizeField.ToString());
            }
            if (this.defaultVersionFieldSet)
            {
                writer.WriteAttributeString("DefaultVersion", this.defaultVersionField);
            }
            if (this.assemblyFieldSet)
            {
                if ((this.assemblyField == AssemblyType.no))
                {
                    writer.WriteAttributeString("Assembly", "no");
                }
                if ((this.assemblyField == AssemblyType.win32))
                {
                    writer.WriteAttributeString("Assembly", "win32");
                }
                if ((this.assemblyField == AssemblyType.net))
                {
                    writer.WriteAttributeString("Assembly", ".net");
                }
            }
            if (this.assemblyManifestFieldSet)
            {
                writer.WriteAttributeString("AssemblyManifest", this.assemblyManifestField);
            }
            if (this.assemblyApplicationFieldSet)
            {
                writer.WriteAttributeString("AssemblyApplication", this.assemblyApplicationField);
            }
            if (this.processorArchitectureFieldSet)
            {
                if ((this.processorArchitectureField == ProcessorArchitectureType.neutral))
                {
                    writer.WriteAttributeString("ProcessorArchitecture", "neutral");
                }
                if ((this.processorArchitectureField == ProcessorArchitectureType.msil))
                {
                    writer.WriteAttributeString("ProcessorArchitecture", "msil");
                }
                if ((this.processorArchitectureField == ProcessorArchitectureType.x86))
                {
                    writer.WriteAttributeString("ProcessorArchitecture", "x86");
                }
                if ((this.processorArchitectureField == ProcessorArchitectureType.x64))
                {
                    writer.WriteAttributeString("ProcessorArchitecture", "x64");
                }
                if ((this.processorArchitectureField == ProcessorArchitectureType.ia64))
                {
                    writer.WriteAttributeString("ProcessorArchitecture", "ia64");
                }
            }
            if (this.diskIdFieldSet)
            {
                writer.WriteAttributeString("DiskId", this.diskIdField);
            }
            if (this.srcFieldSet)
            {
                writer.WriteAttributeString("src", this.srcField);
            }
            if (this.patchGroupFieldSet)
            {
                writer.WriteAttributeString("PatchGroup", this.patchGroupField.ToString());
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
        
        public enum AssemblyType
        {
            
            no,
            
            win32,
            
            net,
        }
        
        public enum ProcessorArchitectureType
        {
            
            neutral,
            
            msil,
            
            x86,
            
            x64,
            
            ia64,
        }
    }
    
    public class BindImage : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("BindImage", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class RemoveIniValues : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("RemoveIniValues", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class ODBCTranslator : ISchemaElement
    {
        
        private string idField;
        
        private bool idFieldSet;
        
        private string nameField;
        
        private bool nameFieldSet;
        
        private string fileField;
        
        private bool fileFieldSet;
        
        private string setupFileField;
        
        private bool setupFileFieldSet;
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameFieldSet = true;
                this.nameField = value;
            }
        }
        
        public string File
        {
            get
            {
                return this.fileField;
            }
            set
            {
                this.fileFieldSet = true;
                this.fileField = value;
            }
        }
        
        public string SetupFile
        {
            get
            {
                return this.setupFileField;
            }
            set
            {
                this.setupFileFieldSet = true;
                this.setupFileField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("ODBCTranslator", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.nameFieldSet)
            {
                writer.WriteAttributeString("Name", this.nameField);
            }
            if (this.fileFieldSet)
            {
                writer.WriteAttributeString("File", this.fileField);
            }
            if (this.setupFileFieldSet)
            {
                writer.WriteAttributeString("SetupFile", this.setupFileField);
            }
            writer.WriteEndElement();
        }
    }
    
    public class CopyFile : ISchemaElement
    {
        
        private string idField;
        
        private bool idFieldSet;
        
        private string fileIdField;
        
        private bool fileIdFieldSet;
        
        private string sourceFolderField;
        
        private bool sourceFolderFieldSet;
        
        private string sourceDirectoryField;
        
        private bool sourceDirectoryFieldSet;
        
        private string sourcePropertyField;
        
        private bool sourcePropertyFieldSet;
        
        private string sourceNameField;
        
        private bool sourceNameFieldSet;
        
        private string destinationFolderField;
        
        private bool destinationFolderFieldSet;
        
        private string destinationDirectoryField;
        
        private bool destinationDirectoryFieldSet;
        
        private string destinationPropertyField;
        
        private bool destinationPropertyFieldSet;
        
        private string destinationNameField;
        
        private bool destinationNameFieldSet;
        
        private string destinationLongNameField;
        
        private bool destinationLongNameFieldSet;
        
        private YesNoType deleteField;
        
        private bool deleteFieldSet;
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string FileId
        {
            get
            {
                return this.fileIdField;
            }
            set
            {
                this.fileIdFieldSet = true;
                this.fileIdField = value;
            }
        }
        
        public string SourceFolder
        {
            get
            {
                return this.sourceFolderField;
            }
            set
            {
                this.sourceFolderFieldSet = true;
                this.sourceFolderField = value;
            }
        }
        
        public string SourceDirectory
        {
            get
            {
                return this.sourceDirectoryField;
            }
            set
            {
                this.sourceDirectoryFieldSet = true;
                this.sourceDirectoryField = value;
            }
        }
        
        public string SourceProperty
        {
            get
            {
                return this.sourcePropertyField;
            }
            set
            {
                this.sourcePropertyFieldSet = true;
                this.sourcePropertyField = value;
            }
        }
        
        public string SourceName
        {
            get
            {
                return this.sourceNameField;
            }
            set
            {
                this.sourceNameFieldSet = true;
                this.sourceNameField = value;
            }
        }
        
        public string DestinationFolder
        {
            get
            {
                return this.destinationFolderField;
            }
            set
            {
                this.destinationFolderFieldSet = true;
                this.destinationFolderField = value;
            }
        }
        
        public string DestinationDirectory
        {
            get
            {
                return this.destinationDirectoryField;
            }
            set
            {
                this.destinationDirectoryFieldSet = true;
                this.destinationDirectoryField = value;
            }
        }
        
        public string DestinationProperty
        {
            get
            {
                return this.destinationPropertyField;
            }
            set
            {
                this.destinationPropertyFieldSet = true;
                this.destinationPropertyField = value;
            }
        }
        
        public string DestinationName
        {
            get
            {
                return this.destinationNameField;
            }
            set
            {
                this.destinationNameFieldSet = true;
                this.destinationNameField = value;
            }
        }
        
        public string DestinationLongName
        {
            get
            {
                return this.destinationLongNameField;
            }
            set
            {
                this.destinationLongNameFieldSet = true;
                this.destinationLongNameField = value;
            }
        }
        
        public YesNoType Delete
        {
            get
            {
                return this.deleteField;
            }
            set
            {
                this.deleteFieldSet = true;
                this.deleteField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("CopyFile", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.fileIdFieldSet)
            {
                writer.WriteAttributeString("FileId", this.fileIdField);
            }
            if (this.sourceFolderFieldSet)
            {
                writer.WriteAttributeString("SourceFolder", this.sourceFolderField);
            }
            if (this.sourceDirectoryFieldSet)
            {
                writer.WriteAttributeString("SourceDirectory", this.sourceDirectoryField);
            }
            if (this.sourcePropertyFieldSet)
            {
                writer.WriteAttributeString("SourceProperty", this.sourcePropertyField);
            }
            if (this.sourceNameFieldSet)
            {
                writer.WriteAttributeString("SourceName", this.sourceNameField);
            }
            if (this.destinationFolderFieldSet)
            {
                writer.WriteAttributeString("DestinationFolder", this.destinationFolderField);
            }
            if (this.destinationDirectoryFieldSet)
            {
                writer.WriteAttributeString("DestinationDirectory", this.destinationDirectoryField);
            }
            if (this.destinationPropertyFieldSet)
            {
                writer.WriteAttributeString("DestinationProperty", this.destinationPropertyField);
            }
            if (this.destinationNameFieldSet)
            {
                writer.WriteAttributeString("DestinationName", this.destinationNameField);
            }
            if (this.destinationLongNameFieldSet)
            {
                writer.WriteAttributeString("DestinationLongName", this.destinationLongNameField);
            }
            if (this.deleteFieldSet)
            {
                if ((this.deleteField == YesNoType.no))
                {
                    writer.WriteAttributeString("Delete", "no");
                }
                if ((this.deleteField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Delete", "yes");
                }
            }
            writer.WriteEndElement();
        }
    }
    
    public class SFPFile : ISchemaElement
    {
        
        private string idField;
        
        private bool idFieldSet;
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("SFPFile", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            writer.WriteEndElement();
        }
    }
    
    public class InstallExecuteAgain : ActionModuleSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("InstallExecuteAgain", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class UI : ISchemaElement
    {
        
        private ElementCollection children;
        
        public UI()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Choice, 0, -1);
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Error)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(ProgressText)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(BillboardAction)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(ComboBox)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(ListBox)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(ListView)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(RadioGroup)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(RadioButtonGroup)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(TextStyle)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(UIText)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Dialog)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(DialogRef)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(PropertyRef)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Property)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Binary)));
            ElementCollection childCollection1 = new ElementCollection(ElementCollection.CollectionType.Sequence);
            childCollection1.AddItem(new ElementCollection.SequenceItem(typeof(AdminUISequence), 0, 1));
            childCollection1.AddItem(new ElementCollection.SequenceItem(typeof(InstallUISequence), 0, 1));
            childCollection0.AddCollection(childCollection1);
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("UI", "http://schemas.microsoft.com/wix/2003/01/wi");
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
    
    public class PatchSequence : ISchemaElement
    {
        
        private string patchFamilyField;
        
        private bool patchFamilyFieldSet;
        
        private string targetField;
        
        private bool targetFieldSet;
        
        private string sequenceField;
        
        private bool sequenceFieldSet;
        
        private int supersedeField;
        
        private bool supersedeFieldSet;
        
        public string PatchFamily
        {
            get
            {
                return this.patchFamilyField;
            }
            set
            {
                this.patchFamilyFieldSet = true;
                this.patchFamilyField = value;
            }
        }
        
        public string Target
        {
            get
            {
                return this.targetField;
            }
            set
            {
                this.targetFieldSet = true;
                this.targetField = value;
            }
        }
        
        public string Sequence
        {
            get
            {
                return this.sequenceField;
            }
            set
            {
                this.sequenceFieldSet = true;
                this.sequenceField = value;
            }
        }
        
        public int Supersede
        {
            get
            {
                return this.supersedeField;
            }
            set
            {
                this.supersedeFieldSet = true;
                this.supersedeField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("PatchSequence", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.patchFamilyFieldSet)
            {
                writer.WriteAttributeString("PatchFamily", this.patchFamilyField);
            }
            if (this.targetFieldSet)
            {
                writer.WriteAttributeString("Target", this.targetField);
            }
            if (this.sequenceFieldSet)
            {
                writer.WriteAttributeString("Sequence", this.sequenceField);
            }
            if (this.supersedeFieldSet)
            {
                writer.WriteAttributeString("Supersede", this.supersedeField.ToString());
            }
            writer.WriteEndElement();
        }
    }
    
    public class RegisterProgIdInfo : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("RegisterProgIdInfo", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class ServiceArgument : ISchemaElement
    {
        
        private string contentField;
        
        private bool contentFieldSet;
        
        public string Content
        {
            get
            {
                return this.contentField;
            }
            set
            {
                this.contentFieldSet = true;
                this.contentField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("ServiceArgument", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.contentFieldSet)
            {
                writer.WriteString(this.contentField);
            }
            writer.WriteEndElement();
        }
    }
    
    public class MsiUnpublishAssemblies : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("MsiUnpublishAssemblies", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class RadioButtonGroup : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string propertyField;
        
        private bool propertyFieldSet;
        
        public RadioButtonGroup()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Sequence);
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(RadioButton), 1, -1));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string Property
        {
            get
            {
                return this.propertyField;
            }
            set
            {
                this.propertyFieldSet = true;
                this.propertyField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("RadioButtonGroup", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.propertyFieldSet)
            {
                writer.WriteAttributeString("Property", this.propertyField);
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
    
    public class WebFilter : ISchemaElement
    {
        
        private string idField;
        
        private bool idFieldSet;
        
        private string nameField;
        
        private bool nameFieldSet;
        
        private string pathField;
        
        private bool pathFieldSet;
        
        private string webSiteField;
        
        private bool webSiteFieldSet;
        
        private string descriptionField;
        
        private bool descriptionFieldSet;
        
        private int flagsField;
        
        private bool flagsFieldSet;
        
        private string loadOrderField;
        
        private bool loadOrderFieldSet;
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameFieldSet = true;
                this.nameField = value;
            }
        }
        
        public string Path
        {
            get
            {
                return this.pathField;
            }
            set
            {
                this.pathFieldSet = true;
                this.pathField = value;
            }
        }
        
        public string WebSite
        {
            get
            {
                return this.webSiteField;
            }
            set
            {
                this.webSiteFieldSet = true;
                this.webSiteField = value;
            }
        }
        
        public string Description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionFieldSet = true;
                this.descriptionField = value;
            }
        }
        
        public int Flags
        {
            get
            {
                return this.flagsField;
            }
            set
            {
                this.flagsFieldSet = true;
                this.flagsField = value;
            }
        }
        
        public string LoadOrder
        {
            get
            {
                return this.loadOrderField;
            }
            set
            {
                this.loadOrderFieldSet = true;
                this.loadOrderField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("WebFilter", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.nameFieldSet)
            {
                writer.WriteAttributeString("Name", this.nameField);
            }
            if (this.pathFieldSet)
            {
                writer.WriteAttributeString("Path", this.pathField);
            }
            if (this.webSiteFieldSet)
            {
                writer.WriteAttributeString("WebSite", this.webSiteField);
            }
            if (this.descriptionFieldSet)
            {
                writer.WriteAttributeString("Description", this.descriptionField);
            }
            if (this.flagsFieldSet)
            {
                writer.WriteAttributeString("Flags", this.flagsField.ToString());
            }
            if (this.loadOrderFieldSet)
            {
                writer.WriteAttributeString("LoadOrder", this.loadOrderField);
            }
            writer.WriteEndElement();
        }
    }
    
    public class Patch : ISchemaElement
    {
        
        private int sequenceField;
        
        private bool sequenceFieldSet;
        
        private int patchSizeField;
        
        private bool patchSizeFieldSet;
        
        private string headerField;
        
        private bool headerFieldSet;
        
        private YesNoType vitalField;
        
        private bool vitalFieldSet;
        
        public int Sequence
        {
            get
            {
                return this.sequenceField;
            }
            set
            {
                this.sequenceFieldSet = true;
                this.sequenceField = value;
            }
        }
        
        public int PatchSize
        {
            get
            {
                return this.patchSizeField;
            }
            set
            {
                this.patchSizeFieldSet = true;
                this.patchSizeField = value;
            }
        }
        
        public string Header
        {
            get
            {
                return this.headerField;
            }
            set
            {
                this.headerFieldSet = true;
                this.headerField = value;
            }
        }
        
        public YesNoType Vital
        {
            get
            {
                return this.vitalField;
            }
            set
            {
                this.vitalFieldSet = true;
                this.vitalField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("Patch", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.sequenceFieldSet)
            {
                writer.WriteAttributeString("Sequence", this.sequenceField.ToString());
            }
            if (this.patchSizeFieldSet)
            {
                writer.WriteAttributeString("PatchSize", this.patchSizeField.ToString());
            }
            if (this.headerFieldSet)
            {
                writer.WriteAttributeString("Header", this.headerField);
            }
            if (this.vitalFieldSet)
            {
                if ((this.vitalField == YesNoType.no))
                {
                    writer.WriteAttributeString("Vital", "no");
                }
                if ((this.vitalField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Vital", "yes");
                }
            }
            writer.WriteEndElement();
        }
    }
    
    public class PublishProduct : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("PublishProduct", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class CostFinalize : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("CostFinalize", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class WebServiceExtension : ISchemaElement
    {
        
        private string idField;
        
        private bool idFieldSet;
        
        private string fileField;
        
        private bool fileFieldSet;
        
        private string descriptionField;
        
        private bool descriptionFieldSet;
        
        private string groupField;
        
        private bool groupFieldSet;
        
        private YesNoType allowField;
        
        private bool allowFieldSet;
        
        private YesNoType uIDeletableField;
        
        private bool uIDeletableFieldSet;
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string File
        {
            get
            {
                return this.fileField;
            }
            set
            {
                this.fileFieldSet = true;
                this.fileField = value;
            }
        }
        
        public string Description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionFieldSet = true;
                this.descriptionField = value;
            }
        }
        
        public string Group
        {
            get
            {
                return this.groupField;
            }
            set
            {
                this.groupFieldSet = true;
                this.groupField = value;
            }
        }
        
        public YesNoType Allow
        {
            get
            {
                return this.allowField;
            }
            set
            {
                this.allowFieldSet = true;
                this.allowField = value;
            }
        }
        
        public YesNoType UIDeletable
        {
            get
            {
                return this.uIDeletableField;
            }
            set
            {
                this.uIDeletableFieldSet = true;
                this.uIDeletableField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("WebServiceExtension", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.fileFieldSet)
            {
                writer.WriteAttributeString("File", this.fileField);
            }
            if (this.descriptionFieldSet)
            {
                writer.WriteAttributeString("Description", this.descriptionField);
            }
            if (this.groupFieldSet)
            {
                writer.WriteAttributeString("Group", this.groupField);
            }
            if (this.allowFieldSet)
            {
                if ((this.allowField == YesNoType.no))
                {
                    writer.WriteAttributeString("Allow", "no");
                }
                if ((this.allowField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Allow", "yes");
                }
            }
            if (this.uIDeletableFieldSet)
            {
                if ((this.uIDeletableField == YesNoType.no))
                {
                    writer.WriteAttributeString("UIDeletable", "no");
                }
                if ((this.uIDeletableField == YesNoType.yes))
                {
                    writer.WriteAttributeString("UIDeletable", "yes");
                }
            }
            writer.WriteEndElement();
        }
    }
    
    public class EnsureTable : ISchemaElement
    {
        
        private string idField;
        
        private bool idFieldSet;
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("EnsureTable", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            writer.WriteEndElement();
        }
    }
    
    public class TypeLib : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string idField;
        
        private bool idFieldSet;
        
        private YesNoType advertiseField;
        
        private bool advertiseFieldSet;
        
        private YesNoType controlField;
        
        private bool controlFieldSet;
        
        private int costField;
        
        private bool costFieldSet;
        
        private string descriptionField;
        
        private bool descriptionFieldSet;
        
        private YesNoType hasDiskImageField;
        
        private bool hasDiskImageFieldSet;
        
        private string helpDirectoryField;
        
        private bool helpDirectoryFieldSet;
        
        private YesNoType hiddenField;
        
        private bool hiddenFieldSet;
        
        private int languageField;
        
        private bool languageFieldSet;
        
        private string majorVersionField;
        
        private bool majorVersionFieldSet;
        
        private string minorVersionField;
        
        private bool minorVersionFieldSet;
        
        private int resourceIdField;
        
        private bool resourceIdFieldSet;
        
        private YesNoType restrictedField;
        
        private bool restrictedFieldSet;
        
        public TypeLib()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Choice, 0, -1);
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(AppId)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Class)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Interface)));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public YesNoType Advertise
        {
            get
            {
                return this.advertiseField;
            }
            set
            {
                this.advertiseFieldSet = true;
                this.advertiseField = value;
            }
        }
        
        public YesNoType Control
        {
            get
            {
                return this.controlField;
            }
            set
            {
                this.controlFieldSet = true;
                this.controlField = value;
            }
        }
        
        public int Cost
        {
            get
            {
                return this.costField;
            }
            set
            {
                this.costFieldSet = true;
                this.costField = value;
            }
        }
        
        public string Description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionFieldSet = true;
                this.descriptionField = value;
            }
        }
        
        public YesNoType HasDiskImage
        {
            get
            {
                return this.hasDiskImageField;
            }
            set
            {
                this.hasDiskImageFieldSet = true;
                this.hasDiskImageField = value;
            }
        }
        
        public string HelpDirectory
        {
            get
            {
                return this.helpDirectoryField;
            }
            set
            {
                this.helpDirectoryFieldSet = true;
                this.helpDirectoryField = value;
            }
        }
        
        public YesNoType Hidden
        {
            get
            {
                return this.hiddenField;
            }
            set
            {
                this.hiddenFieldSet = true;
                this.hiddenField = value;
            }
        }
        
        public int Language
        {
            get
            {
                return this.languageField;
            }
            set
            {
                this.languageFieldSet = true;
                this.languageField = value;
            }
        }
        
        public string MajorVersion
        {
            get
            {
                return this.majorVersionField;
            }
            set
            {
                this.majorVersionFieldSet = true;
                this.majorVersionField = value;
            }
        }
        
        public string MinorVersion
        {
            get
            {
                return this.minorVersionField;
            }
            set
            {
                this.minorVersionFieldSet = true;
                this.minorVersionField = value;
            }
        }
        
        public int ResourceId
        {
            get
            {
                return this.resourceIdField;
            }
            set
            {
                this.resourceIdFieldSet = true;
                this.resourceIdField = value;
            }
        }
        
        public YesNoType Restricted
        {
            get
            {
                return this.restrictedField;
            }
            set
            {
                this.restrictedFieldSet = true;
                this.restrictedField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("TypeLib", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.advertiseFieldSet)
            {
                if ((this.advertiseField == YesNoType.no))
                {
                    writer.WriteAttributeString("Advertise", "no");
                }
                if ((this.advertiseField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Advertise", "yes");
                }
            }
            if (this.controlFieldSet)
            {
                if ((this.controlField == YesNoType.no))
                {
                    writer.WriteAttributeString("Control", "no");
                }
                if ((this.controlField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Control", "yes");
                }
            }
            if (this.costFieldSet)
            {
                writer.WriteAttributeString("Cost", this.costField.ToString());
            }
            if (this.descriptionFieldSet)
            {
                writer.WriteAttributeString("Description", this.descriptionField);
            }
            if (this.hasDiskImageFieldSet)
            {
                if ((this.hasDiskImageField == YesNoType.no))
                {
                    writer.WriteAttributeString("HasDiskImage", "no");
                }
                if ((this.hasDiskImageField == YesNoType.yes))
                {
                    writer.WriteAttributeString("HasDiskImage", "yes");
                }
            }
            if (this.helpDirectoryFieldSet)
            {
                writer.WriteAttributeString("HelpDirectory", this.helpDirectoryField);
            }
            if (this.hiddenFieldSet)
            {
                if ((this.hiddenField == YesNoType.no))
                {
                    writer.WriteAttributeString("Hidden", "no");
                }
                if ((this.hiddenField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Hidden", "yes");
                }
            }
            if (this.languageFieldSet)
            {
                writer.WriteAttributeString("Language", this.languageField.ToString());
            }
            if (this.majorVersionFieldSet)
            {
                writer.WriteAttributeString("MajorVersion", this.majorVersionField);
            }
            if (this.minorVersionFieldSet)
            {
                writer.WriteAttributeString("MinorVersion", this.minorVersionField);
            }
            if (this.resourceIdFieldSet)
            {
                writer.WriteAttributeString("ResourceId", this.resourceIdField.ToString());
            }
            if (this.restrictedFieldSet)
            {
                if ((this.restrictedField == YesNoType.no))
                {
                    writer.WriteAttributeString("Restricted", "no");
                }
                if ((this.restrictedField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Restricted", "yes");
                }
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
    
    public class WebAppPool : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string idField;
        
        private bool idFieldSet;
        
        private string nameField;
        
        private bool nameFieldSet;
        
        private string userField;
        
        private bool userFieldSet;
        
        private int recycleMinutesField;
        
        private bool recycleMinutesFieldSet;
        
        private int recycleRequestsField;
        
        private bool recycleRequestsFieldSet;
        
        private int idleTimeoutField;
        
        private bool idleTimeoutFieldSet;
        
        private int queueLimitField;
        
        private bool queueLimitFieldSet;
        
        private int maxCpuUsageField;
        
        private bool maxCpuUsageFieldSet;
        
        private int refreshCpuField;
        
        private bool refreshCpuFieldSet;
        
        private CpuActionType cpuActionField;
        
        private bool cpuActionFieldSet;
        
        private int maxWorkerProcessesField;
        
        private bool maxWorkerProcessesFieldSet;
        
        private IdentityType identityField;
        
        private bool identityFieldSet;
        
        public WebAppPool()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Sequence);
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(RecycleTime), 0, -1));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameFieldSet = true;
                this.nameField = value;
            }
        }
        
        public string User
        {
            get
            {
                return this.userField;
            }
            set
            {
                this.userFieldSet = true;
                this.userField = value;
            }
        }
        
        public int RecycleMinutes
        {
            get
            {
                return this.recycleMinutesField;
            }
            set
            {
                this.recycleMinutesFieldSet = true;
                this.recycleMinutesField = value;
            }
        }
        
        public int RecycleRequests
        {
            get
            {
                return this.recycleRequestsField;
            }
            set
            {
                this.recycleRequestsFieldSet = true;
                this.recycleRequestsField = value;
            }
        }
        
        public int IdleTimeout
        {
            get
            {
                return this.idleTimeoutField;
            }
            set
            {
                this.idleTimeoutFieldSet = true;
                this.idleTimeoutField = value;
            }
        }
        
        public int QueueLimit
        {
            get
            {
                return this.queueLimitField;
            }
            set
            {
                this.queueLimitFieldSet = true;
                this.queueLimitField = value;
            }
        }
        
        public int MaxCpuUsage
        {
            get
            {
                return this.maxCpuUsageField;
            }
            set
            {
                this.maxCpuUsageFieldSet = true;
                this.maxCpuUsageField = value;
            }
        }
        
        public int RefreshCpu
        {
            get
            {
                return this.refreshCpuField;
            }
            set
            {
                this.refreshCpuFieldSet = true;
                this.refreshCpuField = value;
            }
        }
        
        public CpuActionType CpuAction
        {
            get
            {
                return this.cpuActionField;
            }
            set
            {
                this.cpuActionFieldSet = true;
                this.cpuActionField = value;
            }
        }
        
        public int MaxWorkerProcesses
        {
            get
            {
                return this.maxWorkerProcessesField;
            }
            set
            {
                this.maxWorkerProcessesFieldSet = true;
                this.maxWorkerProcessesField = value;
            }
        }
        
        public IdentityType Identity
        {
            get
            {
                return this.identityField;
            }
            set
            {
                this.identityFieldSet = true;
                this.identityField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("WebAppPool", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.nameFieldSet)
            {
                writer.WriteAttributeString("Name", this.nameField);
            }
            if (this.userFieldSet)
            {
                writer.WriteAttributeString("User", this.userField);
            }
            if (this.recycleMinutesFieldSet)
            {
                writer.WriteAttributeString("RecycleMinutes", this.recycleMinutesField.ToString());
            }
            if (this.recycleRequestsFieldSet)
            {
                writer.WriteAttributeString("RecycleRequests", this.recycleRequestsField.ToString());
            }
            if (this.idleTimeoutFieldSet)
            {
                writer.WriteAttributeString("IdleTimeout", this.idleTimeoutField.ToString());
            }
            if (this.queueLimitFieldSet)
            {
                writer.WriteAttributeString("QueueLimit", this.queueLimitField.ToString());
            }
            if (this.maxCpuUsageFieldSet)
            {
                writer.WriteAttributeString("MaxCpuUsage", this.maxCpuUsageField.ToString());
            }
            if (this.refreshCpuFieldSet)
            {
                writer.WriteAttributeString("RefreshCpu", this.refreshCpuField.ToString());
            }
            if (this.cpuActionFieldSet)
            {
                if ((this.cpuActionField == CpuActionType.none))
                {
                    writer.WriteAttributeString("CpuAction", "none");
                }
                if ((this.cpuActionField == CpuActionType.shutdown))
                {
                    writer.WriteAttributeString("CpuAction", "shutdown");
                }
            }
            if (this.maxWorkerProcessesFieldSet)
            {
                writer.WriteAttributeString("MaxWorkerProcesses", this.maxWorkerProcessesField.ToString());
            }
            if (this.identityFieldSet)
            {
                if ((this.identityField == IdentityType.networkService))
                {
                    writer.WriteAttributeString("Identity", "networkService");
                }
                if ((this.identityField == IdentityType.localService))
                {
                    writer.WriteAttributeString("Identity", "localService");
                }
                if ((this.identityField == IdentityType.localSystem))
                {
                    writer.WriteAttributeString("Identity", "localSystem");
                }
                if ((this.identityField == IdentityType.other))
                {
                    writer.WriteAttributeString("Identity", "other");
                }
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
        
        public enum CpuActionType
        {
            
            none,
            
            shutdown,
        }
        
        public enum IdentityType
        {
            
            networkService,
            
            localService,
            
            localSystem,
            
            other,
        }
    }
    
    public class Package : ISchemaElement
    {
        
        private string idField;
        
        private bool idFieldSet;
        
        private YesNoType adminImageField;
        
        private bool adminImageFieldSet;
        
        private string commentsField;
        
        private bool commentsFieldSet;
        
        private YesNoType compressedField;
        
        private bool compressedFieldSet;
        
        private string descriptionField;
        
        private bool descriptionFieldSet;
        
        private int installerVersionField;
        
        private bool installerVersionFieldSet;
        
        private string keywordsField;
        
        private bool keywordsFieldSet;
        
        private string languagesField;
        
        private bool languagesFieldSet;
        
        private string manufacturerField;
        
        private bool manufacturerFieldSet;
        
        private string platformsField;
        
        private bool platformsFieldSet;
        
        private YesNoType shortNamesField;
        
        private bool shortNamesFieldSet;
        
        private string summaryCodepageField;
        
        private bool summaryCodepageFieldSet;
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public YesNoType AdminImage
        {
            get
            {
                return this.adminImageField;
            }
            set
            {
                this.adminImageFieldSet = true;
                this.adminImageField = value;
            }
        }
        
        public string Comments
        {
            get
            {
                return this.commentsField;
            }
            set
            {
                this.commentsFieldSet = true;
                this.commentsField = value;
            }
        }
        
        public YesNoType Compressed
        {
            get
            {
                return this.compressedField;
            }
            set
            {
                this.compressedFieldSet = true;
                this.compressedField = value;
            }
        }
        
        public string Description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionFieldSet = true;
                this.descriptionField = value;
            }
        }
        
        public int InstallerVersion
        {
            get
            {
                return this.installerVersionField;
            }
            set
            {
                this.installerVersionFieldSet = true;
                this.installerVersionField = value;
            }
        }
        
        public string Keywords
        {
            get
            {
                return this.keywordsField;
            }
            set
            {
                this.keywordsFieldSet = true;
                this.keywordsField = value;
            }
        }
        
        public string Languages
        {
            get
            {
                return this.languagesField;
            }
            set
            {
                this.languagesFieldSet = true;
                this.languagesField = value;
            }
        }
        
        public string Manufacturer
        {
            get
            {
                return this.manufacturerField;
            }
            set
            {
                this.manufacturerFieldSet = true;
                this.manufacturerField = value;
            }
        }
        
        public string Platforms
        {
            get
            {
                return this.platformsField;
            }
            set
            {
                this.platformsFieldSet = true;
                this.platformsField = value;
            }
        }
        
        public YesNoType ShortNames
        {
            get
            {
                return this.shortNamesField;
            }
            set
            {
                this.shortNamesFieldSet = true;
                this.shortNamesField = value;
            }
        }
        
        public string SummaryCodepage
        {
            get
            {
                return this.summaryCodepageField;
            }
            set
            {
                this.summaryCodepageFieldSet = true;
                this.summaryCodepageField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("Package", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.adminImageFieldSet)
            {
                if ((this.adminImageField == YesNoType.no))
                {
                    writer.WriteAttributeString("AdminImage", "no");
                }
                if ((this.adminImageField == YesNoType.yes))
                {
                    writer.WriteAttributeString("AdminImage", "yes");
                }
            }
            if (this.commentsFieldSet)
            {
                writer.WriteAttributeString("Comments", this.commentsField);
            }
            if (this.compressedFieldSet)
            {
                if ((this.compressedField == YesNoType.no))
                {
                    writer.WriteAttributeString("Compressed", "no");
                }
                if ((this.compressedField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Compressed", "yes");
                }
            }
            if (this.descriptionFieldSet)
            {
                writer.WriteAttributeString("Description", this.descriptionField);
            }
            if (this.installerVersionFieldSet)
            {
                writer.WriteAttributeString("InstallerVersion", this.installerVersionField.ToString());
            }
            if (this.keywordsFieldSet)
            {
                writer.WriteAttributeString("Keywords", this.keywordsField);
            }
            if (this.languagesFieldSet)
            {
                writer.WriteAttributeString("Languages", this.languagesField);
            }
            if (this.manufacturerFieldSet)
            {
                writer.WriteAttributeString("Manufacturer", this.manufacturerField);
            }
            if (this.platformsFieldSet)
            {
                writer.WriteAttributeString("Platforms", this.platformsField);
            }
            if (this.shortNamesFieldSet)
            {
                if ((this.shortNamesField == YesNoType.no))
                {
                    writer.WriteAttributeString("ShortNames", "no");
                }
                if ((this.shortNamesField == YesNoType.yes))
                {
                    writer.WriteAttributeString("ShortNames", "yes");
                }
            }
            if (this.summaryCodepageFieldSet)
            {
                writer.WriteAttributeString("SummaryCodepage", this.summaryCodepageField);
            }
            writer.WriteEndElement();
        }
    }
    
    public class Registry : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string idField;
        
        private bool idFieldSet;
        
        private ActionType actionField;
        
        private bool actionFieldSet;
        
        private string keyField;
        
        private bool keyFieldSet;
        
        private YesNoType keyPathField;
        
        private bool keyPathFieldSet;
        
        private string nameField;
        
        private bool nameFieldSet;
        
        private RootType rootField;
        
        private bool rootFieldSet;
        
        private TypeType typeField;
        
        private bool typeFieldSet;
        
        private string valueField;
        
        private bool valueFieldSet;
        
        public Registry()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Choice, 0, -1);
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Permission)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(RegistryValue)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Registry)));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public ActionType Action
        {
            get
            {
                return this.actionField;
            }
            set
            {
                this.actionFieldSet = true;
                this.actionField = value;
            }
        }
        
        public string Key
        {
            get
            {
                return this.keyField;
            }
            set
            {
                this.keyFieldSet = true;
                this.keyField = value;
            }
        }
        
        public YesNoType KeyPath
        {
            get
            {
                return this.keyPathField;
            }
            set
            {
                this.keyPathFieldSet = true;
                this.keyPathField = value;
            }
        }
        
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameFieldSet = true;
                this.nameField = value;
            }
        }
        
        public RootType Root
        {
            get
            {
                return this.rootField;
            }
            set
            {
                this.rootFieldSet = true;
                this.rootField = value;
            }
        }
        
        public TypeType Type
        {
            get
            {
                return this.typeField;
            }
            set
            {
                this.typeFieldSet = true;
                this.typeField = value;
            }
        }
        
        public string Value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueFieldSet = true;
                this.valueField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("Registry", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.actionFieldSet)
            {
                if ((this.actionField == ActionType.append))
                {
                    writer.WriteAttributeString("Action", "append");
                }
                if ((this.actionField == ActionType.createKey))
                {
                    writer.WriteAttributeString("Action", "createKey");
                }
                if ((this.actionField == ActionType.createKeyAndRemoveKeyOnUninstall))
                {
                    writer.WriteAttributeString("Action", "createKeyAndRemoveKeyOnUninstall");
                }
                if ((this.actionField == ActionType.prepend))
                {
                    writer.WriteAttributeString("Action", "prepend");
                }
                if ((this.actionField == ActionType.remove))
                {
                    writer.WriteAttributeString("Action", "remove");
                }
                if ((this.actionField == ActionType.removeKey))
                {
                    writer.WriteAttributeString("Action", "removeKey");
                }
                if ((this.actionField == ActionType.removeKeyOnInstall))
                {
                    writer.WriteAttributeString("Action", "removeKeyOnInstall");
                }
                if ((this.actionField == ActionType.removeKeyOnUninstall))
                {
                    writer.WriteAttributeString("Action", "removeKeyOnUninstall");
                }
                if ((this.actionField == ActionType.write))
                {
                    writer.WriteAttributeString("Action", "write");
                }
            }
            if (this.keyFieldSet)
            {
                writer.WriteAttributeString("Key", this.keyField);
            }
            if (this.keyPathFieldSet)
            {
                if ((this.keyPathField == YesNoType.no))
                {
                    writer.WriteAttributeString("KeyPath", "no");
                }
                if ((this.keyPathField == YesNoType.yes))
                {
                    writer.WriteAttributeString("KeyPath", "yes");
                }
            }
            if (this.nameFieldSet)
            {
                writer.WriteAttributeString("Name", this.nameField);
            }
            if (this.rootFieldSet)
            {
                if ((this.rootField == RootType.HKMU))
                {
                    writer.WriteAttributeString("Root", "HKMU");
                }
                if ((this.rootField == RootType.HKCR))
                {
                    writer.WriteAttributeString("Root", "HKCR");
                }
                if ((this.rootField == RootType.HKCU))
                {
                    writer.WriteAttributeString("Root", "HKCU");
                }
                if ((this.rootField == RootType.HKLM))
                {
                    writer.WriteAttributeString("Root", "HKLM");
                }
                if ((this.rootField == RootType.HKU))
                {
                    writer.WriteAttributeString("Root", "HKU");
                }
            }
            if (this.typeFieldSet)
            {
                if ((this.typeField == TypeType.@string))
                {
                    writer.WriteAttributeString("Type", "string");
                }
                if ((this.typeField == TypeType.integer))
                {
                    writer.WriteAttributeString("Type", "integer");
                }
                if ((this.typeField == TypeType.binary))
                {
                    writer.WriteAttributeString("Type", "binary");
                }
                if ((this.typeField == TypeType.expandable))
                {
                    writer.WriteAttributeString("Type", "expandable");
                }
                if ((this.typeField == TypeType.multiString))
                {
                    writer.WriteAttributeString("Type", "multiString");
                }
            }
            if (this.valueFieldSet)
            {
                writer.WriteAttributeString("Value", this.valueField);
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
        
        public enum ActionType
        {
            
            append,
            
            createKey,
            
            createKeyAndRemoveKeyOnUninstall,
            
            prepend,
            
            remove,
            
            removeKey,
            
            removeKeyOnInstall,
            
            removeKeyOnUninstall,
            
            write,
        }
        
        public enum RootType
        {
            
            HKMU,
            
            HKCR,
            
            HKCU,
            
            HKLM,
            
            HKU,
        }
        
        public enum TypeType
        {
            
            @string,
            
            integer,
            
            binary,
            
            expandable,
            
            multiString,
        }
    }
    
    public class Wix : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string requiredVersionField;
        
        private bool requiredVersionFieldSet;
        
        public Wix()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Choice, 0, 1);
            ElementCollection childCollection1 = new ElementCollection(ElementCollection.CollectionType.Sequence);
            ElementCollection childCollection2 = new ElementCollection(ElementCollection.CollectionType.Choice, 0, 1);
            childCollection2.AddItem(new ElementCollection.ChoiceItem(typeof(Product)));
            childCollection2.AddItem(new ElementCollection.ChoiceItem(typeof(Module)));
            childCollection1.AddCollection(childCollection2);
            childCollection1.AddItem(new ElementCollection.SequenceItem(typeof(Fragment), 0, -1));
            childCollection0.AddCollection(childCollection1);
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(PatchCreation)));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string RequiredVersion
        {
            get
            {
                return this.requiredVersionField;
            }
            set
            {
                this.requiredVersionFieldSet = true;
                this.requiredVersionField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("Wix", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.requiredVersionFieldSet)
            {
                writer.WriteAttributeString("RequiredVersion", this.requiredVersionField);
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
    
    public class SFPCatalog : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string nameField;
        
        private bool nameFieldSet;
        
        private string dependencyField;
        
        private bool dependencyFieldSet;
        
        private string srcField;
        
        private bool srcFieldSet;
        
        public SFPCatalog()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Choice, 0, -1);
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(SFPCatalog)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(SFPFile)));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameFieldSet = true;
                this.nameField = value;
            }
        }
        
        public string Dependency
        {
            get
            {
                return this.dependencyField;
            }
            set
            {
                this.dependencyFieldSet = true;
                this.dependencyField = value;
            }
        }
        
        public string src
        {
            get
            {
                return this.srcField;
            }
            set
            {
                this.srcFieldSet = true;
                this.srcField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("SFPCatalog", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.nameFieldSet)
            {
                writer.WriteAttributeString("Name", this.nameField);
            }
            if (this.dependencyFieldSet)
            {
                writer.WriteAttributeString("Dependency", this.dependencyField);
            }
            if (this.srcFieldSet)
            {
                writer.WriteAttributeString("src", this.srcField);
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
    
    public class SelfRegModules : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("SelfRegModules", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class MimeMap : ISchemaElement
    {
        
        private string idField;
        
        private bool idFieldSet;
        
        private string typeField;
        
        private bool typeFieldSet;
        
        private string extensionField;
        
        private bool extensionFieldSet;
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string Type
        {
            get
            {
                return this.typeField;
            }
            set
            {
                this.typeFieldSet = true;
                this.typeField = value;
            }
        }
        
        public string Extension
        {
            get
            {
                return this.extensionField;
            }
            set
            {
                this.extensionFieldSet = true;
                this.extensionField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("MimeMap", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.typeFieldSet)
            {
                writer.WriteAttributeString("Type", this.typeField);
            }
            if (this.extensionFieldSet)
            {
                writer.WriteAttributeString("Extension", this.extensionField);
            }
            writer.WriteEndElement();
        }
    }
    
    public class Include : ISchemaElement
    {
        
        private ElementCollection children;
        
        public Include()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Choice, 0, -1);
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(AppId)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Binary)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Category)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Class)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(ComplianceCheck)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Condition)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(CopyFile)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(CreateFolder)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(CustomAction)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(CustomTable)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Directory)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(DirectoryRef)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(EnsureTable)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Environment)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Extension)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Feature)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(FeatureRef)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(File)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(IniFile)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Interface)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(IsolateComponent)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(FragmentRef)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Group)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Icon)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Media)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(ODBCDataSource)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(ODBCDriver)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(ODBCTranslator)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(ProgId)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Property)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(PropertyRef)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Registry)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(RemoveFile)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(RemoveFolder)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(ReserveCost)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(ServiceControl)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(ServiceInstall)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(SFPCatalog)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Shortcut)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(SqlDatabase)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(TypeLib)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Upgrade)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(UI)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(User)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(WebApplication)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(WebAppPool)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(WebDirProperties)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(WebLog)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(WebSite)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Certificate)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(FileShare)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(ServiceConfig)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(SqlScript)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(SqlString)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(WebDir)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(WebFilter)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(WebProperty)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(WebServiceExtension)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(WebVirtualDir)));
            ElementCollection childCollection1 = new ElementCollection(ElementCollection.CollectionType.Sequence);
            childCollection1.AddItem(new ElementCollection.SequenceItem(typeof(InstallExecuteSequence), 0, 1));
            childCollection1.AddItem(new ElementCollection.SequenceItem(typeof(InstallUISequence), 0, 1));
            childCollection1.AddItem(new ElementCollection.SequenceItem(typeof(AdminExecuteSequence), 0, 1));
            childCollection1.AddItem(new ElementCollection.SequenceItem(typeof(AdminUISequence), 0, 1));
            childCollection1.AddItem(new ElementCollection.SequenceItem(typeof(AdvertiseExecuteSequence), 0, 1));
            childCollection0.AddCollection(childCollection1);
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("Include", "http://schemas.microsoft.com/wix/2003/01/wi");
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
    
    public class Text : ISchemaElement
    {
        
        private string srcField;
        
        private bool srcFieldSet;
        
        private string contentField;
        
        private bool contentFieldSet;
        
        public string src
        {
            get
            {
                return this.srcField;
            }
            set
            {
                this.srcFieldSet = true;
                this.srcField = value;
            }
        }
        
        public string Content
        {
            get
            {
                return this.contentField;
            }
            set
            {
                this.contentFieldSet = true;
                this.contentField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("Text", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.srcFieldSet)
            {
                writer.WriteAttributeString("src", this.srcField);
            }
            if (this.contentFieldSet)
            {
                writer.WriteString(this.contentField);
            }
            writer.WriteEndElement();
        }
    }
    
    public class FileTypeMask : ISchemaElement
    {
        
        private int offsetField;
        
        private bool offsetFieldSet;
        
        private string maskField;
        
        private bool maskFieldSet;
        
        private string valueField;
        
        private bool valueFieldSet;
        
        public int Offset
        {
            get
            {
                return this.offsetField;
            }
            set
            {
                this.offsetFieldSet = true;
                this.offsetField = value;
            }
        }
        
        public string Mask
        {
            get
            {
                return this.maskField;
            }
            set
            {
                this.maskFieldSet = true;
                this.maskField = value;
            }
        }
        
        public string Value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueFieldSet = true;
                this.valueField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("FileTypeMask", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.offsetFieldSet)
            {
                writer.WriteAttributeString("Offset", this.offsetField.ToString());
            }
            if (this.maskFieldSet)
            {
                writer.WriteAttributeString("Mask", this.maskField);
            }
            if (this.valueFieldSet)
            {
                writer.WriteAttributeString("Value", this.valueField);
            }
            writer.WriteEndElement();
        }
    }
    
    public class FileSearchRef : ISchemaElement
    {
        
        private string idField;
        
        private bool idFieldSet;
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("FileSearchRef", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            writer.WriteEndElement();
        }
    }
    
    public class InstallValidate : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("InstallValidate", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class MIME : ISchemaElement
    {
        
        private string contentTypeField;
        
        private bool contentTypeFieldSet;
        
        private string classField;
        
        private bool classFieldSet;
        
        private YesNoType defaultField;
        
        private bool defaultFieldSet;
        
        public string ContentType
        {
            get
            {
                return this.contentTypeField;
            }
            set
            {
                this.contentTypeFieldSet = true;
                this.contentTypeField = value;
            }
        }
        
        public string Class
        {
            get
            {
                return this.classField;
            }
            set
            {
                this.classFieldSet = true;
                this.classField = value;
            }
        }
        
        public YesNoType Default
        {
            get
            {
                return this.defaultField;
            }
            set
            {
                this.defaultFieldSet = true;
                this.defaultField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("MIME", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.contentTypeFieldSet)
            {
                writer.WriteAttributeString("ContentType", this.contentTypeField);
            }
            if (this.classFieldSet)
            {
                writer.WriteAttributeString("Class", this.classField);
            }
            if (this.defaultFieldSet)
            {
                if ((this.defaultField == YesNoType.no))
                {
                    writer.WriteAttributeString("Default", "no");
                }
                if ((this.defaultField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Default", "yes");
                }
            }
            writer.WriteEndElement();
        }
    }
    
    public class UnregisterClassInfo : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("UnregisterClassInfo", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class Subscribe : ISchemaElement
    {
        
        private string eventField;
        
        private bool eventFieldSet;
        
        private string attributeField;
        
        private bool attributeFieldSet;
        
        public string Event
        {
            get
            {
                return this.eventField;
            }
            set
            {
                this.eventFieldSet = true;
                this.eventField = value;
            }
        }
        
        public string Attribute
        {
            get
            {
                return this.attributeField;
            }
            set
            {
                this.attributeFieldSet = true;
                this.attributeField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("Subscribe", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.eventFieldSet)
            {
                writer.WriteAttributeString("Event", this.eventField);
            }
            if (this.attributeFieldSet)
            {
                writer.WriteAttributeString("Attribute", this.attributeField);
            }
            writer.WriteEndElement();
        }
    }
    
    public class Condition : ISchemaElement
    {
        
        private ActionType actionField;
        
        private bool actionFieldSet;
        
        private string levelField;
        
        private bool levelFieldSet;
        
        private string messageField;
        
        private bool messageFieldSet;
        
        private string contentField;
        
        private bool contentFieldSet;
        
        public ActionType Action
        {
            get
            {
                return this.actionField;
            }
            set
            {
                this.actionFieldSet = true;
                this.actionField = value;
            }
        }
        
        public string Level
        {
            get
            {
                return this.levelField;
            }
            set
            {
                this.levelFieldSet = true;
                this.levelField = value;
            }
        }
        
        public string Message
        {
            get
            {
                return this.messageField;
            }
            set
            {
                this.messageFieldSet = true;
                this.messageField = value;
            }
        }
        
        public string Content
        {
            get
            {
                return this.contentField;
            }
            set
            {
                this.contentFieldSet = true;
                this.contentField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("Condition", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.actionFieldSet)
            {
                if ((this.actionField == ActionType.@default))
                {
                    writer.WriteAttributeString("Action", "default");
                }
                if ((this.actionField == ActionType.enable))
                {
                    writer.WriteAttributeString("Action", "enable");
                }
                if ((this.actionField == ActionType.disable))
                {
                    writer.WriteAttributeString("Action", "disable");
                }
                if ((this.actionField == ActionType.hide))
                {
                    writer.WriteAttributeString("Action", "hide");
                }
                if ((this.actionField == ActionType.show))
                {
                    writer.WriteAttributeString("Action", "show");
                }
            }
            if (this.levelFieldSet)
            {
                writer.WriteAttributeString("Level", this.levelField);
            }
            if (this.messageFieldSet)
            {
                writer.WriteAttributeString("Message", this.messageField);
            }
            if (this.contentFieldSet)
            {
                writer.WriteString(this.contentField);
            }
            writer.WriteEndElement();
        }
        
        public enum ActionType
        {
            
            @default,
            
            enable,
            
            disable,
            
            hide,
            
            show,
        }
    }
    
    public class Row : ISchemaElement
    {
        
        private ElementCollection children;
        
        public Row()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Sequence);
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(Data), 1, -1));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("Row", "http://schemas.microsoft.com/wix/2003/01/wi");
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
    
    public class RemoveFolder : ISchemaElement
    {
        
        private string idField;
        
        private bool idFieldSet;
        
        private string directoryField;
        
        private bool directoryFieldSet;
        
        private string propertyField;
        
        private bool propertyFieldSet;
        
        private OnType onField;
        
        private bool onFieldSet;
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string Directory
        {
            get
            {
                return this.directoryField;
            }
            set
            {
                this.directoryFieldSet = true;
                this.directoryField = value;
            }
        }
        
        public string Property
        {
            get
            {
                return this.propertyField;
            }
            set
            {
                this.propertyFieldSet = true;
                this.propertyField = value;
            }
        }
        
        public OnType On
        {
            get
            {
                return this.onField;
            }
            set
            {
                this.onFieldSet = true;
                this.onField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("RemoveFolder", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.directoryFieldSet)
            {
                writer.WriteAttributeString("Directory", this.directoryField);
            }
            if (this.propertyFieldSet)
            {
                writer.WriteAttributeString("Property", this.propertyField);
            }
            if (this.onFieldSet)
            {
                if ((this.onField == OnType.install))
                {
                    writer.WriteAttributeString("On", "install");
                }
                if ((this.onField == OnType.uninstall))
                {
                    writer.WriteAttributeString("On", "uninstall");
                }
                if ((this.onField == OnType.both))
                {
                    writer.WriteAttributeString("On", "both");
                }
            }
            writer.WriteEndElement();
        }
        
        public enum OnType
        {
            
            install,
            
            uninstall,
            
            both,
        }
    }
    
    public class Publish : ISchemaElement
    {
        
        private string eventField;
        
        private bool eventFieldSet;
        
        private string propertyField;
        
        private bool propertyFieldSet;
        
        private string valueField;
        
        private bool valueFieldSet;
        
        private string contentField;
        
        private bool contentFieldSet;
        
        public string Event
        {
            get
            {
                return this.eventField;
            }
            set
            {
                this.eventFieldSet = true;
                this.eventField = value;
            }
        }
        
        public string Property
        {
            get
            {
                return this.propertyField;
            }
            set
            {
                this.propertyFieldSet = true;
                this.propertyField = value;
            }
        }
        
        public string Value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueFieldSet = true;
                this.valueField = value;
            }
        }
        
        public string Content
        {
            get
            {
                return this.contentField;
            }
            set
            {
                this.contentFieldSet = true;
                this.contentField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("Publish", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.eventFieldSet)
            {
                writer.WriteAttributeString("Event", this.eventField);
            }
            if (this.propertyFieldSet)
            {
                writer.WriteAttributeString("Property", this.propertyField);
            }
            if (this.valueFieldSet)
            {
                writer.WriteAttributeString("Value", this.valueField);
            }
            if (this.contentFieldSet)
            {
                writer.WriteString(this.contentField);
            }
            writer.WriteEndElement();
        }
    }
    
    public class RegistrySearch : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string idField;
        
        private bool idFieldSet;
        
        private RootType rootField;
        
        private bool rootFieldSet;
        
        private string keyField;
        
        private bool keyFieldSet;
        
        private string nameField;
        
        private bool nameFieldSet;
        
        private TypeType typeField;
        
        private bool typeFieldSet;
        
        private YesNoType win64Field;
        
        private bool win64FieldSet;
        
        public RegistrySearch()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Choice, 0, 1);
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(DirectorySearch)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(DirectorySearchRef)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(FileSearch)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(FileSearchRef)));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public RootType Root
        {
            get
            {
                return this.rootField;
            }
            set
            {
                this.rootFieldSet = true;
                this.rootField = value;
            }
        }
        
        public string Key
        {
            get
            {
                return this.keyField;
            }
            set
            {
                this.keyFieldSet = true;
                this.keyField = value;
            }
        }
        
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameFieldSet = true;
                this.nameField = value;
            }
        }
        
        public TypeType Type
        {
            get
            {
                return this.typeField;
            }
            set
            {
                this.typeFieldSet = true;
                this.typeField = value;
            }
        }
        
        public YesNoType Win64
        {
            get
            {
                return this.win64Field;
            }
            set
            {
                this.win64FieldSet = true;
                this.win64Field = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("RegistrySearch", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.rootFieldSet)
            {
                if ((this.rootField == RootType.HKCR))
                {
                    writer.WriteAttributeString("Root", "HKCR");
                }
                if ((this.rootField == RootType.HKCU))
                {
                    writer.WriteAttributeString("Root", "HKCU");
                }
                if ((this.rootField == RootType.HKLM))
                {
                    writer.WriteAttributeString("Root", "HKLM");
                }
                if ((this.rootField == RootType.HKU))
                {
                    writer.WriteAttributeString("Root", "HKU");
                }
            }
            if (this.keyFieldSet)
            {
                writer.WriteAttributeString("Key", this.keyField);
            }
            if (this.nameFieldSet)
            {
                writer.WriteAttributeString("Name", this.nameField);
            }
            if (this.typeFieldSet)
            {
                if ((this.typeField == TypeType.directory))
                {
                    writer.WriteAttributeString("Type", "directory");
                }
                if ((this.typeField == TypeType.file))
                {
                    writer.WriteAttributeString("Type", "file");
                }
                if ((this.typeField == TypeType.raw))
                {
                    writer.WriteAttributeString("Type", "raw");
                }
                if ((this.typeField == TypeType.registry))
                {
                    writer.WriteAttributeString("Type", "registry");
                }
            }
            if (this.win64FieldSet)
            {
                if ((this.win64Field == YesNoType.no))
                {
                    writer.WriteAttributeString("Win64", "no");
                }
                if ((this.win64Field == YesNoType.yes))
                {
                    writer.WriteAttributeString("Win64", "yes");
                }
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
        
        public enum RootType
        {
            
            HKCR,
            
            HKCU,
            
            HKLM,
            
            HKU,
        }
        
        public enum TypeType
        {
            
            directory,
            
            file,
            
            raw,
            
            registry,
        }
    }
    
    public class Feature : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string idField;
        
        private bool idFieldSet;
        
        private AbsentType absentField;
        
        private bool absentFieldSet;
        
        private AllowAdvertiseType allowAdvertiseField;
        
        private bool allowAdvertiseFieldSet;
        
        private string configurableDirectoryField;
        
        private bool configurableDirectoryFieldSet;
        
        private string descriptionField;
        
        private bool descriptionFieldSet;
        
        private DisplayType displayField;
        
        private bool displayFieldSet;
        
        private YesNoType followParentField;
        
        private bool followParentFieldSet;
        
        private InstallDefaultType installDefaultField;
        
        private bool installDefaultFieldSet;
        
        private int levelField;
        
        private bool levelFieldSet;
        
        private string titleField;
        
        private bool titleFieldSet;
        
        private TypicalDefaultType typicalDefaultField;
        
        private bool typicalDefaultFieldSet;
        
        public Feature()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Choice, 0, -1);
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(ComponentGroupRef)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(ComponentRef)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Condition)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Feature)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(FeatureRef)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(MergeRef)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(ISchemaElement)));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public AbsentType Absent
        {
            get
            {
                return this.absentField;
            }
            set
            {
                this.absentFieldSet = true;
                this.absentField = value;
            }
        }
        
        public AllowAdvertiseType AllowAdvertise
        {
            get
            {
                return this.allowAdvertiseField;
            }
            set
            {
                this.allowAdvertiseFieldSet = true;
                this.allowAdvertiseField = value;
            }
        }
        
        public string ConfigurableDirectory
        {
            get
            {
                return this.configurableDirectoryField;
            }
            set
            {
                this.configurableDirectoryFieldSet = true;
                this.configurableDirectoryField = value;
            }
        }
        
        public string Description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionFieldSet = true;
                this.descriptionField = value;
            }
        }
        
        public DisplayType Display
        {
            get
            {
                return this.displayField;
            }
            set
            {
                this.displayFieldSet = true;
                this.displayField = value;
            }
        }
        
        public YesNoType FollowParent
        {
            get
            {
                return this.followParentField;
            }
            set
            {
                this.followParentFieldSet = true;
                this.followParentField = value;
            }
        }
        
        public InstallDefaultType InstallDefault
        {
            get
            {
                return this.installDefaultField;
            }
            set
            {
                this.installDefaultFieldSet = true;
                this.installDefaultField = value;
            }
        }
        
        public int Level
        {
            get
            {
                return this.levelField;
            }
            set
            {
                this.levelFieldSet = true;
                this.levelField = value;
            }
        }
        
        public string Title
        {
            get
            {
                return this.titleField;
            }
            set
            {
                this.titleFieldSet = true;
                this.titleField = value;
            }
        }
        
        public TypicalDefaultType TypicalDefault
        {
            get
            {
                return this.typicalDefaultField;
            }
            set
            {
                this.typicalDefaultFieldSet = true;
                this.typicalDefaultField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("Feature", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.absentFieldSet)
            {
                if ((this.absentField == AbsentType.allow))
                {
                    writer.WriteAttributeString("Absent", "allow");
                }
                if ((this.absentField == AbsentType.disallow))
                {
                    writer.WriteAttributeString("Absent", "disallow");
                }
            }
            if (this.allowAdvertiseFieldSet)
            {
                if ((this.allowAdvertiseField == AllowAdvertiseType.no))
                {
                    writer.WriteAttributeString("AllowAdvertise", "no");
                }
                if ((this.allowAdvertiseField == AllowAdvertiseType.system))
                {
                    writer.WriteAttributeString("AllowAdvertise", "system");
                }
                if ((this.allowAdvertiseField == AllowAdvertiseType.yes))
                {
                    writer.WriteAttributeString("AllowAdvertise", "yes");
                }
            }
            if (this.configurableDirectoryFieldSet)
            {
                writer.WriteAttributeString("ConfigurableDirectory", this.configurableDirectoryField);
            }
            if (this.descriptionFieldSet)
            {
                writer.WriteAttributeString("Description", this.descriptionField);
            }
            if (this.displayFieldSet)
            {
                if ((this.displayField == DisplayType.collapse))
                {
                    writer.WriteAttributeString("Display", "collapse");
                }
                if ((this.displayField == DisplayType.expand))
                {
                    writer.WriteAttributeString("Display", "expand");
                }
                if ((this.displayField == DisplayType.hidden))
                {
                    writer.WriteAttributeString("Display", "hidden");
                }
            }
            if (this.followParentFieldSet)
            {
                if ((this.followParentField == YesNoType.no))
                {
                    writer.WriteAttributeString("FollowParent", "no");
                }
                if ((this.followParentField == YesNoType.yes))
                {
                    writer.WriteAttributeString("FollowParent", "yes");
                }
            }
            if (this.installDefaultFieldSet)
            {
                if ((this.installDefaultField == InstallDefaultType.followParent))
                {
                    writer.WriteAttributeString("InstallDefault", "followParent");
                }
                if ((this.installDefaultField == InstallDefaultType.local))
                {
                    writer.WriteAttributeString("InstallDefault", "local");
                }
                if ((this.installDefaultField == InstallDefaultType.source))
                {
                    writer.WriteAttributeString("InstallDefault", "source");
                }
            }
            if (this.levelFieldSet)
            {
                writer.WriteAttributeString("Level", this.levelField.ToString());
            }
            if (this.titleFieldSet)
            {
                writer.WriteAttributeString("Title", this.titleField);
            }
            if (this.typicalDefaultFieldSet)
            {
                if ((this.typicalDefaultField == TypicalDefaultType.advertise))
                {
                    writer.WriteAttributeString("TypicalDefault", "advertise");
                }
                if ((this.typicalDefaultField == TypicalDefaultType.install))
                {
                    writer.WriteAttributeString("TypicalDefault", "install");
                }
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
        
        public enum AbsentType
        {
            
            allow,
            
            disallow,
        }
        
        public enum AllowAdvertiseType
        {
            
            no,
            
            system,
            
            yes,
        }
        
        public enum DisplayType
        {
            
            collapse,
            
            expand,
            
            hidden,
        }
        
        public enum InstallDefaultType
        {
            
            followParent,
            
            local,
            
            source,
        }
        
        public enum TypicalDefaultType
        {
            
            advertise,
            
            install,
        }
    }
    
    public class PropertyRef : ISchemaElement
    {
        
        private string idField;
        
        private bool idFieldSet;
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("PropertyRef", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            writer.WriteEndElement();
        }
    }
    
    public class IniFileSearch : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string idField;
        
        private bool idFieldSet;
        
        private int fieldField;
        
        private bool fieldFieldSet;
        
        private string fileField;
        
        private bool fileFieldSet;
        
        private string keyField;
        
        private bool keyFieldSet;
        
        private string longNameField;
        
        private bool longNameFieldSet;
        
        private string nameField;
        
        private bool nameFieldSet;
        
        private string sectionField;
        
        private bool sectionFieldSet;
        
        private TypeType typeField;
        
        private bool typeFieldSet;
        
        public IniFileSearch()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Choice, 0, 1);
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(DirectorySearch)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(DirectorySearchRef)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(FileSearch)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(FileSearchRef)));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public int Field
        {
            get
            {
                return this.fieldField;
            }
            set
            {
                this.fieldFieldSet = true;
                this.fieldField = value;
            }
        }
        
        public string File
        {
            get
            {
                return this.fileField;
            }
            set
            {
                this.fileFieldSet = true;
                this.fileField = value;
            }
        }
        
        public string Key
        {
            get
            {
                return this.keyField;
            }
            set
            {
                this.keyFieldSet = true;
                this.keyField = value;
            }
        }
        
        public string LongName
        {
            get
            {
                return this.longNameField;
            }
            set
            {
                this.longNameFieldSet = true;
                this.longNameField = value;
            }
        }
        
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameFieldSet = true;
                this.nameField = value;
            }
        }
        
        public string Section
        {
            get
            {
                return this.sectionField;
            }
            set
            {
                this.sectionFieldSet = true;
                this.sectionField = value;
            }
        }
        
        public TypeType Type
        {
            get
            {
                return this.typeField;
            }
            set
            {
                this.typeFieldSet = true;
                this.typeField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("IniFileSearch", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.fieldFieldSet)
            {
                writer.WriteAttributeString("Field", this.fieldField.ToString());
            }
            if (this.fileFieldSet)
            {
                writer.WriteAttributeString("File", this.fileField);
            }
            if (this.keyFieldSet)
            {
                writer.WriteAttributeString("Key", this.keyField);
            }
            if (this.longNameFieldSet)
            {
                writer.WriteAttributeString("LongName", this.longNameField);
            }
            if (this.nameFieldSet)
            {
                writer.WriteAttributeString("Name", this.nameField);
            }
            if (this.sectionFieldSet)
            {
                writer.WriteAttributeString("Section", this.sectionField);
            }
            if (this.typeFieldSet)
            {
                if ((this.typeField == TypeType.directory))
                {
                    writer.WriteAttributeString("Type", "directory");
                }
                if ((this.typeField == TypeType.file))
                {
                    writer.WriteAttributeString("Type", "file");
                }
                if ((this.typeField == TypeType.registry))
                {
                    writer.WriteAttributeString("Type", "registry");
                }
                if ((this.typeField == TypeType.raw))
                {
                    writer.WriteAttributeString("Type", "raw");
                }
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
        
        public enum TypeType
        {
            
            directory,
            
            file,
            
            registry,
            
            raw,
        }
    }
    
    public class CustomAction : ISchemaElement
    {
        
        private string idField;
        
        private bool idFieldSet;
        
        private string binaryKeyField;
        
        private bool binaryKeyFieldSet;
        
        private string fileKeyField;
        
        private bool fileKeyFieldSet;
        
        private string propertyField;
        
        private bool propertyFieldSet;
        
        private string directoryField;
        
        private bool directoryFieldSet;
        
        private string packageProductCodeField;
        
        private bool packageProductCodeFieldSet;
        
        private string packagePathField;
        
        private bool packagePathFieldSet;
        
        private string packageSubstorageField;
        
        private bool packageSubstorageFieldSet;
        
        private string dllEntryField;
        
        private bool dllEntryFieldSet;
        
        private string exeCommandField;
        
        private bool exeCommandFieldSet;
        
        private string jScriptCallField;
        
        private bool jScriptCallFieldSet;
        
        private string vBScriptCallField;
        
        private bool vBScriptCallFieldSet;
        
        private ScriptType scriptField;
        
        private bool scriptFieldSet;
        
        private string valueField;
        
        private bool valueFieldSet;
        
        private string installPropertiesField;
        
        private bool installPropertiesFieldSet;
        
        private string errorField;
        
        private bool errorFieldSet;
        
        private ReturnType returnField;
        
        private bool returnFieldSet;
        
        private ExecuteType executeField;
        
        private bool executeFieldSet;
        
        private YesNoType impersonateField;
        
        private bool impersonateFieldSet;
        
        private YesNoType win64Field;
        
        private bool win64FieldSet;
        
        private YesNoType tSAwareField;
        
        private bool tSAwareFieldSet;
        
        private YesNoType terminalServerAwareField;
        
        private bool terminalServerAwareFieldSet;
        
        private YesNoType hideTargetField;
        
        private bool hideTargetFieldSet;
        
        private string contentField;
        
        private bool contentFieldSet;
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string BinaryKey
        {
            get
            {
                return this.binaryKeyField;
            }
            set
            {
                this.binaryKeyFieldSet = true;
                this.binaryKeyField = value;
            }
        }
        
        public string FileKey
        {
            get
            {
                return this.fileKeyField;
            }
            set
            {
                this.fileKeyFieldSet = true;
                this.fileKeyField = value;
            }
        }
        
        public string Property
        {
            get
            {
                return this.propertyField;
            }
            set
            {
                this.propertyFieldSet = true;
                this.propertyField = value;
            }
        }
        
        public string Directory
        {
            get
            {
                return this.directoryField;
            }
            set
            {
                this.directoryFieldSet = true;
                this.directoryField = value;
            }
        }
        
        public string PackageProductCode
        {
            get
            {
                return this.packageProductCodeField;
            }
            set
            {
                this.packageProductCodeFieldSet = true;
                this.packageProductCodeField = value;
            }
        }
        
        public string PackagePath
        {
            get
            {
                return this.packagePathField;
            }
            set
            {
                this.packagePathFieldSet = true;
                this.packagePathField = value;
            }
        }
        
        public string PackageSubstorage
        {
            get
            {
                return this.packageSubstorageField;
            }
            set
            {
                this.packageSubstorageFieldSet = true;
                this.packageSubstorageField = value;
            }
        }
        
        public string DllEntry
        {
            get
            {
                return this.dllEntryField;
            }
            set
            {
                this.dllEntryFieldSet = true;
                this.dllEntryField = value;
            }
        }
        
        public string ExeCommand
        {
            get
            {
                return this.exeCommandField;
            }
            set
            {
                this.exeCommandFieldSet = true;
                this.exeCommandField = value;
            }
        }
        
        public string JScriptCall
        {
            get
            {
                return this.jScriptCallField;
            }
            set
            {
                this.jScriptCallFieldSet = true;
                this.jScriptCallField = value;
            }
        }
        
        public string VBScriptCall
        {
            get
            {
                return this.vBScriptCallField;
            }
            set
            {
                this.vBScriptCallFieldSet = true;
                this.vBScriptCallField = value;
            }
        }
        
        public ScriptType Script
        {
            get
            {
                return this.scriptField;
            }
            set
            {
                this.scriptFieldSet = true;
                this.scriptField = value;
            }
        }
        
        public string Value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueFieldSet = true;
                this.valueField = value;
            }
        }
        
        public string InstallProperties
        {
            get
            {
                return this.installPropertiesField;
            }
            set
            {
                this.installPropertiesFieldSet = true;
                this.installPropertiesField = value;
            }
        }
        
        public string Error
        {
            get
            {
                return this.errorField;
            }
            set
            {
                this.errorFieldSet = true;
                this.errorField = value;
            }
        }
        
        public ReturnType Return
        {
            get
            {
                return this.returnField;
            }
            set
            {
                this.returnFieldSet = true;
                this.returnField = value;
            }
        }
        
        public ExecuteType Execute
        {
            get
            {
                return this.executeField;
            }
            set
            {
                this.executeFieldSet = true;
                this.executeField = value;
            }
        }
        
        public YesNoType Impersonate
        {
            get
            {
                return this.impersonateField;
            }
            set
            {
                this.impersonateFieldSet = true;
                this.impersonateField = value;
            }
        }
        
        public YesNoType Win64
        {
            get
            {
                return this.win64Field;
            }
            set
            {
                this.win64FieldSet = true;
                this.win64Field = value;
            }
        }
        
        public YesNoType TSAware
        {
            get
            {
                return this.tSAwareField;
            }
            set
            {
                this.tSAwareFieldSet = true;
                this.tSAwareField = value;
            }
        }
        
        public YesNoType TerminalServerAware
        {
            get
            {
                return this.terminalServerAwareField;
            }
            set
            {
                this.terminalServerAwareFieldSet = true;
                this.terminalServerAwareField = value;
            }
        }
        
        public YesNoType HideTarget
        {
            get
            {
                return this.hideTargetField;
            }
            set
            {
                this.hideTargetFieldSet = true;
                this.hideTargetField = value;
            }
        }
        
        public string Content
        {
            get
            {
                return this.contentField;
            }
            set
            {
                this.contentFieldSet = true;
                this.contentField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("CustomAction", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.binaryKeyFieldSet)
            {
                writer.WriteAttributeString("BinaryKey", this.binaryKeyField);
            }
            if (this.fileKeyFieldSet)
            {
                writer.WriteAttributeString("FileKey", this.fileKeyField);
            }
            if (this.propertyFieldSet)
            {
                writer.WriteAttributeString("Property", this.propertyField);
            }
            if (this.directoryFieldSet)
            {
                writer.WriteAttributeString("Directory", this.directoryField);
            }
            if (this.packageProductCodeFieldSet)
            {
                writer.WriteAttributeString("PackageProductCode", this.packageProductCodeField);
            }
            if (this.packagePathFieldSet)
            {
                writer.WriteAttributeString("PackagePath", this.packagePathField);
            }
            if (this.packageSubstorageFieldSet)
            {
                writer.WriteAttributeString("PackageSubstorage", this.packageSubstorageField);
            }
            if (this.dllEntryFieldSet)
            {
                writer.WriteAttributeString("DllEntry", this.dllEntryField);
            }
            if (this.exeCommandFieldSet)
            {
                writer.WriteAttributeString("ExeCommand", this.exeCommandField);
            }
            if (this.jScriptCallFieldSet)
            {
                writer.WriteAttributeString("JScriptCall", this.jScriptCallField);
            }
            if (this.vBScriptCallFieldSet)
            {
                writer.WriteAttributeString("VBScriptCall", this.vBScriptCallField);
            }
            if (this.scriptFieldSet)
            {
                if ((this.scriptField == ScriptType.jscript))
                {
                    writer.WriteAttributeString("Script", "jscript");
                }
                if ((this.scriptField == ScriptType.vbscript))
                {
                    writer.WriteAttributeString("Script", "vbscript");
                }
            }
            if (this.valueFieldSet)
            {
                writer.WriteAttributeString("Value", this.valueField);
            }
            if (this.installPropertiesFieldSet)
            {
                writer.WriteAttributeString("InstallProperties", this.installPropertiesField);
            }
            if (this.errorFieldSet)
            {
                writer.WriteAttributeString("Error", this.errorField);
            }
            if (this.returnFieldSet)
            {
                if ((this.returnField == ReturnType.asyncNoWait))
                {
                    writer.WriteAttributeString("Return", "asyncNoWait");
                }
                if ((this.returnField == ReturnType.asyncWait))
                {
                    writer.WriteAttributeString("Return", "asyncWait");
                }
                if ((this.returnField == ReturnType.check))
                {
                    writer.WriteAttributeString("Return", "check");
                }
                if ((this.returnField == ReturnType.ignore))
                {
                    writer.WriteAttributeString("Return", "ignore");
                }
            }
            if (this.executeFieldSet)
            {
                if ((this.executeField == ExecuteType.commit))
                {
                    writer.WriteAttributeString("Execute", "commit");
                }
                if ((this.executeField == ExecuteType.deferred))
                {
                    writer.WriteAttributeString("Execute", "deferred");
                }
                if ((this.executeField == ExecuteType.firstSequence))
                {
                    writer.WriteAttributeString("Execute", "firstSequence");
                }
                if ((this.executeField == ExecuteType.immediate))
                {
                    writer.WriteAttributeString("Execute", "immediate");
                }
                if ((this.executeField == ExecuteType.oncePerProcess))
                {
                    writer.WriteAttributeString("Execute", "oncePerProcess");
                }
                if ((this.executeField == ExecuteType.rollback))
                {
                    writer.WriteAttributeString("Execute", "rollback");
                }
                if ((this.executeField == ExecuteType.secondSequence))
                {
                    writer.WriteAttributeString("Execute", "secondSequence");
                }
            }
            if (this.impersonateFieldSet)
            {
                if ((this.impersonateField == YesNoType.no))
                {
                    writer.WriteAttributeString("Impersonate", "no");
                }
                if ((this.impersonateField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Impersonate", "yes");
                }
            }
            if (this.win64FieldSet)
            {
                if ((this.win64Field == YesNoType.no))
                {
                    writer.WriteAttributeString("Win64", "no");
                }
                if ((this.win64Field == YesNoType.yes))
                {
                    writer.WriteAttributeString("Win64", "yes");
                }
            }
            if (this.tSAwareFieldSet)
            {
                if ((this.tSAwareField == YesNoType.no))
                {
                    writer.WriteAttributeString("TSAware", "no");
                }
                if ((this.tSAwareField == YesNoType.yes))
                {
                    writer.WriteAttributeString("TSAware", "yes");
                }
            }
            if (this.terminalServerAwareFieldSet)
            {
                if ((this.terminalServerAwareField == YesNoType.no))
                {
                    writer.WriteAttributeString("TerminalServerAware", "no");
                }
                if ((this.terminalServerAwareField == YesNoType.yes))
                {
                    writer.WriteAttributeString("TerminalServerAware", "yes");
                }
            }
            if (this.hideTargetFieldSet)
            {
                if ((this.hideTargetField == YesNoType.no))
                {
                    writer.WriteAttributeString("HideTarget", "no");
                }
                if ((this.hideTargetField == YesNoType.yes))
                {
                    writer.WriteAttributeString("HideTarget", "yes");
                }
            }
            if (this.contentFieldSet)
            {
                writer.WriteString(this.contentField);
            }
            writer.WriteEndElement();
        }
        
        public enum ScriptType
        {
            
            jscript,
            
            vbscript,
        }
        
        public enum ReturnType
        {
            
            asyncNoWait,
            
            asyncWait,
            
            check,
            
            ignore,
        }
        
        public enum ExecuteType
        {
            
            commit,
            
            deferred,
            
            firstSequence,
            
            immediate,
            
            oncePerProcess,
            
            rollback,
            
            secondSequence,
        }
    }
    
    public class DeleteServices : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("DeleteServices", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class ProcessComponents : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("ProcessComponents", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class WriteIniValues : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("WriteIniValues", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class ListItem : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string idField;
        
        private bool idFieldSet;
        
        private string valueField;
        
        private bool valueFieldSet;
        
        private string textField;
        
        private bool textFieldSet;
        
        private string iconField;
        
        private bool iconFieldSet;
        
        public ListItem()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Sequence);
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(Text), 0, 1));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string Value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueFieldSet = true;
                this.valueField = value;
            }
        }
        
        public string Text
        {
            get
            {
                return this.textField;
            }
            set
            {
                this.textFieldSet = true;
                this.textField = value;
            }
        }
        
        public string Icon
        {
            get
            {
                return this.iconField;
            }
            set
            {
                this.iconFieldSet = true;
                this.iconField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("ListItem", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.valueFieldSet)
            {
                writer.WriteAttributeString("Value", this.valueField);
            }
            if (this.textFieldSet)
            {
                writer.WriteAttributeString("Text", this.textField);
            }
            if (this.iconFieldSet)
            {
                writer.WriteAttributeString("Icon", this.iconField);
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
    
    public class ProgressText : ISchemaElement
    {
        
        private string actionField;
        
        private bool actionFieldSet;
        
        private string templateField;
        
        private bool templateFieldSet;
        
        private string contentField;
        
        private bool contentFieldSet;
        
        public string Action
        {
            get
            {
                return this.actionField;
            }
            set
            {
                this.actionFieldSet = true;
                this.actionField = value;
            }
        }
        
        public string Template
        {
            get
            {
                return this.templateField;
            }
            set
            {
                this.templateFieldSet = true;
                this.templateField = value;
            }
        }
        
        public string Content
        {
            get
            {
                return this.contentField;
            }
            set
            {
                this.contentFieldSet = true;
                this.contentField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("ProgressText", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.actionFieldSet)
            {
                writer.WriteAttributeString("Action", this.actionField);
            }
            if (this.templateFieldSet)
            {
                writer.WriteAttributeString("Template", this.templateField);
            }
            if (this.contentFieldSet)
            {
                writer.WriteString(this.contentField);
            }
            writer.WriteEndElement();
        }
    }
    
    public class Substitution : ISchemaElement
    {
        
        private string tableField;
        
        private bool tableFieldSet;
        
        private string rowField;
        
        private bool rowFieldSet;
        
        private string columnField;
        
        private bool columnFieldSet;
        
        private string valueField;
        
        private bool valueFieldSet;
        
        public string Table
        {
            get
            {
                return this.tableField;
            }
            set
            {
                this.tableFieldSet = true;
                this.tableField = value;
            }
        }
        
        public string Row
        {
            get
            {
                return this.rowField;
            }
            set
            {
                this.rowFieldSet = true;
                this.rowField = value;
            }
        }
        
        public string Column
        {
            get
            {
                return this.columnField;
            }
            set
            {
                this.columnFieldSet = true;
                this.columnField = value;
            }
        }
        
        public string Value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueFieldSet = true;
                this.valueField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("Substitution", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.tableFieldSet)
            {
                writer.WriteAttributeString("Table", this.tableField);
            }
            if (this.rowFieldSet)
            {
                writer.WriteAttributeString("Row", this.rowField);
            }
            if (this.columnFieldSet)
            {
                writer.WriteAttributeString("Column", this.columnField);
            }
            if (this.valueFieldSet)
            {
                writer.WriteAttributeString("Value", this.valueField);
            }
            writer.WriteEndElement();
        }
    }
    
    public class AppId : ISchemaElement
    {
        
        private ElementCollection children;
        
        private YesNoType activateAtStorageField;
        
        private bool activateAtStorageFieldSet;
        
        private YesNoType advertiseField;
        
        private bool advertiseFieldSet;
        
        private string descriptionField;
        
        private bool descriptionFieldSet;
        
        private string dllSurrogateField;
        
        private bool dllSurrogateFieldSet;
        
        private string idField;
        
        private bool idFieldSet;
        
        private string localServiceField;
        
        private bool localServiceFieldSet;
        
        private string remoteServerNameField;
        
        private bool remoteServerNameFieldSet;
        
        private YesNoType runAsInteractiveUserField;
        
        private bool runAsInteractiveUserFieldSet;
        
        private string serviceParametersField;
        
        private bool serviceParametersFieldSet;
        
        public AppId()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Choice, 0, -1);
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Class)));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public YesNoType ActivateAtStorage
        {
            get
            {
                return this.activateAtStorageField;
            }
            set
            {
                this.activateAtStorageFieldSet = true;
                this.activateAtStorageField = value;
            }
        }
        
        public YesNoType Advertise
        {
            get
            {
                return this.advertiseField;
            }
            set
            {
                this.advertiseFieldSet = true;
                this.advertiseField = value;
            }
        }
        
        public string Description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionFieldSet = true;
                this.descriptionField = value;
            }
        }
        
        public string DllSurrogate
        {
            get
            {
                return this.dllSurrogateField;
            }
            set
            {
                this.dllSurrogateFieldSet = true;
                this.dllSurrogateField = value;
            }
        }
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string LocalService
        {
            get
            {
                return this.localServiceField;
            }
            set
            {
                this.localServiceFieldSet = true;
                this.localServiceField = value;
            }
        }
        
        public string RemoteServerName
        {
            get
            {
                return this.remoteServerNameField;
            }
            set
            {
                this.remoteServerNameFieldSet = true;
                this.remoteServerNameField = value;
            }
        }
        
        public YesNoType RunAsInteractiveUser
        {
            get
            {
                return this.runAsInteractiveUserField;
            }
            set
            {
                this.runAsInteractiveUserFieldSet = true;
                this.runAsInteractiveUserField = value;
            }
        }
        
        public string ServiceParameters
        {
            get
            {
                return this.serviceParametersField;
            }
            set
            {
                this.serviceParametersFieldSet = true;
                this.serviceParametersField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("AppId", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.activateAtStorageFieldSet)
            {
                if ((this.activateAtStorageField == YesNoType.no))
                {
                    writer.WriteAttributeString("ActivateAtStorage", "no");
                }
                if ((this.activateAtStorageField == YesNoType.yes))
                {
                    writer.WriteAttributeString("ActivateAtStorage", "yes");
                }
            }
            if (this.advertiseFieldSet)
            {
                if ((this.advertiseField == YesNoType.no))
                {
                    writer.WriteAttributeString("Advertise", "no");
                }
                if ((this.advertiseField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Advertise", "yes");
                }
            }
            if (this.descriptionFieldSet)
            {
                writer.WriteAttributeString("Description", this.descriptionField);
            }
            if (this.dllSurrogateFieldSet)
            {
                writer.WriteAttributeString("DllSurrogate", this.dllSurrogateField);
            }
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.localServiceFieldSet)
            {
                writer.WriteAttributeString("LocalService", this.localServiceField);
            }
            if (this.remoteServerNameFieldSet)
            {
                writer.WriteAttributeString("RemoteServerName", this.remoteServerNameField);
            }
            if (this.runAsInteractiveUserFieldSet)
            {
                if ((this.runAsInteractiveUserField == YesNoType.no))
                {
                    writer.WriteAttributeString("RunAsInteractiveUser", "no");
                }
                if ((this.runAsInteractiveUserField == YesNoType.yes))
                {
                    writer.WriteAttributeString("RunAsInteractiveUser", "yes");
                }
            }
            if (this.serviceParametersFieldSet)
            {
                writer.WriteAttributeString("ServiceParameters", this.serviceParametersField);
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
    
    public class ReplacePatch : ISchemaElement
    {
        
        private string idField;
        
        private bool idFieldSet;
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("ReplacePatch", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            writer.WriteEndElement();
        }
    }
    
    public class ODBCDataSource : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string idField;
        
        private bool idFieldSet;
        
        private string nameField;
        
        private bool nameFieldSet;
        
        private string driverNameField;
        
        private bool driverNameFieldSet;
        
        private RegistrationType registrationField;
        
        private bool registrationFieldSet;
        
        private YesNoType keyPathField;
        
        private bool keyPathFieldSet;
        
        public ODBCDataSource()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Sequence);
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(Property), 0, -1));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameFieldSet = true;
                this.nameField = value;
            }
        }
        
        public string DriverName
        {
            get
            {
                return this.driverNameField;
            }
            set
            {
                this.driverNameFieldSet = true;
                this.driverNameField = value;
            }
        }
        
        public RegistrationType Registration
        {
            get
            {
                return this.registrationField;
            }
            set
            {
                this.registrationFieldSet = true;
                this.registrationField = value;
            }
        }
        
        public YesNoType KeyPath
        {
            get
            {
                return this.keyPathField;
            }
            set
            {
                this.keyPathFieldSet = true;
                this.keyPathField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("ODBCDataSource", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.nameFieldSet)
            {
                writer.WriteAttributeString("Name", this.nameField);
            }
            if (this.driverNameFieldSet)
            {
                writer.WriteAttributeString("DriverName", this.driverNameField);
            }
            if (this.registrationFieldSet)
            {
                if ((this.registrationField == RegistrationType.machine))
                {
                    writer.WriteAttributeString("Registration", "machine");
                }
                if ((this.registrationField == RegistrationType.user))
                {
                    writer.WriteAttributeString("Registration", "user");
                }
            }
            if (this.keyPathFieldSet)
            {
                if ((this.keyPathField == YesNoType.no))
                {
                    writer.WriteAttributeString("KeyPath", "no");
                }
                if ((this.keyPathField == YesNoType.yes))
                {
                    writer.WriteAttributeString("KeyPath", "yes");
                }
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
        
        public enum RegistrationType
        {
            
            machine,
            
            user,
        }
    }
    
    public class FileSearch : ISchemaElement
    {
        
        private string idField;
        
        private bool idFieldSet;
        
        private string nameField;
        
        private bool nameFieldSet;
        
        private string longNameField;
        
        private bool longNameFieldSet;
        
        private int minSizeField;
        
        private bool minSizeFieldSet;
        
        private int maxSizeField;
        
        private bool maxSizeFieldSet;
        
        private string minVersionField;
        
        private bool minVersionFieldSet;
        
        private string maxVersionField;
        
        private bool maxVersionFieldSet;
        
        private DateTime minDateField;
        
        private bool minDateFieldSet;
        
        private DateTime maxDateField;
        
        private bool maxDateFieldSet;
        
        private string languagesField;
        
        private bool languagesFieldSet;
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameFieldSet = true;
                this.nameField = value;
            }
        }
        
        public string LongName
        {
            get
            {
                return this.longNameField;
            }
            set
            {
                this.longNameFieldSet = true;
                this.longNameField = value;
            }
        }
        
        public int MinSize
        {
            get
            {
                return this.minSizeField;
            }
            set
            {
                this.minSizeFieldSet = true;
                this.minSizeField = value;
            }
        }
        
        public int MaxSize
        {
            get
            {
                return this.maxSizeField;
            }
            set
            {
                this.maxSizeFieldSet = true;
                this.maxSizeField = value;
            }
        }
        
        public string MinVersion
        {
            get
            {
                return this.minVersionField;
            }
            set
            {
                this.minVersionFieldSet = true;
                this.minVersionField = value;
            }
        }
        
        public string MaxVersion
        {
            get
            {
                return this.maxVersionField;
            }
            set
            {
                this.maxVersionFieldSet = true;
                this.maxVersionField = value;
            }
        }
        
        public DateTime MinDate
        {
            get
            {
                return this.minDateField;
            }
            set
            {
                this.minDateFieldSet = true;
                this.minDateField = value;
            }
        }
        
        public DateTime MaxDate
        {
            get
            {
                return this.maxDateField;
            }
            set
            {
                this.maxDateFieldSet = true;
                this.maxDateField = value;
            }
        }
        
        public string Languages
        {
            get
            {
                return this.languagesField;
            }
            set
            {
                this.languagesFieldSet = true;
                this.languagesField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("FileSearch", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.nameFieldSet)
            {
                writer.WriteAttributeString("Name", this.nameField);
            }
            if (this.longNameFieldSet)
            {
                writer.WriteAttributeString("LongName", this.longNameField);
            }
            if (this.minSizeFieldSet)
            {
                writer.WriteAttributeString("MinSize", this.minSizeField.ToString());
            }
            if (this.maxSizeFieldSet)
            {
                writer.WriteAttributeString("MaxSize", this.maxSizeField.ToString());
            }
            if (this.minVersionFieldSet)
            {
                writer.WriteAttributeString("MinVersion", this.minVersionField);
            }
            if (this.maxVersionFieldSet)
            {
                writer.WriteAttributeString("MaxVersion", this.maxVersionField);
            }
            if (this.minDateFieldSet)
            {
                writer.WriteAttributeString("MinDate", this.minDateField.ToString());
            }
            if (this.maxDateFieldSet)
            {
                writer.WriteAttributeString("MaxDate", this.maxDateField.ToString());
            }
            if (this.languagesFieldSet)
            {
                writer.WriteAttributeString("Languages", this.languagesField);
            }
            writer.WriteEndElement();
        }
    }
    
    public class IgnoreModularization : ISchemaElement
    {
        
        private string nameField;
        
        private bool nameFieldSet;
        
        private TypeType typeField;
        
        private bool typeFieldSet;
        
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameFieldSet = true;
                this.nameField = value;
            }
        }
        
        public TypeType Type
        {
            get
            {
                return this.typeField;
            }
            set
            {
                this.typeFieldSet = true;
                this.typeField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("IgnoreModularization", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.nameFieldSet)
            {
                writer.WriteAttributeString("Name", this.nameField);
            }
            if (this.typeFieldSet)
            {
                if ((this.typeField == TypeType.Action))
                {
                    writer.WriteAttributeString("Type", "Action");
                }
                if ((this.typeField == TypeType.Property))
                {
                    writer.WriteAttributeString("Type", "Property");
                }
                if ((this.typeField == TypeType.Directory))
                {
                    writer.WriteAttributeString("Type", "Directory");
                }
            }
            writer.WriteEndElement();
        }
        
        public enum TypeType
        {
            
            Action,
            
            Property,
            
            Directory,
        }
    }
    
    public class WebAddress : ISchemaElement
    {
        
        private string idField;
        
        private bool idFieldSet;
        
        private string iPField;
        
        private bool iPFieldSet;
        
        private string portField;
        
        private bool portFieldSet;
        
        private string headerField;
        
        private bool headerFieldSet;
        
        private YesNoType secureField;
        
        private bool secureFieldSet;
        
        private YesNoType keyPathField;
        
        private bool keyPathFieldSet;
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string IP
        {
            get
            {
                return this.iPField;
            }
            set
            {
                this.iPFieldSet = true;
                this.iPField = value;
            }
        }
        
        public string Port
        {
            get
            {
                return this.portField;
            }
            set
            {
                this.portFieldSet = true;
                this.portField = value;
            }
        }
        
        public string Header
        {
            get
            {
                return this.headerField;
            }
            set
            {
                this.headerFieldSet = true;
                this.headerField = value;
            }
        }
        
        public YesNoType Secure
        {
            get
            {
                return this.secureField;
            }
            set
            {
                this.secureFieldSet = true;
                this.secureField = value;
            }
        }
        
        public YesNoType KeyPath
        {
            get
            {
                return this.keyPathField;
            }
            set
            {
                this.keyPathFieldSet = true;
                this.keyPathField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("WebAddress", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.iPFieldSet)
            {
                writer.WriteAttributeString("IP", this.iPField);
            }
            if (this.portFieldSet)
            {
                writer.WriteAttributeString("Port", this.portField);
            }
            if (this.headerFieldSet)
            {
                writer.WriteAttributeString("Header", this.headerField);
            }
            if (this.secureFieldSet)
            {
                if ((this.secureField == YesNoType.no))
                {
                    writer.WriteAttributeString("Secure", "no");
                }
                if ((this.secureField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Secure", "yes");
                }
            }
            if (this.keyPathFieldSet)
            {
                if ((this.keyPathField == YesNoType.no))
                {
                    writer.WriteAttributeString("KeyPath", "no");
                }
                if ((this.keyPathField == YesNoType.yes))
                {
                    writer.WriteAttributeString("KeyPath", "yes");
                }
            }
            writer.WriteEndElement();
        }
    }
    
    public class ComponentSearch : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string idField;
        
        private bool idFieldSet;
        
        private string guidField;
        
        private bool guidFieldSet;
        
        private TypeType typeField;
        
        private bool typeFieldSet;
        
        public ComponentSearch()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Choice, 0, 1);
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(DirectorySearch)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(DirectorySearchRef)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(FileSearch)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(FileSearchRef)));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string Guid
        {
            get
            {
                return this.guidField;
            }
            set
            {
                this.guidFieldSet = true;
                this.guidField = value;
            }
        }
        
        public TypeType Type
        {
            get
            {
                return this.typeField;
            }
            set
            {
                this.typeFieldSet = true;
                this.typeField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("ComponentSearch", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.guidFieldSet)
            {
                writer.WriteAttributeString("Guid", this.guidField);
            }
            if (this.typeFieldSet)
            {
                if ((this.typeField == TypeType.directory))
                {
                    writer.WriteAttributeString("Type", "directory");
                }
                if ((this.typeField == TypeType.file))
                {
                    writer.WriteAttributeString("Type", "file");
                }
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
        
        public enum TypeType
        {
            
            directory,
            
            file,
        }
    }
    
    public class AdminExecuteSequence : ISchemaElement
    {
        
        private ElementCollection children;
        
        public AdminExecuteSequence()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Choice, 0, -1);
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Custom)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(CostInitialize)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(FileCost)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(CostFinalize)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(InstallValidate)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(InstallInitialize)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(InstallAdminPackage)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(InstallFiles)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(InstallFinalize)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(LaunchConditions)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(ResolveSource)));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("AdminExecuteSequence", "http://schemas.microsoft.com/wix/2003/01/wi");
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
    
    public class ResolveSource : ActionModuleSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("ResolveSource", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class UnregisterTypeLibraries : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("UnregisterTypeLibraries", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class Exclusion : ISchemaElement
    {
        
        private string excludedIdField;
        
        private bool excludedIdFieldSet;
        
        private int excludeExceptLanguageField;
        
        private bool excludeExceptLanguageFieldSet;
        
        private int excludeLanguageField;
        
        private bool excludeLanguageFieldSet;
        
        private string excludedMinVersionField;
        
        private bool excludedMinVersionFieldSet;
        
        private string excludedMaxVersionField;
        
        private bool excludedMaxVersionFieldSet;
        
        public string ExcludedId
        {
            get
            {
                return this.excludedIdField;
            }
            set
            {
                this.excludedIdFieldSet = true;
                this.excludedIdField = value;
            }
        }
        
        public int ExcludeExceptLanguage
        {
            get
            {
                return this.excludeExceptLanguageField;
            }
            set
            {
                this.excludeExceptLanguageFieldSet = true;
                this.excludeExceptLanguageField = value;
            }
        }
        
        public int ExcludeLanguage
        {
            get
            {
                return this.excludeLanguageField;
            }
            set
            {
                this.excludeLanguageFieldSet = true;
                this.excludeLanguageField = value;
            }
        }
        
        public string ExcludedMinVersion
        {
            get
            {
                return this.excludedMinVersionField;
            }
            set
            {
                this.excludedMinVersionFieldSet = true;
                this.excludedMinVersionField = value;
            }
        }
        
        public string ExcludedMaxVersion
        {
            get
            {
                return this.excludedMaxVersionField;
            }
            set
            {
                this.excludedMaxVersionFieldSet = true;
                this.excludedMaxVersionField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("Exclusion", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.excludedIdFieldSet)
            {
                writer.WriteAttributeString("ExcludedId", this.excludedIdField);
            }
            if (this.excludeExceptLanguageFieldSet)
            {
                writer.WriteAttributeString("ExcludeExceptLanguage", this.excludeExceptLanguageField.ToString());
            }
            if (this.excludeLanguageFieldSet)
            {
                writer.WriteAttributeString("ExcludeLanguage", this.excludeLanguageField.ToString());
            }
            if (this.excludedMinVersionFieldSet)
            {
                writer.WriteAttributeString("ExcludedMinVersion", this.excludedMinVersionField);
            }
            if (this.excludedMaxVersionFieldSet)
            {
                writer.WriteAttributeString("ExcludedMaxVersion", this.excludedMaxVersionField);
            }
            writer.WriteEndElement();
        }
    }
    
    public class RemoveFolders : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("RemoveFolders", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class RadioGroup : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string propertyField;
        
        private bool propertyFieldSet;
        
        public RadioGroup()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Sequence);
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(RadioButton), 1, -1));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string Property
        {
            get
            {
                return this.propertyField;
            }
            set
            {
                this.propertyFieldSet = true;
                this.propertyField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("RadioGroup", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.propertyFieldSet)
            {
                writer.WriteAttributeString("Property", this.propertyField);
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
    
    public class PatchMetadata : ISchemaElement
    {
        
        private ElementCollection children;
        
        private YesNoType allowRemovalField;
        
        private bool allowRemovalFieldSet;
        
        private ClassificationType classificationField;
        
        private bool classificationFieldSet;
        
        private string creationTimeUTCField;
        
        private bool creationTimeUTCFieldSet;
        
        private string descriptionField;
        
        private bool descriptionFieldSet;
        
        private string displayNameField;
        
        private bool displayNameFieldSet;
        
        private string manufacturerNameField;
        
        private bool manufacturerNameFieldSet;
        
        private string minorUpdateTargetRTMField;
        
        private bool minorUpdateTargetRTMFieldSet;
        
        private string moreInfoURLField;
        
        private bool moreInfoURLFieldSet;
        
        private YesNoType optimizedInstallModeField;
        
        private bool optimizedInstallModeFieldSet;
        
        private string targetProductNameField;
        
        private bool targetProductNameFieldSet;
        
        public PatchMetadata()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Choice, 1, 1);
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(CustomProperty)));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public YesNoType AllowRemoval
        {
            get
            {
                return this.allowRemovalField;
            }
            set
            {
                this.allowRemovalFieldSet = true;
                this.allowRemovalField = value;
            }
        }
        
        public ClassificationType Classification
        {
            get
            {
                return this.classificationField;
            }
            set
            {
                this.classificationFieldSet = true;
                this.classificationField = value;
            }
        }
        
        public string CreationTimeUTC
        {
            get
            {
                return this.creationTimeUTCField;
            }
            set
            {
                this.creationTimeUTCFieldSet = true;
                this.creationTimeUTCField = value;
            }
        }
        
        public string Description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionFieldSet = true;
                this.descriptionField = value;
            }
        }
        
        public string DisplayName
        {
            get
            {
                return this.displayNameField;
            }
            set
            {
                this.displayNameFieldSet = true;
                this.displayNameField = value;
            }
        }
        
        public string ManufacturerName
        {
            get
            {
                return this.manufacturerNameField;
            }
            set
            {
                this.manufacturerNameFieldSet = true;
                this.manufacturerNameField = value;
            }
        }
        
        public string MinorUpdateTargetRTM
        {
            get
            {
                return this.minorUpdateTargetRTMField;
            }
            set
            {
                this.minorUpdateTargetRTMFieldSet = true;
                this.minorUpdateTargetRTMField = value;
            }
        }
        
        public string MoreInfoURL
        {
            get
            {
                return this.moreInfoURLField;
            }
            set
            {
                this.moreInfoURLFieldSet = true;
                this.moreInfoURLField = value;
            }
        }
        
        public YesNoType OptimizedInstallMode
        {
            get
            {
                return this.optimizedInstallModeField;
            }
            set
            {
                this.optimizedInstallModeFieldSet = true;
                this.optimizedInstallModeField = value;
            }
        }
        
        public string TargetProductName
        {
            get
            {
                return this.targetProductNameField;
            }
            set
            {
                this.targetProductNameFieldSet = true;
                this.targetProductNameField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("PatchMetadata", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.allowRemovalFieldSet)
            {
                if ((this.allowRemovalField == YesNoType.no))
                {
                    writer.WriteAttributeString("AllowRemoval", "no");
                }
                if ((this.allowRemovalField == YesNoType.yes))
                {
                    writer.WriteAttributeString("AllowRemoval", "yes");
                }
            }
            if (this.classificationFieldSet)
            {
                if ((this.classificationField == ClassificationType.CriticalUpdate))
                {
                    writer.WriteAttributeString("Classification", "Critical Update");
                }
                if ((this.classificationField == ClassificationType.Hotfix))
                {
                    writer.WriteAttributeString("Classification", "Hotfix");
                }
                if ((this.classificationField == ClassificationType.SecurityRollup))
                {
                    writer.WriteAttributeString("Classification", "Security Rollup");
                }
                if ((this.classificationField == ClassificationType.ServicePack))
                {
                    writer.WriteAttributeString("Classification", "Service Pack");
                }
                if ((this.classificationField == ClassificationType.Update))
                {
                    writer.WriteAttributeString("Classification", "Update");
                }
                if ((this.classificationField == ClassificationType.UpdateRollup))
                {
                    writer.WriteAttributeString("Classification", "Update Rollup");
                }
            }
            if (this.creationTimeUTCFieldSet)
            {
                writer.WriteAttributeString("CreationTimeUTC", this.creationTimeUTCField);
            }
            if (this.descriptionFieldSet)
            {
                writer.WriteAttributeString("Description", this.descriptionField);
            }
            if (this.displayNameFieldSet)
            {
                writer.WriteAttributeString("DisplayName", this.displayNameField);
            }
            if (this.manufacturerNameFieldSet)
            {
                writer.WriteAttributeString("ManufacturerName", this.manufacturerNameField);
            }
            if (this.minorUpdateTargetRTMFieldSet)
            {
                writer.WriteAttributeString("MinorUpdateTargetRTM", this.minorUpdateTargetRTMField);
            }
            if (this.moreInfoURLFieldSet)
            {
                writer.WriteAttributeString("MoreInfoURL", this.moreInfoURLField);
            }
            if (this.optimizedInstallModeFieldSet)
            {
                if ((this.optimizedInstallModeField == YesNoType.no))
                {
                    writer.WriteAttributeString("OptimizedInstallMode", "no");
                }
                if ((this.optimizedInstallModeField == YesNoType.yes))
                {
                    writer.WriteAttributeString("OptimizedInstallMode", "yes");
                }
            }
            if (this.targetProductNameFieldSet)
            {
                writer.WriteAttributeString("TargetProductName", this.targetProductNameField);
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
        
        public enum ClassificationType
        {
            
            CriticalUpdate,
            
            Hotfix,
            
            SecurityRollup,
            
            ServicePack,
            
            Update,
            
            UpdateRollup,
        }
    }
    
    public class RegisterUser : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("RegisterUser", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class ProtectFile : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string fileField;
        
        private bool fileFieldSet;
        
        public ProtectFile()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Choice, 0, -1);
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(ProtectRange)));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string File
        {
            get
            {
                return this.fileField;
            }
            set
            {
                this.fileFieldSet = true;
                this.fileField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("ProtectFile", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.fileFieldSet)
            {
                writer.WriteAttributeString("File", this.fileField);
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
    
    public class ListView : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string propertyField;
        
        private bool propertyFieldSet;
        
        public ListView()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Sequence);
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(ListItem), 0, -1));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string Property
        {
            get
            {
                return this.propertyField;
            }
            set
            {
                this.propertyFieldSet = true;
                this.propertyField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("ListView", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.propertyFieldSet)
            {
                writer.WriteAttributeString("Property", this.propertyField);
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
    
    public class ServiceDependency : ISchemaElement
    {
        
        private string idField;
        
        private bool idFieldSet;
        
        private YesNoType groupField;
        
        private bool groupFieldSet;
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public YesNoType Group
        {
            get
            {
                return this.groupField;
            }
            set
            {
                this.groupFieldSet = true;
                this.groupField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("ServiceDependency", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.groupFieldSet)
            {
                if ((this.groupField == YesNoType.no))
                {
                    writer.WriteAttributeString("Group", "no");
                }
                if ((this.groupField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Group", "yes");
                }
            }
            writer.WriteEndElement();
        }
    }
    
    public class WebDir : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string idField;
        
        private bool idFieldSet;
        
        private string webSiteField;
        
        private bool webSiteFieldSet;
        
        private string pathField;
        
        private bool pathFieldSet;
        
        private string dirPropertiesField;
        
        private bool dirPropertiesFieldSet;
        
        private string webApplicationField;
        
        private bool webApplicationFieldSet;
        
        public WebDir()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Sequence);
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(WebApplication), 0, 1));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string WebSite
        {
            get
            {
                return this.webSiteField;
            }
            set
            {
                this.webSiteFieldSet = true;
                this.webSiteField = value;
            }
        }
        
        public string Path
        {
            get
            {
                return this.pathField;
            }
            set
            {
                this.pathFieldSet = true;
                this.pathField = value;
            }
        }
        
        public string DirProperties
        {
            get
            {
                return this.dirPropertiesField;
            }
            set
            {
                this.dirPropertiesFieldSet = true;
                this.dirPropertiesField = value;
            }
        }
        
        public string WebApplication
        {
            get
            {
                return this.webApplicationField;
            }
            set
            {
                this.webApplicationFieldSet = true;
                this.webApplicationField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("WebDir", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.webSiteFieldSet)
            {
                writer.WriteAttributeString("WebSite", this.webSiteField);
            }
            if (this.pathFieldSet)
            {
                writer.WriteAttributeString("Path", this.pathField);
            }
            if (this.dirPropertiesFieldSet)
            {
                writer.WriteAttributeString("DirProperties", this.dirPropertiesField);
            }
            if (this.webApplicationFieldSet)
            {
                writer.WriteAttributeString("WebApplication", this.webApplicationField);
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
    
    public class DirectoryRef : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string idField;
        
        private bool idFieldSet;
        
        private string srcField;
        
        private bool srcFieldSet;
        
        public DirectoryRef()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Choice, 0, -1);
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Component)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Directory)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Merge)));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string src
        {
            get
            {
                return this.srcField;
            }
            set
            {
                this.srcFieldSet = true;
                this.srcField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("DirectoryRef", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.srcFieldSet)
            {
                writer.WriteAttributeString("src", this.srcField);
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
    
    public class PatchProperty : ISchemaElement
    {
        
        private string nameField;
        
        private bool nameFieldSet;
        
        private string valueField;
        
        private bool valueFieldSet;
        
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameFieldSet = true;
                this.nameField = value;
            }
        }
        
        public string Value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueFieldSet = true;
                this.valueField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("PatchProperty", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.nameFieldSet)
            {
                writer.WriteAttributeString("Name", this.nameField);
            }
            if (this.valueFieldSet)
            {
                writer.WriteAttributeString("Value", this.valueField);
            }
            writer.WriteEndElement();
        }
    }
    
    public class UnregisterExtensionInfo : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("UnregisterExtensionInfo", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class CreateFolders : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("CreateFolders", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class UnregisterProgIdInfo : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("UnregisterProgIdInfo", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class CustomTable : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string idField;
        
        private bool idFieldSet;
        
        public CustomTable()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Sequence);
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(Column), 0, -1));
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(Row), 0, -1));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("CustomTable", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
    
    public class RemoveODBC : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("RemoveODBC", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class IniFile : ISchemaElement
    {
        
        private string idField;
        
        private bool idFieldSet;
        
        private ActionType actionField;
        
        private bool actionFieldSet;
        
        private string directoryField;
        
        private bool directoryFieldSet;
        
        private string keyField;
        
        private bool keyFieldSet;
        
        private string longNameField;
        
        private bool longNameFieldSet;
        
        private string nameField;
        
        private bool nameFieldSet;
        
        private string sectionField;
        
        private bool sectionFieldSet;
        
        private string valueField;
        
        private bool valueFieldSet;
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public ActionType Action
        {
            get
            {
                return this.actionField;
            }
            set
            {
                this.actionFieldSet = true;
                this.actionField = value;
            }
        }
        
        public string Directory
        {
            get
            {
                return this.directoryField;
            }
            set
            {
                this.directoryFieldSet = true;
                this.directoryField = value;
            }
        }
        
        public string Key
        {
            get
            {
                return this.keyField;
            }
            set
            {
                this.keyFieldSet = true;
                this.keyField = value;
            }
        }
        
        public string LongName
        {
            get
            {
                return this.longNameField;
            }
            set
            {
                this.longNameFieldSet = true;
                this.longNameField = value;
            }
        }
        
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameFieldSet = true;
                this.nameField = value;
            }
        }
        
        public string Section
        {
            get
            {
                return this.sectionField;
            }
            set
            {
                this.sectionFieldSet = true;
                this.sectionField = value;
            }
        }
        
        public string Value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueFieldSet = true;
                this.valueField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("IniFile", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.actionFieldSet)
            {
                if ((this.actionField == ActionType.addLine))
                {
                    writer.WriteAttributeString("Action", "addLine");
                }
                if ((this.actionField == ActionType.addTag))
                {
                    writer.WriteAttributeString("Action", "addTag");
                }
                if ((this.actionField == ActionType.createLine))
                {
                    writer.WriteAttributeString("Action", "createLine");
                }
                if ((this.actionField == ActionType.removeLine))
                {
                    writer.WriteAttributeString("Action", "removeLine");
                }
                if ((this.actionField == ActionType.removeTag))
                {
                    writer.WriteAttributeString("Action", "removeTag");
                }
            }
            if (this.directoryFieldSet)
            {
                writer.WriteAttributeString("Directory", this.directoryField);
            }
            if (this.keyFieldSet)
            {
                writer.WriteAttributeString("Key", this.keyField);
            }
            if (this.longNameFieldSet)
            {
                writer.WriteAttributeString("LongName", this.longNameField);
            }
            if (this.nameFieldSet)
            {
                writer.WriteAttributeString("Name", this.nameField);
            }
            if (this.sectionFieldSet)
            {
                writer.WriteAttributeString("Section", this.sectionField);
            }
            if (this.valueFieldSet)
            {
                writer.WriteAttributeString("Value", this.valueField);
            }
            writer.WriteEndElement();
        }
        
        public enum ActionType
        {
            
            addLine,
            
            addTag,
            
            createLine,
            
            removeLine,
            
            removeTag,
        }
    }
    
    public class Error : ISchemaElement
    {
        
        private int idField;
        
        private bool idFieldSet;
        
        private string contentField;
        
        private bool contentFieldSet;
        
        public int Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string Content
        {
            get
            {
                return this.contentField;
            }
            set
            {
                this.contentFieldSet = true;
                this.contentField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("Error", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField.ToString());
            }
            if (this.contentFieldSet)
            {
                writer.WriteString(this.contentField);
            }
            writer.WriteEndElement();
        }
    }
    
    public class MoveFiles : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("MoveFiles", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class WriteEnvironmentStrings : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("WriteEnvironmentStrings", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class Upgrade : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string idField;
        
        private bool idFieldSet;
        
        public Upgrade()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Choice, 0, -1);
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(UpgradeVersion)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Property)));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("Upgrade", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
    
    public class LaunchConditions : ActionModuleSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("LaunchConditions", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class InstallInitialize : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("InstallInitialize", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class RemoveFile : ISchemaElement
    {
        
        private string idField;
        
        private bool idFieldSet;
        
        private string directoryField;
        
        private bool directoryFieldSet;
        
        private string propertyField;
        
        private bool propertyFieldSet;
        
        private string nameField;
        
        private bool nameFieldSet;
        
        private string longNameField;
        
        private bool longNameFieldSet;
        
        private OnType onField;
        
        private bool onFieldSet;
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string Directory
        {
            get
            {
                return this.directoryField;
            }
            set
            {
                this.directoryFieldSet = true;
                this.directoryField = value;
            }
        }
        
        public string Property
        {
            get
            {
                return this.propertyField;
            }
            set
            {
                this.propertyFieldSet = true;
                this.propertyField = value;
            }
        }
        
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameFieldSet = true;
                this.nameField = value;
            }
        }
        
        public string LongName
        {
            get
            {
                return this.longNameField;
            }
            set
            {
                this.longNameFieldSet = true;
                this.longNameField = value;
            }
        }
        
        public OnType On
        {
            get
            {
                return this.onField;
            }
            set
            {
                this.onFieldSet = true;
                this.onField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("RemoveFile", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.directoryFieldSet)
            {
                writer.WriteAttributeString("Directory", this.directoryField);
            }
            if (this.propertyFieldSet)
            {
                writer.WriteAttributeString("Property", this.propertyField);
            }
            if (this.nameFieldSet)
            {
                writer.WriteAttributeString("Name", this.nameField);
            }
            if (this.longNameFieldSet)
            {
                writer.WriteAttributeString("LongName", this.longNameField);
            }
            if (this.onFieldSet)
            {
                if ((this.onField == OnType.install))
                {
                    writer.WriteAttributeString("On", "install");
                }
                if ((this.onField == OnType.uninstall))
                {
                    writer.WriteAttributeString("On", "uninstall");
                }
                if ((this.onField == OnType.both))
                {
                    writer.WriteAttributeString("On", "both");
                }
            }
            writer.WriteEndElement();
        }
        
        public enum OnType
        {
            
            install,
            
            uninstall,
            
            both,
        }
    }
    
    public class SetODBCFolders : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("SetODBCFolders", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class SqlDatabase : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string idField;
        
        private bool idFieldSet;
        
        private string serverField;
        
        private bool serverFieldSet;
        
        private string instanceField;
        
        private bool instanceFieldSet;
        
        private string databaseField;
        
        private bool databaseFieldSet;
        
        private string userField;
        
        private bool userFieldSet;
        
        private YesNoType createOnInstallField;
        
        private bool createOnInstallFieldSet;
        
        private YesNoType createOnReinstallField;
        
        private bool createOnReinstallFieldSet;
        
        private YesNoType createOnUninstallField;
        
        private bool createOnUninstallFieldSet;
        
        private YesNoType dropOnInstallField;
        
        private bool dropOnInstallFieldSet;
        
        private YesNoType dropOnReinstallField;
        
        private bool dropOnReinstallFieldSet;
        
        private YesNoType dropOnUninstallField;
        
        private bool dropOnUninstallFieldSet;
        
        private YesNoType continueOnErrorField;
        
        private bool continueOnErrorFieldSet;
        
        private YesNoType confirmOverwriteField;
        
        private bool confirmOverwriteFieldSet;
        
        public SqlDatabase()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Choice, 0, -1);
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(SqlScript)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(SqlString)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(SqlFileSpec)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(SqlLogFileSpec)));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string Server
        {
            get
            {
                return this.serverField;
            }
            set
            {
                this.serverFieldSet = true;
                this.serverField = value;
            }
        }
        
        public string Instance
        {
            get
            {
                return this.instanceField;
            }
            set
            {
                this.instanceFieldSet = true;
                this.instanceField = value;
            }
        }
        
        public string Database
        {
            get
            {
                return this.databaseField;
            }
            set
            {
                this.databaseFieldSet = true;
                this.databaseField = value;
            }
        }
        
        public string User
        {
            get
            {
                return this.userField;
            }
            set
            {
                this.userFieldSet = true;
                this.userField = value;
            }
        }
        
        public YesNoType CreateOnInstall
        {
            get
            {
                return this.createOnInstallField;
            }
            set
            {
                this.createOnInstallFieldSet = true;
                this.createOnInstallField = value;
            }
        }
        
        public YesNoType CreateOnReinstall
        {
            get
            {
                return this.createOnReinstallField;
            }
            set
            {
                this.createOnReinstallFieldSet = true;
                this.createOnReinstallField = value;
            }
        }
        
        public YesNoType CreateOnUninstall
        {
            get
            {
                return this.createOnUninstallField;
            }
            set
            {
                this.createOnUninstallFieldSet = true;
                this.createOnUninstallField = value;
            }
        }
        
        public YesNoType DropOnInstall
        {
            get
            {
                return this.dropOnInstallField;
            }
            set
            {
                this.dropOnInstallFieldSet = true;
                this.dropOnInstallField = value;
            }
        }
        
        public YesNoType DropOnReinstall
        {
            get
            {
                return this.dropOnReinstallField;
            }
            set
            {
                this.dropOnReinstallFieldSet = true;
                this.dropOnReinstallField = value;
            }
        }
        
        public YesNoType DropOnUninstall
        {
            get
            {
                return this.dropOnUninstallField;
            }
            set
            {
                this.dropOnUninstallFieldSet = true;
                this.dropOnUninstallField = value;
            }
        }
        
        public YesNoType ContinueOnError
        {
            get
            {
                return this.continueOnErrorField;
            }
            set
            {
                this.continueOnErrorFieldSet = true;
                this.continueOnErrorField = value;
            }
        }
        
        public YesNoType ConfirmOverwrite
        {
            get
            {
                return this.confirmOverwriteField;
            }
            set
            {
                this.confirmOverwriteFieldSet = true;
                this.confirmOverwriteField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("SqlDatabase", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.serverFieldSet)
            {
                writer.WriteAttributeString("Server", this.serverField);
            }
            if (this.instanceFieldSet)
            {
                writer.WriteAttributeString("Instance", this.instanceField);
            }
            if (this.databaseFieldSet)
            {
                writer.WriteAttributeString("Database", this.databaseField);
            }
            if (this.userFieldSet)
            {
                writer.WriteAttributeString("User", this.userField);
            }
            if (this.createOnInstallFieldSet)
            {
                if ((this.createOnInstallField == YesNoType.no))
                {
                    writer.WriteAttributeString("CreateOnInstall", "no");
                }
                if ((this.createOnInstallField == YesNoType.yes))
                {
                    writer.WriteAttributeString("CreateOnInstall", "yes");
                }
            }
            if (this.createOnReinstallFieldSet)
            {
                if ((this.createOnReinstallField == YesNoType.no))
                {
                    writer.WriteAttributeString("CreateOnReinstall", "no");
                }
                if ((this.createOnReinstallField == YesNoType.yes))
                {
                    writer.WriteAttributeString("CreateOnReinstall", "yes");
                }
            }
            if (this.createOnUninstallFieldSet)
            {
                if ((this.createOnUninstallField == YesNoType.no))
                {
                    writer.WriteAttributeString("CreateOnUninstall", "no");
                }
                if ((this.createOnUninstallField == YesNoType.yes))
                {
                    writer.WriteAttributeString("CreateOnUninstall", "yes");
                }
            }
            if (this.dropOnInstallFieldSet)
            {
                if ((this.dropOnInstallField == YesNoType.no))
                {
                    writer.WriteAttributeString("DropOnInstall", "no");
                }
                if ((this.dropOnInstallField == YesNoType.yes))
                {
                    writer.WriteAttributeString("DropOnInstall", "yes");
                }
            }
            if (this.dropOnReinstallFieldSet)
            {
                if ((this.dropOnReinstallField == YesNoType.no))
                {
                    writer.WriteAttributeString("DropOnReinstall", "no");
                }
                if ((this.dropOnReinstallField == YesNoType.yes))
                {
                    writer.WriteAttributeString("DropOnReinstall", "yes");
                }
            }
            if (this.dropOnUninstallFieldSet)
            {
                if ((this.dropOnUninstallField == YesNoType.no))
                {
                    writer.WriteAttributeString("DropOnUninstall", "no");
                }
                if ((this.dropOnUninstallField == YesNoType.yes))
                {
                    writer.WriteAttributeString("DropOnUninstall", "yes");
                }
            }
            if (this.continueOnErrorFieldSet)
            {
                if ((this.continueOnErrorField == YesNoType.no))
                {
                    writer.WriteAttributeString("ContinueOnError", "no");
                }
                if ((this.continueOnErrorField == YesNoType.yes))
                {
                    writer.WriteAttributeString("ContinueOnError", "yes");
                }
            }
            if (this.confirmOverwriteFieldSet)
            {
                if ((this.confirmOverwriteField == YesNoType.no))
                {
                    writer.WriteAttributeString("ConfirmOverwrite", "no");
                }
                if ((this.confirmOverwriteField == YesNoType.yes))
                {
                    writer.WriteAttributeString("ConfirmOverwrite", "yes");
                }
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
    
    public class AssemblyName : ISchemaElement
    {
        
        private string idField;
        
        private bool idFieldSet;
        
        private string valueField;
        
        private bool valueFieldSet;
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string Value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueFieldSet = true;
                this.valueField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("AssemblyName", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.valueFieldSet)
            {
                writer.WriteAttributeString("Value", this.valueField);
            }
            writer.WriteEndElement();
        }
    }
    
    public class Verb : ISchemaElement
    {
        
        private string idField;
        
        private bool idFieldSet;
        
        private string commandField;
        
        private bool commandFieldSet;
        
        private string argumentField;
        
        private bool argumentFieldSet;
        
        private int sequenceField;
        
        private bool sequenceFieldSet;
        
        private string targetField;
        
        private bool targetFieldSet;
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string Command
        {
            get
            {
                return this.commandField;
            }
            set
            {
                this.commandFieldSet = true;
                this.commandField = value;
            }
        }
        
        public string Argument
        {
            get
            {
                return this.argumentField;
            }
            set
            {
                this.argumentFieldSet = true;
                this.argumentField = value;
            }
        }
        
        public int Sequence
        {
            get
            {
                return this.sequenceField;
            }
            set
            {
                this.sequenceFieldSet = true;
                this.sequenceField = value;
            }
        }
        
        public string Target
        {
            get
            {
                return this.targetField;
            }
            set
            {
                this.targetFieldSet = true;
                this.targetField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("Verb", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.commandFieldSet)
            {
                writer.WriteAttributeString("Command", this.commandField);
            }
            if (this.argumentFieldSet)
            {
                writer.WriteAttributeString("Argument", this.argumentField);
            }
            if (this.sequenceFieldSet)
            {
                writer.WriteAttributeString("Sequence", this.sequenceField.ToString());
            }
            if (this.targetFieldSet)
            {
                writer.WriteAttributeString("Target", this.targetField);
            }
            writer.WriteEndElement();
        }
    }
    
    public class MigrateFeatureStates : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("MigrateFeatureStates", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class RegisterTypeLibraries : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("RegisterTypeLibraries", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class RegisterMIMEInfo : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("RegisterMIMEInfo", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class DigitalSignature : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string srcField;
        
        private bool srcFieldSet;
        
        public DigitalSignature()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Choice, 0, -1);
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(DigitalCertificate)));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string src
        {
            get
            {
                return this.srcField;
            }
            set
            {
                this.srcFieldSet = true;
                this.srcField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("DigitalSignature", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.srcFieldSet)
            {
                writer.WriteAttributeString("src", this.srcField);
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
    
    public class UpgradeFile : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string fileField;
        
        private bool fileFieldSet;
        
        private YesNoType ignoreField;
        
        private bool ignoreFieldSet;
        
        private YesNoType allowIgnoreOnErrorField;
        
        private bool allowIgnoreOnErrorFieldSet;
        
        private YesNoType wholeFileField;
        
        private bool wholeFileFieldSet;
        
        public UpgradeFile()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Choice, 0, -1);
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(SymbolPath)));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string File
        {
            get
            {
                return this.fileField;
            }
            set
            {
                this.fileFieldSet = true;
                this.fileField = value;
            }
        }
        
        public YesNoType Ignore
        {
            get
            {
                return this.ignoreField;
            }
            set
            {
                this.ignoreFieldSet = true;
                this.ignoreField = value;
            }
        }
        
        public YesNoType AllowIgnoreOnError
        {
            get
            {
                return this.allowIgnoreOnErrorField;
            }
            set
            {
                this.allowIgnoreOnErrorFieldSet = true;
                this.allowIgnoreOnErrorField = value;
            }
        }
        
        public YesNoType WholeFile
        {
            get
            {
                return this.wholeFileField;
            }
            set
            {
                this.wholeFileFieldSet = true;
                this.wholeFileField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("UpgradeFile", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.fileFieldSet)
            {
                writer.WriteAttributeString("File", this.fileField);
            }
            if (this.ignoreFieldSet)
            {
                if ((this.ignoreField == YesNoType.no))
                {
                    writer.WriteAttributeString("Ignore", "no");
                }
                if ((this.ignoreField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Ignore", "yes");
                }
            }
            if (this.allowIgnoreOnErrorFieldSet)
            {
                if ((this.allowIgnoreOnErrorField == YesNoType.no))
                {
                    writer.WriteAttributeString("AllowIgnoreOnError", "no");
                }
                if ((this.allowIgnoreOnErrorField == YesNoType.yes))
                {
                    writer.WriteAttributeString("AllowIgnoreOnError", "yes");
                }
            }
            if (this.wholeFileFieldSet)
            {
                if ((this.wholeFileField == YesNoType.no))
                {
                    writer.WriteAttributeString("WholeFile", "no");
                }
                if ((this.wholeFileField == YesNoType.yes))
                {
                    writer.WriteAttributeString("WholeFile", "yes");
                }
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
    
    public class InstallODBC : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("InstallODBC", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class ListBox : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string propertyField;
        
        private bool propertyFieldSet;
        
        public ListBox()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Sequence);
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(ListItem), 0, -1));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string Property
        {
            get
            {
                return this.propertyField;
            }
            set
            {
                this.propertyFieldSet = true;
                this.propertyField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("ListBox", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.propertyFieldSet)
            {
                writer.WriteAttributeString("Property", this.propertyField);
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
    
    public class TextStyle : ISchemaElement
    {
        
        private string idField;
        
        private bool idFieldSet;
        
        private string faceNameField;
        
        private bool faceNameFieldSet;
        
        private int sizeField;
        
        private bool sizeFieldSet;
        
        private int redField;
        
        private bool redFieldSet;
        
        private int greenField;
        
        private bool greenFieldSet;
        
        private int blueField;
        
        private bool blueFieldSet;
        
        private YesNoType boldField;
        
        private bool boldFieldSet;
        
        private YesNoType italicField;
        
        private bool italicFieldSet;
        
        private YesNoType underlineField;
        
        private bool underlineFieldSet;
        
        private YesNoType strikeField;
        
        private bool strikeFieldSet;
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string FaceName
        {
            get
            {
                return this.faceNameField;
            }
            set
            {
                this.faceNameFieldSet = true;
                this.faceNameField = value;
            }
        }
        
        public int Size
        {
            get
            {
                return this.sizeField;
            }
            set
            {
                this.sizeFieldSet = true;
                this.sizeField = value;
            }
        }
        
        public int Red
        {
            get
            {
                return this.redField;
            }
            set
            {
                this.redFieldSet = true;
                this.redField = value;
            }
        }
        
        public int Green
        {
            get
            {
                return this.greenField;
            }
            set
            {
                this.greenFieldSet = true;
                this.greenField = value;
            }
        }
        
        public int Blue
        {
            get
            {
                return this.blueField;
            }
            set
            {
                this.blueFieldSet = true;
                this.blueField = value;
            }
        }
        
        public YesNoType Bold
        {
            get
            {
                return this.boldField;
            }
            set
            {
                this.boldFieldSet = true;
                this.boldField = value;
            }
        }
        
        public YesNoType Italic
        {
            get
            {
                return this.italicField;
            }
            set
            {
                this.italicFieldSet = true;
                this.italicField = value;
            }
        }
        
        public YesNoType Underline
        {
            get
            {
                return this.underlineField;
            }
            set
            {
                this.underlineFieldSet = true;
                this.underlineField = value;
            }
        }
        
        public YesNoType Strike
        {
            get
            {
                return this.strikeField;
            }
            set
            {
                this.strikeFieldSet = true;
                this.strikeField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("TextStyle", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.faceNameFieldSet)
            {
                writer.WriteAttributeString("FaceName", this.faceNameField);
            }
            if (this.sizeFieldSet)
            {
                writer.WriteAttributeString("Size", this.sizeField.ToString());
            }
            if (this.redFieldSet)
            {
                writer.WriteAttributeString("Red", this.redField.ToString());
            }
            if (this.greenFieldSet)
            {
                writer.WriteAttributeString("Green", this.greenField.ToString());
            }
            if (this.blueFieldSet)
            {
                writer.WriteAttributeString("Blue", this.blueField.ToString());
            }
            if (this.boldFieldSet)
            {
                if ((this.boldField == YesNoType.no))
                {
                    writer.WriteAttributeString("Bold", "no");
                }
                if ((this.boldField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Bold", "yes");
                }
            }
            if (this.italicFieldSet)
            {
                if ((this.italicField == YesNoType.no))
                {
                    writer.WriteAttributeString("Italic", "no");
                }
                if ((this.italicField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Italic", "yes");
                }
            }
            if (this.underlineFieldSet)
            {
                if ((this.underlineField == YesNoType.no))
                {
                    writer.WriteAttributeString("Underline", "no");
                }
                if ((this.underlineField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Underline", "yes");
                }
            }
            if (this.strikeFieldSet)
            {
                if ((this.strikeField == YesNoType.no))
                {
                    writer.WriteAttributeString("Strike", "no");
                }
                if ((this.strikeField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Strike", "yes");
                }
            }
            writer.WriteEndElement();
        }
    }
    
    public class ComplianceDrive : ISchemaElement
    {
        
        private ElementCollection children;
        
        public ComplianceDrive()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Choice, 1, 1);
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(DirectorySearch)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(DirectorySearchRef)));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("ComplianceDrive", "http://schemas.microsoft.com/wix/2003/01/wi");
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
    
    public class FileCost : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("FileCost", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class ODBCDriver : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string idField;
        
        private bool idFieldSet;
        
        private string nameField;
        
        private bool nameFieldSet;
        
        private string fileField;
        
        private bool fileFieldSet;
        
        private string setupFileField;
        
        private bool setupFileFieldSet;
        
        public ODBCDriver()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Sequence);
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(Property), 0, -1));
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(ODBCDataSource), 0, -1));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameFieldSet = true;
                this.nameField = value;
            }
        }
        
        public string File
        {
            get
            {
                return this.fileField;
            }
            set
            {
                this.fileFieldSet = true;
                this.fileField = value;
            }
        }
        
        public string SetupFile
        {
            get
            {
                return this.setupFileField;
            }
            set
            {
                this.setupFileFieldSet = true;
                this.setupFileField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("ODBCDriver", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.nameFieldSet)
            {
                writer.WriteAttributeString("Name", this.nameField);
            }
            if (this.fileFieldSet)
            {
                writer.WriteAttributeString("File", this.fileField);
            }
            if (this.setupFileFieldSet)
            {
                writer.WriteAttributeString("SetupFile", this.setupFileField);
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
    
    public class Component : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string idField;
        
        private bool idFieldSet;
        
        private int comPlusFlagsField;
        
        private bool comPlusFlagsFieldSet;
        
        private string diskIdField;
        
        private bool diskIdFieldSet;
        
        private YesNoType driverAddRemoveProgramsField;
        
        private bool driverAddRemoveProgramsFieldSet;
        
        private int driverDeleteFilesField;
        
        private bool driverDeleteFilesFieldSet;
        
        private YesNoType driverForceInstallField;
        
        private bool driverForceInstallFieldSet;
        
        private YesNoType driverLegacyField;
        
        private bool driverLegacyFieldSet;
        
        private YesNoType driverPlugAndPlayPromptField;
        
        private bool driverPlugAndPlayPromptFieldSet;
        
        private int driverSequenceField;
        
        private bool driverSequenceFieldSet;
        
        private string guidField;
        
        private bool guidFieldSet;
        
        private YesNoType keyPathField;
        
        private bool keyPathFieldSet;
        
        private LocationType locationField;
        
        private bool locationFieldSet;
        
        private YesNoType neverOverwriteField;
        
        private bool neverOverwriteFieldSet;
        
        private YesNoType permanentField;
        
        private bool permanentFieldSet;
        
        private YesNoType sharedDllRefCountField;
        
        private bool sharedDllRefCountFieldSet;
        
        private YesNoType transitiveField;
        
        private bool transitiveFieldSet;
        
        private YesNoType win64Field;
        
        private bool win64FieldSet;
        
        public Component()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Choice, 0, -1);
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(AppId)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Category)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Class)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Condition)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(CopyFile)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(CreateFolder)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Environment)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Extension)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(File)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(IniFile)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Interface)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(IsolateComponent)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(ODBCDataSource)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(ODBCDriver)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(ODBCTranslator)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(ProgId)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Registry)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(RemoveFile)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(RemoveFolder)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(ReserveCost)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(ServiceControl)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(ServiceInstall)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Shortcut)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(TypeLib)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Certificate)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(FileShare)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(ServiceConfig)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(SqlDatabase)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(SqlScript)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(SqlString)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(User)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(WebAppPool)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(WebDir)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(WebFilter)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(WebProperty)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(WebServiceExtension)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(WebSite)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(WebVirtualDir)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(ISchemaElement)));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public int ComPlusFlags
        {
            get
            {
                return this.comPlusFlagsField;
            }
            set
            {
                this.comPlusFlagsFieldSet = true;
                this.comPlusFlagsField = value;
            }
        }
        
        public string DiskId
        {
            get
            {
                return this.diskIdField;
            }
            set
            {
                this.diskIdFieldSet = true;
                this.diskIdField = value;
            }
        }
        
        public YesNoType DriverAddRemovePrograms
        {
            get
            {
                return this.driverAddRemoveProgramsField;
            }
            set
            {
                this.driverAddRemoveProgramsFieldSet = true;
                this.driverAddRemoveProgramsField = value;
            }
        }
        
        public int DriverDeleteFiles
        {
            get
            {
                return this.driverDeleteFilesField;
            }
            set
            {
                this.driverDeleteFilesFieldSet = true;
                this.driverDeleteFilesField = value;
            }
        }
        
        public YesNoType DriverForceInstall
        {
            get
            {
                return this.driverForceInstallField;
            }
            set
            {
                this.driverForceInstallFieldSet = true;
                this.driverForceInstallField = value;
            }
        }
        
        public YesNoType DriverLegacy
        {
            get
            {
                return this.driverLegacyField;
            }
            set
            {
                this.driverLegacyFieldSet = true;
                this.driverLegacyField = value;
            }
        }
        
        public YesNoType DriverPlugAndPlayPrompt
        {
            get
            {
                return this.driverPlugAndPlayPromptField;
            }
            set
            {
                this.driverPlugAndPlayPromptFieldSet = true;
                this.driverPlugAndPlayPromptField = value;
            }
        }
        
        public int DriverSequence
        {
            get
            {
                return this.driverSequenceField;
            }
            set
            {
                this.driverSequenceFieldSet = true;
                this.driverSequenceField = value;
            }
        }
        
        public string Guid
        {
            get
            {
                return this.guidField;
            }
            set
            {
                this.guidFieldSet = true;
                this.guidField = value;
            }
        }
        
        public YesNoType KeyPath
        {
            get
            {
                return this.keyPathField;
            }
            set
            {
                this.keyPathFieldSet = true;
                this.keyPathField = value;
            }
        }
        
        public LocationType Location
        {
            get
            {
                return this.locationField;
            }
            set
            {
                this.locationFieldSet = true;
                this.locationField = value;
            }
        }
        
        public YesNoType NeverOverwrite
        {
            get
            {
                return this.neverOverwriteField;
            }
            set
            {
                this.neverOverwriteFieldSet = true;
                this.neverOverwriteField = value;
            }
        }
        
        public YesNoType Permanent
        {
            get
            {
                return this.permanentField;
            }
            set
            {
                this.permanentFieldSet = true;
                this.permanentField = value;
            }
        }
        
        public YesNoType SharedDllRefCount
        {
            get
            {
                return this.sharedDllRefCountField;
            }
            set
            {
                this.sharedDllRefCountFieldSet = true;
                this.sharedDllRefCountField = value;
            }
        }
        
        public YesNoType Transitive
        {
            get
            {
                return this.transitiveField;
            }
            set
            {
                this.transitiveFieldSet = true;
                this.transitiveField = value;
            }
        }
        
        public YesNoType Win64
        {
            get
            {
                return this.win64Field;
            }
            set
            {
                this.win64FieldSet = true;
                this.win64Field = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("Component", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.comPlusFlagsFieldSet)
            {
                writer.WriteAttributeString("ComPlusFlags", this.comPlusFlagsField.ToString());
            }
            if (this.diskIdFieldSet)
            {
                writer.WriteAttributeString("DiskId", this.diskIdField);
            }
            if (this.driverAddRemoveProgramsFieldSet)
            {
                if ((this.driverAddRemoveProgramsField == YesNoType.no))
                {
                    writer.WriteAttributeString("DriverAddRemovePrograms", "no");
                }
                if ((this.driverAddRemoveProgramsField == YesNoType.yes))
                {
                    writer.WriteAttributeString("DriverAddRemovePrograms", "yes");
                }
            }
            if (this.driverDeleteFilesFieldSet)
            {
                writer.WriteAttributeString("DriverDeleteFiles", this.driverDeleteFilesField.ToString());
            }
            if (this.driverForceInstallFieldSet)
            {
                if ((this.driverForceInstallField == YesNoType.no))
                {
                    writer.WriteAttributeString("DriverForceInstall", "no");
                }
                if ((this.driverForceInstallField == YesNoType.yes))
                {
                    writer.WriteAttributeString("DriverForceInstall", "yes");
                }
            }
            if (this.driverLegacyFieldSet)
            {
                if ((this.driverLegacyField == YesNoType.no))
                {
                    writer.WriteAttributeString("DriverLegacy", "no");
                }
                if ((this.driverLegacyField == YesNoType.yes))
                {
                    writer.WriteAttributeString("DriverLegacy", "yes");
                }
            }
            if (this.driverPlugAndPlayPromptFieldSet)
            {
                if ((this.driverPlugAndPlayPromptField == YesNoType.no))
                {
                    writer.WriteAttributeString("DriverPlugAndPlayPrompt", "no");
                }
                if ((this.driverPlugAndPlayPromptField == YesNoType.yes))
                {
                    writer.WriteAttributeString("DriverPlugAndPlayPrompt", "yes");
                }
            }
            if (this.driverSequenceFieldSet)
            {
                writer.WriteAttributeString("DriverSequence", this.driverSequenceField.ToString());
            }
            if (this.guidFieldSet)
            {
                writer.WriteAttributeString("Guid", this.guidField);
            }
            if (this.keyPathFieldSet)
            {
                if ((this.keyPathField == YesNoType.no))
                {
                    writer.WriteAttributeString("KeyPath", "no");
                }
                if ((this.keyPathField == YesNoType.yes))
                {
                    writer.WriteAttributeString("KeyPath", "yes");
                }
            }
            if (this.locationFieldSet)
            {
                if ((this.locationField == LocationType.local))
                {
                    writer.WriteAttributeString("Location", "local");
                }
                if ((this.locationField == LocationType.source))
                {
                    writer.WriteAttributeString("Location", "source");
                }
                if ((this.locationField == LocationType.either))
                {
                    writer.WriteAttributeString("Location", "either");
                }
            }
            if (this.neverOverwriteFieldSet)
            {
                if ((this.neverOverwriteField == YesNoType.no))
                {
                    writer.WriteAttributeString("NeverOverwrite", "no");
                }
                if ((this.neverOverwriteField == YesNoType.yes))
                {
                    writer.WriteAttributeString("NeverOverwrite", "yes");
                }
            }
            if (this.permanentFieldSet)
            {
                if ((this.permanentField == YesNoType.no))
                {
                    writer.WriteAttributeString("Permanent", "no");
                }
                if ((this.permanentField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Permanent", "yes");
                }
            }
            if (this.sharedDllRefCountFieldSet)
            {
                if ((this.sharedDllRefCountField == YesNoType.no))
                {
                    writer.WriteAttributeString("SharedDllRefCount", "no");
                }
                if ((this.sharedDllRefCountField == YesNoType.yes))
                {
                    writer.WriteAttributeString("SharedDllRefCount", "yes");
                }
            }
            if (this.transitiveFieldSet)
            {
                if ((this.transitiveField == YesNoType.no))
                {
                    writer.WriteAttributeString("Transitive", "no");
                }
                if ((this.transitiveField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Transitive", "yes");
                }
            }
            if (this.win64FieldSet)
            {
                if ((this.win64Field == YesNoType.no))
                {
                    writer.WriteAttributeString("Win64", "no");
                }
                if ((this.win64Field == YesNoType.yes))
                {
                    writer.WriteAttributeString("Win64", "yes");
                }
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
        
        public enum LocationType
        {
            
            local,
            
            source,
            
            either,
        }
    }
    
    public class WebLog : ISchemaElement
    {
        
        private string idField;
        
        private bool idFieldSet;
        
        private TypeType typeField;
        
        private bool typeFieldSet;
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public TypeType Type
        {
            get
            {
                return this.typeField;
            }
            set
            {
                this.typeFieldSet = true;
                this.typeField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("WebLog", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.typeFieldSet)
            {
                if ((this.typeField == TypeType.IIS))
                {
                    writer.WriteAttributeString("Type", "IIS");
                }
                if ((this.typeField == TypeType.NCSA))
                {
                    writer.WriteAttributeString("Type", "NCSA");
                }
                if ((this.typeField == TypeType.ODBC))
                {
                    writer.WriteAttributeString("Type", "ODBC");
                }
                if ((this.typeField == TypeType.W3C))
                {
                    writer.WriteAttributeString("Type", "W3C");
                }
            }
            writer.WriteEndElement();
        }
        
        public enum TypeType
        {
            
            IIS,
            
            NCSA,
            
            ODBC,
            
            W3C,
        }
    }
    
    public class RegisterComPlus : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("RegisterComPlus", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class Billboard : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string idField;
        
        private bool idFieldSet;
        
        private string featureField;
        
        private bool featureFieldSet;
        
        public Billboard()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Sequence);
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(Control), 0, -1));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string Feature
        {
            get
            {
                return this.featureField;
            }
            set
            {
                this.featureFieldSet = true;
                this.featureField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("Billboard", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.featureFieldSet)
            {
                writer.WriteAttributeString("Feature", this.featureField);
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
    
    public class RegisterProduct : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("RegisterProduct", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class UIText : ISchemaElement
    {
        
        private string idField;
        
        private bool idFieldSet;
        
        private string contentField;
        
        private bool contentFieldSet;
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string Content
        {
            get
            {
                return this.contentField;
            }
            set
            {
                this.contentFieldSet = true;
                this.contentField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("UIText", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.contentFieldSet)
            {
                writer.WriteString(this.contentField);
            }
            writer.WriteEndElement();
        }
    }
    
    public class Environment : ISchemaElement
    {
        
        private string idField;
        
        private bool idFieldSet;
        
        private string nameField;
        
        private bool nameFieldSet;
        
        private string valueField;
        
        private bool valueFieldSet;
        
        private string separatorField;
        
        private bool separatorFieldSet;
        
        private ActionType actionField;
        
        private bool actionFieldSet;
        
        private PartType partField;
        
        private bool partFieldSet;
        
        private YesNoType permanentField;
        
        private bool permanentFieldSet;
        
        private YesNoType systemField;
        
        private bool systemFieldSet;
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameFieldSet = true;
                this.nameField = value;
            }
        }
        
        public string Value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueFieldSet = true;
                this.valueField = value;
            }
        }
        
        public string Separator
        {
            get
            {
                return this.separatorField;
            }
            set
            {
                this.separatorFieldSet = true;
                this.separatorField = value;
            }
        }
        
        public ActionType Action
        {
            get
            {
                return this.actionField;
            }
            set
            {
                this.actionFieldSet = true;
                this.actionField = value;
            }
        }
        
        public PartType Part
        {
            get
            {
                return this.partField;
            }
            set
            {
                this.partFieldSet = true;
                this.partField = value;
            }
        }
        
        public YesNoType Permanent
        {
            get
            {
                return this.permanentField;
            }
            set
            {
                this.permanentFieldSet = true;
                this.permanentField = value;
            }
        }
        
        public YesNoType System
        {
            get
            {
                return this.systemField;
            }
            set
            {
                this.systemFieldSet = true;
                this.systemField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("Environment", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.nameFieldSet)
            {
                writer.WriteAttributeString("Name", this.nameField);
            }
            if (this.valueFieldSet)
            {
                writer.WriteAttributeString("Value", this.valueField);
            }
            if (this.separatorFieldSet)
            {
                writer.WriteAttributeString("Separator", this.separatorField);
            }
            if (this.actionFieldSet)
            {
                if ((this.actionField == ActionType.create))
                {
                    writer.WriteAttributeString("Action", "create");
                }
                if ((this.actionField == ActionType.set))
                {
                    writer.WriteAttributeString("Action", "set");
                }
                if ((this.actionField == ActionType.remove))
                {
                    writer.WriteAttributeString("Action", "remove");
                }
            }
            if (this.partFieldSet)
            {
                if ((this.partField == PartType.all))
                {
                    writer.WriteAttributeString("Part", "all");
                }
                if ((this.partField == PartType.first))
                {
                    writer.WriteAttributeString("Part", "first");
                }
                if ((this.partField == PartType.last))
                {
                    writer.WriteAttributeString("Part", "last");
                }
            }
            if (this.permanentFieldSet)
            {
                if ((this.permanentField == YesNoType.no))
                {
                    writer.WriteAttributeString("Permanent", "no");
                }
                if ((this.permanentField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Permanent", "yes");
                }
            }
            if (this.systemFieldSet)
            {
                if ((this.systemField == YesNoType.no))
                {
                    writer.WriteAttributeString("System", "no");
                }
                if ((this.systemField == YesNoType.yes))
                {
                    writer.WriteAttributeString("System", "yes");
                }
            }
            writer.WriteEndElement();
        }
        
        public enum ActionType
        {
            
            create,
            
            set,
            
            remove,
        }
        
        public enum PartType
        {
            
            all,
            
            first,
            
            last,
        }
    }
    
    public class FeatureRef : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string idField;
        
        private bool idFieldSet;
        
        public FeatureRef()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Choice, 0, -1);
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(ComponentGroupRef)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(ComponentRef)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Feature)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(FeatureRef)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(MergeRef)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(ISchemaElement)));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("FeatureRef", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
    
    public class Binary : ISchemaElement
    {
        
        private string idField;
        
        private bool idFieldSet;
        
        private string srcField;
        
        private bool srcFieldSet;
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string src
        {
            get
            {
                return this.srcField;
            }
            set
            {
                this.srcFieldSet = true;
                this.srcField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("Binary", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.srcFieldSet)
            {
                writer.WriteAttributeString("src", this.srcField);
            }
            writer.WriteEndElement();
        }
    }
    
    public class SqlFileSpec : ISchemaElement
    {
        
        private string idField;
        
        private bool idFieldSet;
        
        private string nameField;
        
        private bool nameFieldSet;
        
        private string filenameField;
        
        private bool filenameFieldSet;
        
        private string sizeField;
        
        private bool sizeFieldSet;
        
        private string maxSizeField;
        
        private bool maxSizeFieldSet;
        
        private string growthSizeField;
        
        private bool growthSizeFieldSet;
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameFieldSet = true;
                this.nameField = value;
            }
        }
        
        public string Filename
        {
            get
            {
                return this.filenameField;
            }
            set
            {
                this.filenameFieldSet = true;
                this.filenameField = value;
            }
        }
        
        public string Size
        {
            get
            {
                return this.sizeField;
            }
            set
            {
                this.sizeFieldSet = true;
                this.sizeField = value;
            }
        }
        
        public string MaxSize
        {
            get
            {
                return this.maxSizeField;
            }
            set
            {
                this.maxSizeFieldSet = true;
                this.maxSizeField = value;
            }
        }
        
        public string GrowthSize
        {
            get
            {
                return this.growthSizeField;
            }
            set
            {
                this.growthSizeFieldSet = true;
                this.growthSizeField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("SqlFileSpec", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.nameFieldSet)
            {
                writer.WriteAttributeString("Name", this.nameField);
            }
            if (this.filenameFieldSet)
            {
                writer.WriteAttributeString("Filename", this.filenameField);
            }
            if (this.sizeFieldSet)
            {
                writer.WriteAttributeString("Size", this.sizeField);
            }
            if (this.maxSizeFieldSet)
            {
                writer.WriteAttributeString("MaxSize", this.maxSizeField);
            }
            if (this.growthSizeFieldSet)
            {
                writer.WriteAttributeString("GrowthSize", this.growthSizeField);
            }
            writer.WriteEndElement();
        }
    }
    
    public class CreateShortcuts : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("CreateShortcuts", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class DisableRollback : ActionModuleSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("DisableRollback", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class FileShare : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string idField;
        
        private bool idFieldSet;
        
        private string nameField;
        
        private bool nameFieldSet;
        
        private string descriptionField;
        
        private bool descriptionFieldSet;
        
        public FileShare()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Sequence);
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(Permission), 1, -1));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameFieldSet = true;
                this.nameField = value;
            }
        }
        
        public string Description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionFieldSet = true;
                this.descriptionField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("FileShare", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.nameFieldSet)
            {
                writer.WriteAttributeString("Name", this.nameField);
            }
            if (this.descriptionFieldSet)
            {
                writer.WriteAttributeString("Description", this.descriptionField);
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
    
    public class Certificate : ISchemaElement
    {
        
        private string idField;
        
        private bool idFieldSet;
        
        private StoreNameType storeNameField;
        
        private bool storeNameFieldSet;
        
        private StoreLocationType storeLocationField;
        
        private bool storeLocationFieldSet;
        
        private YesNoType overwriteField;
        
        private bool overwriteFieldSet;
        
        private YesNoType requestField;
        
        private bool requestFieldSet;
        
        private string binaryKeyField;
        
        private bool binaryKeyFieldSet;
        
        private string certificatePathField;
        
        private bool certificatePathFieldSet;
        
        private string pFXPasswordField;
        
        private bool pFXPasswordFieldSet;
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public StoreNameType StoreName
        {
            get
            {
                return this.storeNameField;
            }
            set
            {
                this.storeNameFieldSet = true;
                this.storeNameField = value;
            }
        }
        
        public StoreLocationType StoreLocation
        {
            get
            {
                return this.storeLocationField;
            }
            set
            {
                this.storeLocationFieldSet = true;
                this.storeLocationField = value;
            }
        }
        
        public YesNoType Overwrite
        {
            get
            {
                return this.overwriteField;
            }
            set
            {
                this.overwriteFieldSet = true;
                this.overwriteField = value;
            }
        }
        
        public YesNoType Request
        {
            get
            {
                return this.requestField;
            }
            set
            {
                this.requestFieldSet = true;
                this.requestField = value;
            }
        }
        
        public string BinaryKey
        {
            get
            {
                return this.binaryKeyField;
            }
            set
            {
                this.binaryKeyFieldSet = true;
                this.binaryKeyField = value;
            }
        }
        
        public string CertificatePath
        {
            get
            {
                return this.certificatePathField;
            }
            set
            {
                this.certificatePathFieldSet = true;
                this.certificatePathField = value;
            }
        }
        
        public string PFXPassword
        {
            get
            {
                return this.pFXPasswordField;
            }
            set
            {
                this.pFXPasswordFieldSet = true;
                this.pFXPasswordField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("Certificate", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.storeNameFieldSet)
            {
                if ((this.storeNameField == StoreNameType.ca))
                {
                    writer.WriteAttributeString("StoreName", "ca");
                }
                if ((this.storeNameField == StoreNameType.my))
                {
                    writer.WriteAttributeString("StoreName", "my");
                }
                if ((this.storeNameField == StoreNameType.request))
                {
                    writer.WriteAttributeString("StoreName", "request");
                }
                if ((this.storeNameField == StoreNameType.root))
                {
                    writer.WriteAttributeString("StoreName", "root");
                }
            }
            if (this.storeLocationFieldSet)
            {
                if ((this.storeLocationField == StoreLocationType.currentUser))
                {
                    writer.WriteAttributeString("StoreLocation", "currentUser");
                }
                if ((this.storeLocationField == StoreLocationType.localMachine))
                {
                    writer.WriteAttributeString("StoreLocation", "localMachine");
                }
            }
            if (this.overwriteFieldSet)
            {
                if ((this.overwriteField == YesNoType.no))
                {
                    writer.WriteAttributeString("Overwrite", "no");
                }
                if ((this.overwriteField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Overwrite", "yes");
                }
            }
            if (this.requestFieldSet)
            {
                if ((this.requestField == YesNoType.no))
                {
                    writer.WriteAttributeString("Request", "no");
                }
                if ((this.requestField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Request", "yes");
                }
            }
            if (this.binaryKeyFieldSet)
            {
                writer.WriteAttributeString("BinaryKey", this.binaryKeyField);
            }
            if (this.certificatePathFieldSet)
            {
                writer.WriteAttributeString("CertificatePath", this.certificatePathField);
            }
            if (this.pFXPasswordFieldSet)
            {
                writer.WriteAttributeString("PFXPassword", this.pFXPasswordField);
            }
            writer.WriteEndElement();
        }
        
        public enum StoreNameType
        {
            
            ca,
            
            my,
            
            request,
            
            root,
        }
        
        public enum StoreLocationType
        {
            
            currentUser,
            
            localMachine,
        }
    }
    
    public class PatchPackage : ISchemaElement
    {
        
        private string contentField;
        
        private bool contentFieldSet;
        
        public string Content
        {
            get
            {
                return this.contentField;
            }
            set
            {
                this.contentFieldSet = true;
                this.contentField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("PatchPackage", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.contentFieldSet)
            {
                writer.WriteString(this.contentField);
            }
            writer.WriteEndElement();
        }
    }
    
    public class Class : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string idField;
        
        private bool idFieldSet;
        
        private ClassContextType contextField;
        
        private bool contextFieldSet;
        
        private string descriptionField;
        
        private bool descriptionFieldSet;
        
        private string appIdField;
        
        private bool appIdFieldSet;
        
        private string iconField;
        
        private bool iconFieldSet;
        
        private int iconIndexField;
        
        private bool iconIndexFieldSet;
        
        private string handlerField;
        
        private bool handlerFieldSet;
        
        private string argumentField;
        
        private bool argumentFieldSet;
        
        private YesNoType relativePathField;
        
        private bool relativePathFieldSet;
        
        private YesNoType advertiseField;
        
        private bool advertiseFieldSet;
        
        private ThreadingModelType threadingModelField;
        
        private bool threadingModelFieldSet;
        
        private string versionField;
        
        private bool versionFieldSet;
        
        private YesNoType insertableField;
        
        private bool insertableFieldSet;
        
        private YesNoType programmableField;
        
        private bool programmableFieldSet;
        
        private string serverField;
        
        private bool serverFieldSet;
        
        private YesNoType safeForScriptingField;
        
        private bool safeForScriptingFieldSet;
        
        private YesNoType safeForInitializingField;
        
        private bool safeForInitializingFieldSet;
        
        private YesNoType controlField;
        
        private bool controlFieldSet;
        
        public Class()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Choice, 0, -1);
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(ProgId)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(FileTypeMask)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Interface)));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public ClassContextType Context
        {
            get
            {
                return this.contextField;
            }
            set
            {
                this.contextFieldSet = true;
                this.contextField = value;
            }
        }
        
        public string Description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionFieldSet = true;
                this.descriptionField = value;
            }
        }
        
        public string AppId
        {
            get
            {
                return this.appIdField;
            }
            set
            {
                this.appIdFieldSet = true;
                this.appIdField = value;
            }
        }
        
        public string Icon
        {
            get
            {
                return this.iconField;
            }
            set
            {
                this.iconFieldSet = true;
                this.iconField = value;
            }
        }
        
        public int IconIndex
        {
            get
            {
                return this.iconIndexField;
            }
            set
            {
                this.iconIndexFieldSet = true;
                this.iconIndexField = value;
            }
        }
        
        public string Handler
        {
            get
            {
                return this.handlerField;
            }
            set
            {
                this.handlerFieldSet = true;
                this.handlerField = value;
            }
        }
        
        public string Argument
        {
            get
            {
                return this.argumentField;
            }
            set
            {
                this.argumentFieldSet = true;
                this.argumentField = value;
            }
        }
        
        public YesNoType RelativePath
        {
            get
            {
                return this.relativePathField;
            }
            set
            {
                this.relativePathFieldSet = true;
                this.relativePathField = value;
            }
        }
        
        public YesNoType Advertise
        {
            get
            {
                return this.advertiseField;
            }
            set
            {
                this.advertiseFieldSet = true;
                this.advertiseField = value;
            }
        }
        
        public ThreadingModelType ThreadingModel
        {
            get
            {
                return this.threadingModelField;
            }
            set
            {
                this.threadingModelFieldSet = true;
                this.threadingModelField = value;
            }
        }
        
        public string Version
        {
            get
            {
                return this.versionField;
            }
            set
            {
                this.versionFieldSet = true;
                this.versionField = value;
            }
        }
        
        public YesNoType Insertable
        {
            get
            {
                return this.insertableField;
            }
            set
            {
                this.insertableFieldSet = true;
                this.insertableField = value;
            }
        }
        
        public YesNoType Programmable
        {
            get
            {
                return this.programmableField;
            }
            set
            {
                this.programmableFieldSet = true;
                this.programmableField = value;
            }
        }
        
        public string Server
        {
            get
            {
                return this.serverField;
            }
            set
            {
                this.serverFieldSet = true;
                this.serverField = value;
            }
        }
        
        public YesNoType SafeForScripting
        {
            get
            {
                return this.safeForScriptingField;
            }
            set
            {
                this.safeForScriptingFieldSet = true;
                this.safeForScriptingField = value;
            }
        }
        
        public YesNoType SafeForInitializing
        {
            get
            {
                return this.safeForInitializingField;
            }
            set
            {
                this.safeForInitializingFieldSet = true;
                this.safeForInitializingField = value;
            }
        }
        
        public YesNoType Control
        {
            get
            {
                return this.controlField;
            }
            set
            {
                this.controlFieldSet = true;
                this.controlField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("Class", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.contextFieldSet)
            {
                string outputValue = "";
                if (((this.contextField & ClassContextType.LocalServer) 
                            != 0))
                {
                    if ((outputValue.Length != 0))
                    {
                        outputValue = (outputValue + " ");
                    }
                    outputValue = (outputValue + "LocalServer");
                }
                if (((this.contextField & ClassContextType.LocalServer32) 
                            != 0))
                {
                    if ((outputValue.Length != 0))
                    {
                        outputValue = (outputValue + " ");
                    }
                    outputValue = (outputValue + "LocalServer32");
                }
                if (((this.contextField & ClassContextType.InprocServer) 
                            != 0))
                {
                    if ((outputValue.Length != 0))
                    {
                        outputValue = (outputValue + " ");
                    }
                    outputValue = (outputValue + "InprocServer");
                }
                if (((this.contextField & ClassContextType.InprocServer32) 
                            != 0))
                {
                    if ((outputValue.Length != 0))
                    {
                        outputValue = (outputValue + " ");
                    }
                    outputValue = (outputValue + "InprocServer32");
                }
                writer.WriteAttributeString("Context", outputValue);
            }
            if (this.descriptionFieldSet)
            {
                writer.WriteAttributeString("Description", this.descriptionField);
            }
            if (this.appIdFieldSet)
            {
                writer.WriteAttributeString("AppId", this.appIdField);
            }
            if (this.iconFieldSet)
            {
                writer.WriteAttributeString("Icon", this.iconField);
            }
            if (this.iconIndexFieldSet)
            {
                writer.WriteAttributeString("IconIndex", this.iconIndexField.ToString());
            }
            if (this.handlerFieldSet)
            {
                writer.WriteAttributeString("Handler", this.handlerField);
            }
            if (this.argumentFieldSet)
            {
                writer.WriteAttributeString("Argument", this.argumentField);
            }
            if (this.relativePathFieldSet)
            {
                if ((this.relativePathField == YesNoType.no))
                {
                    writer.WriteAttributeString("RelativePath", "no");
                }
                if ((this.relativePathField == YesNoType.yes))
                {
                    writer.WriteAttributeString("RelativePath", "yes");
                }
            }
            if (this.advertiseFieldSet)
            {
                if ((this.advertiseField == YesNoType.no))
                {
                    writer.WriteAttributeString("Advertise", "no");
                }
                if ((this.advertiseField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Advertise", "yes");
                }
            }
            if (this.threadingModelFieldSet)
            {
                if ((this.threadingModelField == ThreadingModelType.apartment))
                {
                    writer.WriteAttributeString("ThreadingModel", "apartment");
                }
                if ((this.threadingModelField == ThreadingModelType.free))
                {
                    writer.WriteAttributeString("ThreadingModel", "free");
                }
                if ((this.threadingModelField == ThreadingModelType.both))
                {
                    writer.WriteAttributeString("ThreadingModel", "both");
                }
                if ((this.threadingModelField == ThreadingModelType.neutral))
                {
                    writer.WriteAttributeString("ThreadingModel", "neutral");
                }
                if ((this.threadingModelField == ThreadingModelType.single))
                {
                    writer.WriteAttributeString("ThreadingModel", "single");
                }
                if ((this.threadingModelField == ThreadingModelType.rental))
                {
                    writer.WriteAttributeString("ThreadingModel", "rental");
                }
            }
            if (this.versionFieldSet)
            {
                writer.WriteAttributeString("Version", this.versionField);
            }
            if (this.insertableFieldSet)
            {
                if ((this.insertableField == YesNoType.no))
                {
                    writer.WriteAttributeString("Insertable", "no");
                }
                if ((this.insertableField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Insertable", "yes");
                }
            }
            if (this.programmableFieldSet)
            {
                if ((this.programmableField == YesNoType.no))
                {
                    writer.WriteAttributeString("Programmable", "no");
                }
                if ((this.programmableField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Programmable", "yes");
                }
            }
            if (this.serverFieldSet)
            {
                writer.WriteAttributeString("Server", this.serverField);
            }
            if (this.safeForScriptingFieldSet)
            {
                if ((this.safeForScriptingField == YesNoType.no))
                {
                    writer.WriteAttributeString("SafeForScripting", "no");
                }
                if ((this.safeForScriptingField == YesNoType.yes))
                {
                    writer.WriteAttributeString("SafeForScripting", "yes");
                }
            }
            if (this.safeForInitializingFieldSet)
            {
                if ((this.safeForInitializingField == YesNoType.no))
                {
                    writer.WriteAttributeString("SafeForInitializing", "no");
                }
                if ((this.safeForInitializingField == YesNoType.yes))
                {
                    writer.WriteAttributeString("SafeForInitializing", "yes");
                }
            }
            if (this.controlFieldSet)
            {
                if ((this.controlField == YesNoType.no))
                {
                    writer.WriteAttributeString("Control", "no");
                }
                if ((this.controlField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Control", "yes");
                }
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
        
        public enum ThreadingModelType
        {
            
            apartment,
            
            free,
            
            both,
            
            neutral,
            
            single,
            
            rental,
        }
    }
    
    public class Column : ISchemaElement
    {
        
        private string idField;
        
        private bool idFieldSet;
        
        private YesNoType primaryKeyField;
        
        private bool primaryKeyFieldSet;
        
        private TypeType typeField;
        
        private bool typeFieldSet;
        
        private int widthField;
        
        private bool widthFieldSet;
        
        private YesNoType nullableField;
        
        private bool nullableFieldSet;
        
        private YesNoType localizableField;
        
        private bool localizableFieldSet;
        
        private int minValueField;
        
        private bool minValueFieldSet;
        
        private int maxValueField;
        
        private bool maxValueFieldSet;
        
        private string keyTableField;
        
        private bool keyTableFieldSet;
        
        private int keyColumnField;
        
        private bool keyColumnFieldSet;
        
        private CategoryType categoryField;
        
        private bool categoryFieldSet;
        
        private string setField;
        
        private bool setFieldSet;
        
        private string descriptionField;
        
        private bool descriptionFieldSet;
        
        private ModularizeType modularizeField;
        
        private bool modularizeFieldSet;
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public YesNoType PrimaryKey
        {
            get
            {
                return this.primaryKeyField;
            }
            set
            {
                this.primaryKeyFieldSet = true;
                this.primaryKeyField = value;
            }
        }
        
        public TypeType Type
        {
            get
            {
                return this.typeField;
            }
            set
            {
                this.typeFieldSet = true;
                this.typeField = value;
            }
        }
        
        public int Width
        {
            get
            {
                return this.widthField;
            }
            set
            {
                this.widthFieldSet = true;
                this.widthField = value;
            }
        }
        
        public YesNoType Nullable
        {
            get
            {
                return this.nullableField;
            }
            set
            {
                this.nullableFieldSet = true;
                this.nullableField = value;
            }
        }
        
        public YesNoType Localizable
        {
            get
            {
                return this.localizableField;
            }
            set
            {
                this.localizableFieldSet = true;
                this.localizableField = value;
            }
        }
        
        public int MinValue
        {
            get
            {
                return this.minValueField;
            }
            set
            {
                this.minValueFieldSet = true;
                this.minValueField = value;
            }
        }
        
        public int MaxValue
        {
            get
            {
                return this.maxValueField;
            }
            set
            {
                this.maxValueFieldSet = true;
                this.maxValueField = value;
            }
        }
        
        public string KeyTable
        {
            get
            {
                return this.keyTableField;
            }
            set
            {
                this.keyTableFieldSet = true;
                this.keyTableField = value;
            }
        }
        
        public int KeyColumn
        {
            get
            {
                return this.keyColumnField;
            }
            set
            {
                this.keyColumnFieldSet = true;
                this.keyColumnField = value;
            }
        }
        
        public CategoryType Category
        {
            get
            {
                return this.categoryField;
            }
            set
            {
                this.categoryFieldSet = true;
                this.categoryField = value;
            }
        }
        
        public string Set
        {
            get
            {
                return this.setField;
            }
            set
            {
                this.setFieldSet = true;
                this.setField = value;
            }
        }
        
        public string Description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionFieldSet = true;
                this.descriptionField = value;
            }
        }
        
        public ModularizeType Modularize
        {
            get
            {
                return this.modularizeField;
            }
            set
            {
                this.modularizeFieldSet = true;
                this.modularizeField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("Column", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.primaryKeyFieldSet)
            {
                if ((this.primaryKeyField == YesNoType.no))
                {
                    writer.WriteAttributeString("PrimaryKey", "no");
                }
                if ((this.primaryKeyField == YesNoType.yes))
                {
                    writer.WriteAttributeString("PrimaryKey", "yes");
                }
            }
            if (this.typeFieldSet)
            {
                if ((this.typeField == TypeType.binary))
                {
                    writer.WriteAttributeString("Type", "binary");
                }
                if ((this.typeField == TypeType.@int))
                {
                    writer.WriteAttributeString("Type", "int");
                }
                if ((this.typeField == TypeType.@string))
                {
                    writer.WriteAttributeString("Type", "string");
                }
            }
            if (this.widthFieldSet)
            {
                writer.WriteAttributeString("Width", this.widthField.ToString());
            }
            if (this.nullableFieldSet)
            {
                if ((this.nullableField == YesNoType.no))
                {
                    writer.WriteAttributeString("Nullable", "no");
                }
                if ((this.nullableField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Nullable", "yes");
                }
            }
            if (this.localizableFieldSet)
            {
                if ((this.localizableField == YesNoType.no))
                {
                    writer.WriteAttributeString("Localizable", "no");
                }
                if ((this.localizableField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Localizable", "yes");
                }
            }
            if (this.minValueFieldSet)
            {
                writer.WriteAttributeString("MinValue", this.minValueField.ToString());
            }
            if (this.maxValueFieldSet)
            {
                writer.WriteAttributeString("MaxValue", this.maxValueField.ToString());
            }
            if (this.keyTableFieldSet)
            {
                writer.WriteAttributeString("KeyTable", this.keyTableField);
            }
            if (this.keyColumnFieldSet)
            {
                writer.WriteAttributeString("KeyColumn", this.keyColumnField.ToString());
            }
            if (this.categoryFieldSet)
            {
                if ((this.categoryField == CategoryType.Text))
                {
                    writer.WriteAttributeString("Category", "Text");
                }
                if ((this.categoryField == CategoryType.UpperCase))
                {
                    writer.WriteAttributeString("Category", "UpperCase");
                }
                if ((this.categoryField == CategoryType.LowerCase))
                {
                    writer.WriteAttributeString("Category", "LowerCase");
                }
                if ((this.categoryField == CategoryType.Integer))
                {
                    writer.WriteAttributeString("Category", "Integer");
                }
                if ((this.categoryField == CategoryType.DoubleInteger))
                {
                    writer.WriteAttributeString("Category", "DoubleInteger");
                }
                if ((this.categoryField == CategoryType.TimeDate))
                {
                    writer.WriteAttributeString("Category", "TimeDate");
                }
                if ((this.categoryField == CategoryType.Identifier))
                {
                    writer.WriteAttributeString("Category", "Identifier");
                }
                if ((this.categoryField == CategoryType.Property))
                {
                    writer.WriteAttributeString("Category", "Property");
                }
                if ((this.categoryField == CategoryType.Filename))
                {
                    writer.WriteAttributeString("Category", "Filename");
                }
                if ((this.categoryField == CategoryType.WildCardFilename))
                {
                    writer.WriteAttributeString("Category", "WildCardFilename");
                }
                if ((this.categoryField == CategoryType.Path))
                {
                    writer.WriteAttributeString("Category", "Path");
                }
                if ((this.categoryField == CategoryType.Paths))
                {
                    writer.WriteAttributeString("Category", "Paths");
                }
                if ((this.categoryField == CategoryType.AnyPath))
                {
                    writer.WriteAttributeString("Category", "AnyPath");
                }
                if ((this.categoryField == CategoryType.DefaultDir))
                {
                    writer.WriteAttributeString("Category", "DefaultDir");
                }
                if ((this.categoryField == CategoryType.RegPath))
                {
                    writer.WriteAttributeString("Category", "RegPath");
                }
                if ((this.categoryField == CategoryType.Formatted))
                {
                    writer.WriteAttributeString("Category", "Formatted");
                }
                if ((this.categoryField == CategoryType.Template))
                {
                    writer.WriteAttributeString("Category", "Template");
                }
                if ((this.categoryField == CategoryType.Condition))
                {
                    writer.WriteAttributeString("Category", "Condition");
                }
                if ((this.categoryField == CategoryType.Guid))
                {
                    writer.WriteAttributeString("Category", "Guid");
                }
                if ((this.categoryField == CategoryType.Version))
                {
                    writer.WriteAttributeString("Category", "Version");
                }
                if ((this.categoryField == CategoryType.Language))
                {
                    writer.WriteAttributeString("Category", "Language");
                }
                if ((this.categoryField == CategoryType.Binary))
                {
                    writer.WriteAttributeString("Category", "Binary");
                }
                if ((this.categoryField == CategoryType.CustomSource))
                {
                    writer.WriteAttributeString("Category", "CustomSource");
                }
                if ((this.categoryField == CategoryType.Cabinet))
                {
                    writer.WriteAttributeString("Category", "Cabinet");
                }
                if ((this.categoryField == CategoryType.Shortcut))
                {
                    writer.WriteAttributeString("Category", "Shortcut");
                }
            }
            if (this.setFieldSet)
            {
                writer.WriteAttributeString("Set", this.setField);
            }
            if (this.descriptionFieldSet)
            {
                writer.WriteAttributeString("Description", this.descriptionField);
            }
            if (this.modularizeFieldSet)
            {
                if ((this.modularizeField == ModularizeType.None))
                {
                    writer.WriteAttributeString("Modularize", "None");
                }
                if ((this.modularizeField == ModularizeType.Column))
                {
                    writer.WriteAttributeString("Modularize", "Column");
                }
                if ((this.modularizeField == ModularizeType.Property))
                {
                    writer.WriteAttributeString("Modularize", "Property");
                }
                if ((this.modularizeField == ModularizeType.Condition))
                {
                    writer.WriteAttributeString("Modularize", "Condition");
                }
                if ((this.modularizeField == ModularizeType.CompanionFile))
                {
                    writer.WriteAttributeString("Modularize", "CompanionFile");
                }
                if ((this.modularizeField == ModularizeType.SemicolonDelimited))
                {
                    writer.WriteAttributeString("Modularize", "SemicolonDelimited");
                }
            }
            writer.WriteEndElement();
        }
        
        public enum TypeType
        {
            
            binary,
            
            @int,
            
            @string,
        }
        
        public enum CategoryType
        {
            
            Text,
            
            UpperCase,
            
            LowerCase,
            
            Integer,
            
            DoubleInteger,
            
            TimeDate,
            
            Identifier,
            
            Property,
            
            Filename,
            
            WildCardFilename,
            
            Path,
            
            Paths,
            
            AnyPath,
            
            DefaultDir,
            
            RegPath,
            
            Formatted,
            
            Template,
            
            Condition,
            
            Guid,
            
            Version,
            
            Language,
            
            Binary,
            
            CustomSource,
            
            Cabinet,
            
            Shortcut,
        }
    }
    
    public class Family : ISchemaElement
    {
        
        private ElementCollection children;
        
        private int diskIdField;
        
        private bool diskIdFieldSet;
        
        private string diskPromptField;
        
        private bool diskPromptFieldSet;
        
        private string mediaSrcPropField;
        
        private bool mediaSrcPropFieldSet;
        
        private string nameField;
        
        private bool nameFieldSet;
        
        private int sequenceStartField;
        
        private bool sequenceStartFieldSet;
        
        private string volumeLabelField;
        
        private bool volumeLabelFieldSet;
        
        public Family()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Sequence);
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(UpgradeImage), 1, -1));
            ElementCollection childCollection1 = new ElementCollection(ElementCollection.CollectionType.Choice, 0, -1);
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(ExternalFile)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(ProtectFile)));
            childCollection0.AddCollection(childCollection1);
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public int DiskId
        {
            get
            {
                return this.diskIdField;
            }
            set
            {
                this.diskIdFieldSet = true;
                this.diskIdField = value;
            }
        }
        
        public string DiskPrompt
        {
            get
            {
                return this.diskPromptField;
            }
            set
            {
                this.diskPromptFieldSet = true;
                this.diskPromptField = value;
            }
        }
        
        public string MediaSrcProp
        {
            get
            {
                return this.mediaSrcPropField;
            }
            set
            {
                this.mediaSrcPropFieldSet = true;
                this.mediaSrcPropField = value;
            }
        }
        
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameFieldSet = true;
                this.nameField = value;
            }
        }
        
        public int SequenceStart
        {
            get
            {
                return this.sequenceStartField;
            }
            set
            {
                this.sequenceStartFieldSet = true;
                this.sequenceStartField = value;
            }
        }
        
        public string VolumeLabel
        {
            get
            {
                return this.volumeLabelField;
            }
            set
            {
                this.volumeLabelFieldSet = true;
                this.volumeLabelField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("Family", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.diskIdFieldSet)
            {
                writer.WriteAttributeString("DiskId", this.diskIdField.ToString());
            }
            if (this.diskPromptFieldSet)
            {
                writer.WriteAttributeString("DiskPrompt", this.diskPromptField);
            }
            if (this.mediaSrcPropFieldSet)
            {
                writer.WriteAttributeString("MediaSrcProp", this.mediaSrcPropField);
            }
            if (this.nameFieldSet)
            {
                writer.WriteAttributeString("Name", this.nameField);
            }
            if (this.sequenceStartFieldSet)
            {
                writer.WriteAttributeString("SequenceStart", this.sequenceStartField.ToString());
            }
            if (this.volumeLabelFieldSet)
            {
                writer.WriteAttributeString("VolumeLabel", this.volumeLabelField);
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
    
    public class SqlString : ISchemaElement
    {
        
        private string idField;
        
        private bool idFieldSet;
        
        private string sQLField;
        
        private bool sQLFieldSet;
        
        private string userField;
        
        private bool userFieldSet;
        
        private string sqlDbField;
        
        private bool sqlDbFieldSet;
        
        private YesNoType executeOnInstallField;
        
        private bool executeOnInstallFieldSet;
        
        private YesNoType executeOnReInstallField;
        
        private bool executeOnReInstallFieldSet;
        
        private YesNoType executeOnUninstallField;
        
        private bool executeOnUninstallFieldSet;
        
        private YesNoType rollbackOnInstallField;
        
        private bool rollbackOnInstallFieldSet;
        
        private YesNoType rollbackOnUninstallField;
        
        private bool rollbackOnUninstallFieldSet;
        
        private YesNoType continueOnErrorField;
        
        private bool continueOnErrorFieldSet;
        
        private int sequenceField;
        
        private bool sequenceFieldSet;
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string SQL
        {
            get
            {
                return this.sQLField;
            }
            set
            {
                this.sQLFieldSet = true;
                this.sQLField = value;
            }
        }
        
        public string User
        {
            get
            {
                return this.userField;
            }
            set
            {
                this.userFieldSet = true;
                this.userField = value;
            }
        }
        
        public string SqlDb
        {
            get
            {
                return this.sqlDbField;
            }
            set
            {
                this.sqlDbFieldSet = true;
                this.sqlDbField = value;
            }
        }
        
        public YesNoType ExecuteOnInstall
        {
            get
            {
                return this.executeOnInstallField;
            }
            set
            {
                this.executeOnInstallFieldSet = true;
                this.executeOnInstallField = value;
            }
        }
        
        public YesNoType ExecuteOnReInstall
        {
            get
            {
                return this.executeOnReInstallField;
            }
            set
            {
                this.executeOnReInstallFieldSet = true;
                this.executeOnReInstallField = value;
            }
        }
        
        public YesNoType ExecuteOnUninstall
        {
            get
            {
                return this.executeOnUninstallField;
            }
            set
            {
                this.executeOnUninstallFieldSet = true;
                this.executeOnUninstallField = value;
            }
        }
        
        public YesNoType RollbackOnInstall
        {
            get
            {
                return this.rollbackOnInstallField;
            }
            set
            {
                this.rollbackOnInstallFieldSet = true;
                this.rollbackOnInstallField = value;
            }
        }
        
        public YesNoType RollbackOnUninstall
        {
            get
            {
                return this.rollbackOnUninstallField;
            }
            set
            {
                this.rollbackOnUninstallFieldSet = true;
                this.rollbackOnUninstallField = value;
            }
        }
        
        public YesNoType ContinueOnError
        {
            get
            {
                return this.continueOnErrorField;
            }
            set
            {
                this.continueOnErrorFieldSet = true;
                this.continueOnErrorField = value;
            }
        }
        
        public int Sequence
        {
            get
            {
                return this.sequenceField;
            }
            set
            {
                this.sequenceFieldSet = true;
                this.sequenceField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("SqlString", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.sQLFieldSet)
            {
                writer.WriteAttributeString("SQL", this.sQLField);
            }
            if (this.userFieldSet)
            {
                writer.WriteAttributeString("User", this.userField);
            }
            if (this.sqlDbFieldSet)
            {
                writer.WriteAttributeString("SqlDb", this.sqlDbField);
            }
            if (this.executeOnInstallFieldSet)
            {
                if ((this.executeOnInstallField == YesNoType.no))
                {
                    writer.WriteAttributeString("ExecuteOnInstall", "no");
                }
                if ((this.executeOnInstallField == YesNoType.yes))
                {
                    writer.WriteAttributeString("ExecuteOnInstall", "yes");
                }
            }
            if (this.executeOnReInstallFieldSet)
            {
                if ((this.executeOnReInstallField == YesNoType.no))
                {
                    writer.WriteAttributeString("ExecuteOnReInstall", "no");
                }
                if ((this.executeOnReInstallField == YesNoType.yes))
                {
                    writer.WriteAttributeString("ExecuteOnReInstall", "yes");
                }
            }
            if (this.executeOnUninstallFieldSet)
            {
                if ((this.executeOnUninstallField == YesNoType.no))
                {
                    writer.WriteAttributeString("ExecuteOnUninstall", "no");
                }
                if ((this.executeOnUninstallField == YesNoType.yes))
                {
                    writer.WriteAttributeString("ExecuteOnUninstall", "yes");
                }
            }
            if (this.rollbackOnInstallFieldSet)
            {
                if ((this.rollbackOnInstallField == YesNoType.no))
                {
                    writer.WriteAttributeString("RollbackOnInstall", "no");
                }
                if ((this.rollbackOnInstallField == YesNoType.yes))
                {
                    writer.WriteAttributeString("RollbackOnInstall", "yes");
                }
            }
            if (this.rollbackOnUninstallFieldSet)
            {
                if ((this.rollbackOnUninstallField == YesNoType.no))
                {
                    writer.WriteAttributeString("RollbackOnUninstall", "no");
                }
                if ((this.rollbackOnUninstallField == YesNoType.yes))
                {
                    writer.WriteAttributeString("RollbackOnUninstall", "yes");
                }
            }
            if (this.continueOnErrorFieldSet)
            {
                if ((this.continueOnErrorField == YesNoType.no))
                {
                    writer.WriteAttributeString("ContinueOnError", "no");
                }
                if ((this.continueOnErrorField == YesNoType.yes))
                {
                    writer.WriteAttributeString("ContinueOnError", "yes");
                }
            }
            if (this.sequenceFieldSet)
            {
                writer.WriteAttributeString("Sequence", this.sequenceField.ToString());
            }
            writer.WriteEndElement();
        }
    }
    
    public class Configuration : ISchemaElement
    {
        
        private string nameField;
        
        private bool nameFieldSet;
        
        private FormatType formatField;
        
        private bool formatFieldSet;
        
        private string typeField;
        
        private bool typeFieldSet;
        
        private string contextDataField;
        
        private bool contextDataFieldSet;
        
        private string defaultValueField;
        
        private bool defaultValueFieldSet;
        
        private YesNoType keyNoOrphanField;
        
        private bool keyNoOrphanFieldSet;
        
        private YesNoType nonNullableField;
        
        private bool nonNullableFieldSet;
        
        private string displayNameField;
        
        private bool displayNameFieldSet;
        
        private string descriptionField;
        
        private bool descriptionFieldSet;
        
        private string helpLocationField;
        
        private bool helpLocationFieldSet;
        
        private string helpKeywordField;
        
        private bool helpKeywordFieldSet;
        
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameFieldSet = true;
                this.nameField = value;
            }
        }
        
        public FormatType Format
        {
            get
            {
                return this.formatField;
            }
            set
            {
                this.formatFieldSet = true;
                this.formatField = value;
            }
        }
        
        public string Type
        {
            get
            {
                return this.typeField;
            }
            set
            {
                this.typeFieldSet = true;
                this.typeField = value;
            }
        }
        
        public string ContextData
        {
            get
            {
                return this.contextDataField;
            }
            set
            {
                this.contextDataFieldSet = true;
                this.contextDataField = value;
            }
        }
        
        public string DefaultValue
        {
            get
            {
                return this.defaultValueField;
            }
            set
            {
                this.defaultValueFieldSet = true;
                this.defaultValueField = value;
            }
        }
        
        public YesNoType KeyNoOrphan
        {
            get
            {
                return this.keyNoOrphanField;
            }
            set
            {
                this.keyNoOrphanFieldSet = true;
                this.keyNoOrphanField = value;
            }
        }
        
        public YesNoType NonNullable
        {
            get
            {
                return this.nonNullableField;
            }
            set
            {
                this.nonNullableFieldSet = true;
                this.nonNullableField = value;
            }
        }
        
        public string DisplayName
        {
            get
            {
                return this.displayNameField;
            }
            set
            {
                this.displayNameFieldSet = true;
                this.displayNameField = value;
            }
        }
        
        public string Description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionFieldSet = true;
                this.descriptionField = value;
            }
        }
        
        public string HelpLocation
        {
            get
            {
                return this.helpLocationField;
            }
            set
            {
                this.helpLocationFieldSet = true;
                this.helpLocationField = value;
            }
        }
        
        public string HelpKeyword
        {
            get
            {
                return this.helpKeywordField;
            }
            set
            {
                this.helpKeywordFieldSet = true;
                this.helpKeywordField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("Configuration", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.nameFieldSet)
            {
                writer.WriteAttributeString("Name", this.nameField);
            }
            if (this.formatFieldSet)
            {
                if ((this.formatField == FormatType.Text))
                {
                    writer.WriteAttributeString("Format", "Text");
                }
                if ((this.formatField == FormatType.Key))
                {
                    writer.WriteAttributeString("Format", "Key");
                }
                if ((this.formatField == FormatType.Integer))
                {
                    writer.WriteAttributeString("Format", "Integer");
                }
                if ((this.formatField == FormatType.Bitfield))
                {
                    writer.WriteAttributeString("Format", "Bitfield");
                }
            }
            if (this.typeFieldSet)
            {
                writer.WriteAttributeString("Type", this.typeField);
            }
            if (this.contextDataFieldSet)
            {
                writer.WriteAttributeString("ContextData", this.contextDataField);
            }
            if (this.defaultValueFieldSet)
            {
                writer.WriteAttributeString("DefaultValue", this.defaultValueField);
            }
            if (this.keyNoOrphanFieldSet)
            {
                if ((this.keyNoOrphanField == YesNoType.no))
                {
                    writer.WriteAttributeString("KeyNoOrphan", "no");
                }
                if ((this.keyNoOrphanField == YesNoType.yes))
                {
                    writer.WriteAttributeString("KeyNoOrphan", "yes");
                }
            }
            if (this.nonNullableFieldSet)
            {
                if ((this.nonNullableField == YesNoType.no))
                {
                    writer.WriteAttributeString("NonNullable", "no");
                }
                if ((this.nonNullableField == YesNoType.yes))
                {
                    writer.WriteAttributeString("NonNullable", "yes");
                }
            }
            if (this.displayNameFieldSet)
            {
                writer.WriteAttributeString("DisplayName", this.displayNameField);
            }
            if (this.descriptionFieldSet)
            {
                writer.WriteAttributeString("Description", this.descriptionField);
            }
            if (this.helpLocationFieldSet)
            {
                writer.WriteAttributeString("HelpLocation", this.helpLocationField);
            }
            if (this.helpKeywordFieldSet)
            {
                writer.WriteAttributeString("HelpKeyword", this.helpKeywordField);
            }
            writer.WriteEndElement();
        }
        
        public enum FormatType
        {
            
            Text,
            
            Key,
            
            Integer,
            
            Bitfield,
        }
    }
    
    public class DigitalCertificate : ISchemaElement
    {
        
        private string nameField;
        
        private bool nameFieldSet;
        
        private string srcField;
        
        private bool srcFieldSet;
        
        private string contentField;
        
        private bool contentFieldSet;
        
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameFieldSet = true;
                this.nameField = value;
            }
        }
        
        public string src
        {
            get
            {
                return this.srcField;
            }
            set
            {
                this.srcFieldSet = true;
                this.srcField = value;
            }
        }
        
        public string Content
        {
            get
            {
                return this.contentField;
            }
            set
            {
                this.contentFieldSet = true;
                this.contentField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("DigitalCertificate", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.nameFieldSet)
            {
                writer.WriteAttributeString("Name", this.nameField);
            }
            if (this.srcFieldSet)
            {
                writer.WriteAttributeString("src", this.srcField);
            }
            if (this.contentFieldSet)
            {
                writer.WriteString(this.contentField);
            }
            writer.WriteEndElement();
        }
    }
    
    public class RegistryValue : ISchemaElement
    {
        
        private string contentField;
        
        private bool contentFieldSet;
        
        public string Content
        {
            get
            {
                return this.contentField;
            }
            set
            {
                this.contentFieldSet = true;
                this.contentField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("RegistryValue", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.contentFieldSet)
            {
                writer.WriteString(this.contentField);
            }
            writer.WriteEndElement();
        }
    }
    
    public class WebDirProperties : ISchemaElement
    {
        
        private string idField;
        
        private bool idFieldSet;
        
        private YesNoType readField;
        
        private bool readFieldSet;
        
        private YesNoType writeField;
        
        private bool writeFieldSet;
        
        private YesNoType scriptField;
        
        private bool scriptFieldSet;
        
        private YesNoType executeField;
        
        private bool executeFieldSet;
        
        private YesNoType anonymousAccessField;
        
        private bool anonymousAccessFieldSet;
        
        private string anonymousUserField;
        
        private bool anonymousUserFieldSet;
        
        private YesNoType iIsControlledPasswordField;
        
        private bool iIsControlledPasswordFieldSet;
        
        private YesNoType windowsAuthenticationField;
        
        private bool windowsAuthenticationFieldSet;
        
        private YesNoType digestAuthenticationField;
        
        private bool digestAuthenticationFieldSet;
        
        private YesNoType basicAuthenticationField;
        
        private bool basicAuthenticationFieldSet;
        
        private YesNoType passportAuthenticationField;
        
        private bool passportAuthenticationFieldSet;
        
        private YesNoType logVisitsField;
        
        private bool logVisitsFieldSet;
        
        private YesNoType indexField;
        
        private bool indexFieldSet;
        
        private string defaultDocumentsField;
        
        private bool defaultDocumentsFieldSet;
        
        private YesNoType aspDetailedErrorField;
        
        private bool aspDetailedErrorFieldSet;
        
        private string httpExpiresField;
        
        private bool httpExpiresFieldSet;
        
        private int cacheControlMaxAgeField;
        
        private bool cacheControlMaxAgeFieldSet;
        
        private string cacheControlCustomField;
        
        private bool cacheControlCustomFieldSet;
        
        private YesNoType clearCustomErrorField;
        
        private bool clearCustomErrorFieldSet;
        
        private YesNoType accessSSLField;
        
        private bool accessSSLFieldSet;
        
        private YesNoType accessSSL128Field;
        
        private bool accessSSL128FieldSet;
        
        private YesNoType accessSSLMapCertField;
        
        private bool accessSSLMapCertFieldSet;
        
        private YesNoType accessSSLNegotiateCertField;
        
        private bool accessSSLNegotiateCertFieldSet;
        
        private YesNoType accessSSLRequireCertField;
        
        private bool accessSSLRequireCertFieldSet;
        
        private string authenticationProvidersField;
        
        private bool authenticationProvidersFieldSet;
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public YesNoType Read
        {
            get
            {
                return this.readField;
            }
            set
            {
                this.readFieldSet = true;
                this.readField = value;
            }
        }
        
        public YesNoType Write
        {
            get
            {
                return this.writeField;
            }
            set
            {
                this.writeFieldSet = true;
                this.writeField = value;
            }
        }
        
        public YesNoType Script
        {
            get
            {
                return this.scriptField;
            }
            set
            {
                this.scriptFieldSet = true;
                this.scriptField = value;
            }
        }
        
        public YesNoType Execute
        {
            get
            {
                return this.executeField;
            }
            set
            {
                this.executeFieldSet = true;
                this.executeField = value;
            }
        }
        
        public YesNoType AnonymousAccess
        {
            get
            {
                return this.anonymousAccessField;
            }
            set
            {
                this.anonymousAccessFieldSet = true;
                this.anonymousAccessField = value;
            }
        }
        
        public string AnonymousUser
        {
            get
            {
                return this.anonymousUserField;
            }
            set
            {
                this.anonymousUserFieldSet = true;
                this.anonymousUserField = value;
            }
        }
        
        public YesNoType IIsControlledPassword
        {
            get
            {
                return this.iIsControlledPasswordField;
            }
            set
            {
                this.iIsControlledPasswordFieldSet = true;
                this.iIsControlledPasswordField = value;
            }
        }
        
        public YesNoType WindowsAuthentication
        {
            get
            {
                return this.windowsAuthenticationField;
            }
            set
            {
                this.windowsAuthenticationFieldSet = true;
                this.windowsAuthenticationField = value;
            }
        }
        
        public YesNoType DigestAuthentication
        {
            get
            {
                return this.digestAuthenticationField;
            }
            set
            {
                this.digestAuthenticationFieldSet = true;
                this.digestAuthenticationField = value;
            }
        }
        
        public YesNoType BasicAuthentication
        {
            get
            {
                return this.basicAuthenticationField;
            }
            set
            {
                this.basicAuthenticationFieldSet = true;
                this.basicAuthenticationField = value;
            }
        }
        
        public YesNoType PassportAuthentication
        {
            get
            {
                return this.passportAuthenticationField;
            }
            set
            {
                this.passportAuthenticationFieldSet = true;
                this.passportAuthenticationField = value;
            }
        }
        
        public YesNoType LogVisits
        {
            get
            {
                return this.logVisitsField;
            }
            set
            {
                this.logVisitsFieldSet = true;
                this.logVisitsField = value;
            }
        }
        
        public YesNoType Index
        {
            get
            {
                return this.indexField;
            }
            set
            {
                this.indexFieldSet = true;
                this.indexField = value;
            }
        }
        
        public string DefaultDocuments
        {
            get
            {
                return this.defaultDocumentsField;
            }
            set
            {
                this.defaultDocumentsFieldSet = true;
                this.defaultDocumentsField = value;
            }
        }
        
        public YesNoType AspDetailedError
        {
            get
            {
                return this.aspDetailedErrorField;
            }
            set
            {
                this.aspDetailedErrorFieldSet = true;
                this.aspDetailedErrorField = value;
            }
        }
        
        public string HttpExpires
        {
            get
            {
                return this.httpExpiresField;
            }
            set
            {
                this.httpExpiresFieldSet = true;
                this.httpExpiresField = value;
            }
        }
        
        public int CacheControlMaxAge
        {
            get
            {
                return this.cacheControlMaxAgeField;
            }
            set
            {
                this.cacheControlMaxAgeFieldSet = true;
                this.cacheControlMaxAgeField = value;
            }
        }
        
        public string CacheControlCustom
        {
            get
            {
                return this.cacheControlCustomField;
            }
            set
            {
                this.cacheControlCustomFieldSet = true;
                this.cacheControlCustomField = value;
            }
        }
        
        public YesNoType ClearCustomError
        {
            get
            {
                return this.clearCustomErrorField;
            }
            set
            {
                this.clearCustomErrorFieldSet = true;
                this.clearCustomErrorField = value;
            }
        }
        
        public YesNoType AccessSSL
        {
            get
            {
                return this.accessSSLField;
            }
            set
            {
                this.accessSSLFieldSet = true;
                this.accessSSLField = value;
            }
        }
        
        public YesNoType AccessSSL128
        {
            get
            {
                return this.accessSSL128Field;
            }
            set
            {
                this.accessSSL128FieldSet = true;
                this.accessSSL128Field = value;
            }
        }
        
        public YesNoType AccessSSLMapCert
        {
            get
            {
                return this.accessSSLMapCertField;
            }
            set
            {
                this.accessSSLMapCertFieldSet = true;
                this.accessSSLMapCertField = value;
            }
        }
        
        public YesNoType AccessSSLNegotiateCert
        {
            get
            {
                return this.accessSSLNegotiateCertField;
            }
            set
            {
                this.accessSSLNegotiateCertFieldSet = true;
                this.accessSSLNegotiateCertField = value;
            }
        }
        
        public YesNoType AccessSSLRequireCert
        {
            get
            {
                return this.accessSSLRequireCertField;
            }
            set
            {
                this.accessSSLRequireCertFieldSet = true;
                this.accessSSLRequireCertField = value;
            }
        }
        
        public string AuthenticationProviders
        {
            get
            {
                return this.authenticationProvidersField;
            }
            set
            {
                this.authenticationProvidersFieldSet = true;
                this.authenticationProvidersField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("WebDirProperties", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.readFieldSet)
            {
                if ((this.readField == YesNoType.no))
                {
                    writer.WriteAttributeString("Read", "no");
                }
                if ((this.readField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Read", "yes");
                }
            }
            if (this.writeFieldSet)
            {
                if ((this.writeField == YesNoType.no))
                {
                    writer.WriteAttributeString("Write", "no");
                }
                if ((this.writeField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Write", "yes");
                }
            }
            if (this.scriptFieldSet)
            {
                if ((this.scriptField == YesNoType.no))
                {
                    writer.WriteAttributeString("Script", "no");
                }
                if ((this.scriptField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Script", "yes");
                }
            }
            if (this.executeFieldSet)
            {
                if ((this.executeField == YesNoType.no))
                {
                    writer.WriteAttributeString("Execute", "no");
                }
                if ((this.executeField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Execute", "yes");
                }
            }
            if (this.anonymousAccessFieldSet)
            {
                if ((this.anonymousAccessField == YesNoType.no))
                {
                    writer.WriteAttributeString("AnonymousAccess", "no");
                }
                if ((this.anonymousAccessField == YesNoType.yes))
                {
                    writer.WriteAttributeString("AnonymousAccess", "yes");
                }
            }
            if (this.anonymousUserFieldSet)
            {
                writer.WriteAttributeString("AnonymousUser", this.anonymousUserField);
            }
            if (this.iIsControlledPasswordFieldSet)
            {
                if ((this.iIsControlledPasswordField == YesNoType.no))
                {
                    writer.WriteAttributeString("IIsControlledPassword", "no");
                }
                if ((this.iIsControlledPasswordField == YesNoType.yes))
                {
                    writer.WriteAttributeString("IIsControlledPassword", "yes");
                }
            }
            if (this.windowsAuthenticationFieldSet)
            {
                if ((this.windowsAuthenticationField == YesNoType.no))
                {
                    writer.WriteAttributeString("WindowsAuthentication", "no");
                }
                if ((this.windowsAuthenticationField == YesNoType.yes))
                {
                    writer.WriteAttributeString("WindowsAuthentication", "yes");
                }
            }
            if (this.digestAuthenticationFieldSet)
            {
                if ((this.digestAuthenticationField == YesNoType.no))
                {
                    writer.WriteAttributeString("DigestAuthentication", "no");
                }
                if ((this.digestAuthenticationField == YesNoType.yes))
                {
                    writer.WriteAttributeString("DigestAuthentication", "yes");
                }
            }
            if (this.basicAuthenticationFieldSet)
            {
                if ((this.basicAuthenticationField == YesNoType.no))
                {
                    writer.WriteAttributeString("BasicAuthentication", "no");
                }
                if ((this.basicAuthenticationField == YesNoType.yes))
                {
                    writer.WriteAttributeString("BasicAuthentication", "yes");
                }
            }
            if (this.passportAuthenticationFieldSet)
            {
                if ((this.passportAuthenticationField == YesNoType.no))
                {
                    writer.WriteAttributeString("PassportAuthentication", "no");
                }
                if ((this.passportAuthenticationField == YesNoType.yes))
                {
                    writer.WriteAttributeString("PassportAuthentication", "yes");
                }
            }
            if (this.logVisitsFieldSet)
            {
                if ((this.logVisitsField == YesNoType.no))
                {
                    writer.WriteAttributeString("LogVisits", "no");
                }
                if ((this.logVisitsField == YesNoType.yes))
                {
                    writer.WriteAttributeString("LogVisits", "yes");
                }
            }
            if (this.indexFieldSet)
            {
                if ((this.indexField == YesNoType.no))
                {
                    writer.WriteAttributeString("Index", "no");
                }
                if ((this.indexField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Index", "yes");
                }
            }
            if (this.defaultDocumentsFieldSet)
            {
                writer.WriteAttributeString("DefaultDocuments", this.defaultDocumentsField);
            }
            if (this.aspDetailedErrorFieldSet)
            {
                if ((this.aspDetailedErrorField == YesNoType.no))
                {
                    writer.WriteAttributeString("AspDetailedError", "no");
                }
                if ((this.aspDetailedErrorField == YesNoType.yes))
                {
                    writer.WriteAttributeString("AspDetailedError", "yes");
                }
            }
            if (this.httpExpiresFieldSet)
            {
                writer.WriteAttributeString("HttpExpires", this.httpExpiresField);
            }
            if (this.cacheControlMaxAgeFieldSet)
            {
                writer.WriteAttributeString("CacheControlMaxAge", this.cacheControlMaxAgeField.ToString());
            }
            if (this.cacheControlCustomFieldSet)
            {
                writer.WriteAttributeString("CacheControlCustom", this.cacheControlCustomField);
            }
            if (this.clearCustomErrorFieldSet)
            {
                if ((this.clearCustomErrorField == YesNoType.no))
                {
                    writer.WriteAttributeString("ClearCustomError", "no");
                }
                if ((this.clearCustomErrorField == YesNoType.yes))
                {
                    writer.WriteAttributeString("ClearCustomError", "yes");
                }
            }
            if (this.accessSSLFieldSet)
            {
                if ((this.accessSSLField == YesNoType.no))
                {
                    writer.WriteAttributeString("AccessSSL", "no");
                }
                if ((this.accessSSLField == YesNoType.yes))
                {
                    writer.WriteAttributeString("AccessSSL", "yes");
                }
            }
            if (this.accessSSL128FieldSet)
            {
                if ((this.accessSSL128Field == YesNoType.no))
                {
                    writer.WriteAttributeString("AccessSSL128", "no");
                }
                if ((this.accessSSL128Field == YesNoType.yes))
                {
                    writer.WriteAttributeString("AccessSSL128", "yes");
                }
            }
            if (this.accessSSLMapCertFieldSet)
            {
                if ((this.accessSSLMapCertField == YesNoType.no))
                {
                    writer.WriteAttributeString("AccessSSLMapCert", "no");
                }
                if ((this.accessSSLMapCertField == YesNoType.yes))
                {
                    writer.WriteAttributeString("AccessSSLMapCert", "yes");
                }
            }
            if (this.accessSSLNegotiateCertFieldSet)
            {
                if ((this.accessSSLNegotiateCertField == YesNoType.no))
                {
                    writer.WriteAttributeString("AccessSSLNegotiateCert", "no");
                }
                if ((this.accessSSLNegotiateCertField == YesNoType.yes))
                {
                    writer.WriteAttributeString("AccessSSLNegotiateCert", "yes");
                }
            }
            if (this.accessSSLRequireCertFieldSet)
            {
                if ((this.accessSSLRequireCertField == YesNoType.no))
                {
                    writer.WriteAttributeString("AccessSSLRequireCert", "no");
                }
                if ((this.accessSSLRequireCertField == YesNoType.yes))
                {
                    writer.WriteAttributeString("AccessSSLRequireCert", "yes");
                }
            }
            if (this.authenticationProvidersFieldSet)
            {
                writer.WriteAttributeString("AuthenticationProviders", this.authenticationProvidersField);
            }
            writer.WriteEndElement();
        }
    }
    
    public class Control : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string idField;
        
        private bool idFieldSet;
        
        private string typeField;
        
        private bool typeFieldSet;
        
        private int xField;
        
        private bool xFieldSet;
        
        private int yField;
        
        private bool yFieldSet;
        
        private int widthField;
        
        private bool widthFieldSet;
        
        private int heightField;
        
        private bool heightFieldSet;
        
        private string propertyField;
        
        private bool propertyFieldSet;
        
        private string textField;
        
        private bool textFieldSet;
        
        private string helpField;
        
        private bool helpFieldSet;
        
        private string toolTipField;
        
        private bool toolTipFieldSet;
        
        private string checkBoxValueField;
        
        private bool checkBoxValueFieldSet;
        
        private YesNoType tabSkipField;
        
        private bool tabSkipFieldSet;
        
        private YesNoType defaultField;
        
        private bool defaultFieldSet;
        
        private YesNoType cancelField;
        
        private bool cancelFieldSet;
        
        private YesNoType hiddenField;
        
        private bool hiddenFieldSet;
        
        private YesNoType disabledField;
        
        private bool disabledFieldSet;
        
        private YesNoType sunkenField;
        
        private bool sunkenFieldSet;
        
        private YesNoType indirectField;
        
        private bool indirectFieldSet;
        
        private YesNoType integerField;
        
        private bool integerFieldSet;
        
        private YesNoType rightToLeftField;
        
        private bool rightToLeftFieldSet;
        
        private YesNoType rightAlignedField;
        
        private bool rightAlignedFieldSet;
        
        private YesNoType leftScrollField;
        
        private bool leftScrollFieldSet;
        
        private YesNoType transparentField;
        
        private bool transparentFieldSet;
        
        private YesNoType noPrefixField;
        
        private bool noPrefixFieldSet;
        
        private YesNoType noWrapField;
        
        private bool noWrapFieldSet;
        
        private YesNoType formatSizeField;
        
        private bool formatSizeFieldSet;
        
        private YesNoType userLanguageField;
        
        private bool userLanguageFieldSet;
        
        private YesNoType multilineField;
        
        private bool multilineFieldSet;
        
        private YesNoType passwordField;
        
        private bool passwordFieldSet;
        
        private YesNoType progressBlocksField;
        
        private bool progressBlocksFieldSet;
        
        private YesNoType removableField;
        
        private bool removableFieldSet;
        
        private YesNoType fixedField;
        
        private bool fixedFieldSet;
        
        private YesNoType remoteField;
        
        private bool remoteFieldSet;
        
        private YesNoType cDROMField;
        
        private bool cDROMFieldSet;
        
        private YesNoType rAMDiskField;
        
        private bool rAMDiskFieldSet;
        
        private YesNoType floppyField;
        
        private bool floppyFieldSet;
        
        private YesNoType showRollbackCostField;
        
        private bool showRollbackCostFieldSet;
        
        private YesNoType sortedField;
        
        private bool sortedFieldSet;
        
        private YesNoType comboListField;
        
        private bool comboListFieldSet;
        
        private YesNoType imageField;
        
        private bool imageFieldSet;
        
        private IconSizeType iconSizeField;
        
        private bool iconSizeFieldSet;
        
        private YesNoType fixedSizeField;
        
        private bool fixedSizeFieldSet;
        
        private YesNoType iconField;
        
        private bool iconFieldSet;
        
        private YesNoType bitmapField;
        
        private bool bitmapFieldSet;
        
        private YesNoType pushLikeField;
        
        private bool pushLikeFieldSet;
        
        private YesNoType hasBorderField;
        
        private bool hasBorderFieldSet;
        
        public Control()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Sequence);
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(Text), 0, 1));
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(ComboBox), 0, 1));
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(ListBox), 0, 1));
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(ListView), 0, 1));
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(RadioGroup), 0, 1));
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(RadioButtonGroup), 0, 1));
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(Property), 0, 1));
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(Binary), 0, 1));
            ElementCollection childCollection1 = new ElementCollection(ElementCollection.CollectionType.Choice, 0, -1);
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(Condition)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(Publish)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(Subscribe)));
            childCollection0.AddCollection(childCollection1);
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string Type
        {
            get
            {
                return this.typeField;
            }
            set
            {
                this.typeFieldSet = true;
                this.typeField = value;
            }
        }
        
        public int X
        {
            get
            {
                return this.xField;
            }
            set
            {
                this.xFieldSet = true;
                this.xField = value;
            }
        }
        
        public int Y
        {
            get
            {
                return this.yField;
            }
            set
            {
                this.yFieldSet = true;
                this.yField = value;
            }
        }
        
        public int Width
        {
            get
            {
                return this.widthField;
            }
            set
            {
                this.widthFieldSet = true;
                this.widthField = value;
            }
        }
        
        public int Height
        {
            get
            {
                return this.heightField;
            }
            set
            {
                this.heightFieldSet = true;
                this.heightField = value;
            }
        }
        
        public string Property
        {
            get
            {
                return this.propertyField;
            }
            set
            {
                this.propertyFieldSet = true;
                this.propertyField = value;
            }
        }
        
        public string Text
        {
            get
            {
                return this.textField;
            }
            set
            {
                this.textFieldSet = true;
                this.textField = value;
            }
        }
        
        public string Help
        {
            get
            {
                return this.helpField;
            }
            set
            {
                this.helpFieldSet = true;
                this.helpField = value;
            }
        }
        
        public string ToolTip
        {
            get
            {
                return this.toolTipField;
            }
            set
            {
                this.toolTipFieldSet = true;
                this.toolTipField = value;
            }
        }
        
        public string CheckBoxValue
        {
            get
            {
                return this.checkBoxValueField;
            }
            set
            {
                this.checkBoxValueFieldSet = true;
                this.checkBoxValueField = value;
            }
        }
        
        public YesNoType TabSkip
        {
            get
            {
                return this.tabSkipField;
            }
            set
            {
                this.tabSkipFieldSet = true;
                this.tabSkipField = value;
            }
        }
        
        public YesNoType Default
        {
            get
            {
                return this.defaultField;
            }
            set
            {
                this.defaultFieldSet = true;
                this.defaultField = value;
            }
        }
        
        public YesNoType Cancel
        {
            get
            {
                return this.cancelField;
            }
            set
            {
                this.cancelFieldSet = true;
                this.cancelField = value;
            }
        }
        
        public YesNoType Hidden
        {
            get
            {
                return this.hiddenField;
            }
            set
            {
                this.hiddenFieldSet = true;
                this.hiddenField = value;
            }
        }
        
        public YesNoType Disabled
        {
            get
            {
                return this.disabledField;
            }
            set
            {
                this.disabledFieldSet = true;
                this.disabledField = value;
            }
        }
        
        public YesNoType Sunken
        {
            get
            {
                return this.sunkenField;
            }
            set
            {
                this.sunkenFieldSet = true;
                this.sunkenField = value;
            }
        }
        
        public YesNoType Indirect
        {
            get
            {
                return this.indirectField;
            }
            set
            {
                this.indirectFieldSet = true;
                this.indirectField = value;
            }
        }
        
        public YesNoType Integer
        {
            get
            {
                return this.integerField;
            }
            set
            {
                this.integerFieldSet = true;
                this.integerField = value;
            }
        }
        
        public YesNoType RightToLeft
        {
            get
            {
                return this.rightToLeftField;
            }
            set
            {
                this.rightToLeftFieldSet = true;
                this.rightToLeftField = value;
            }
        }
        
        public YesNoType RightAligned
        {
            get
            {
                return this.rightAlignedField;
            }
            set
            {
                this.rightAlignedFieldSet = true;
                this.rightAlignedField = value;
            }
        }
        
        public YesNoType LeftScroll
        {
            get
            {
                return this.leftScrollField;
            }
            set
            {
                this.leftScrollFieldSet = true;
                this.leftScrollField = value;
            }
        }
        
        public YesNoType Transparent
        {
            get
            {
                return this.transparentField;
            }
            set
            {
                this.transparentFieldSet = true;
                this.transparentField = value;
            }
        }
        
        public YesNoType NoPrefix
        {
            get
            {
                return this.noPrefixField;
            }
            set
            {
                this.noPrefixFieldSet = true;
                this.noPrefixField = value;
            }
        }
        
        public YesNoType NoWrap
        {
            get
            {
                return this.noWrapField;
            }
            set
            {
                this.noWrapFieldSet = true;
                this.noWrapField = value;
            }
        }
        
        public YesNoType FormatSize
        {
            get
            {
                return this.formatSizeField;
            }
            set
            {
                this.formatSizeFieldSet = true;
                this.formatSizeField = value;
            }
        }
        
        public YesNoType UserLanguage
        {
            get
            {
                return this.userLanguageField;
            }
            set
            {
                this.userLanguageFieldSet = true;
                this.userLanguageField = value;
            }
        }
        
        public YesNoType Multiline
        {
            get
            {
                return this.multilineField;
            }
            set
            {
                this.multilineFieldSet = true;
                this.multilineField = value;
            }
        }
        
        public YesNoType Password
        {
            get
            {
                return this.passwordField;
            }
            set
            {
                this.passwordFieldSet = true;
                this.passwordField = value;
            }
        }
        
        public YesNoType ProgressBlocks
        {
            get
            {
                return this.progressBlocksField;
            }
            set
            {
                this.progressBlocksFieldSet = true;
                this.progressBlocksField = value;
            }
        }
        
        public YesNoType Removable
        {
            get
            {
                return this.removableField;
            }
            set
            {
                this.removableFieldSet = true;
                this.removableField = value;
            }
        }
        
        public YesNoType Fixed
        {
            get
            {
                return this.fixedField;
            }
            set
            {
                this.fixedFieldSet = true;
                this.fixedField = value;
            }
        }
        
        public YesNoType Remote
        {
            get
            {
                return this.remoteField;
            }
            set
            {
                this.remoteFieldSet = true;
                this.remoteField = value;
            }
        }
        
        public YesNoType CDROM
        {
            get
            {
                return this.cDROMField;
            }
            set
            {
                this.cDROMFieldSet = true;
                this.cDROMField = value;
            }
        }
        
        public YesNoType RAMDisk
        {
            get
            {
                return this.rAMDiskField;
            }
            set
            {
                this.rAMDiskFieldSet = true;
                this.rAMDiskField = value;
            }
        }
        
        public YesNoType Floppy
        {
            get
            {
                return this.floppyField;
            }
            set
            {
                this.floppyFieldSet = true;
                this.floppyField = value;
            }
        }
        
        public YesNoType ShowRollbackCost
        {
            get
            {
                return this.showRollbackCostField;
            }
            set
            {
                this.showRollbackCostFieldSet = true;
                this.showRollbackCostField = value;
            }
        }
        
        public YesNoType Sorted
        {
            get
            {
                return this.sortedField;
            }
            set
            {
                this.sortedFieldSet = true;
                this.sortedField = value;
            }
        }
        
        public YesNoType ComboList
        {
            get
            {
                return this.comboListField;
            }
            set
            {
                this.comboListFieldSet = true;
                this.comboListField = value;
            }
        }
        
        public YesNoType Image
        {
            get
            {
                return this.imageField;
            }
            set
            {
                this.imageFieldSet = true;
                this.imageField = value;
            }
        }
        
        public IconSizeType IconSize
        {
            get
            {
                return this.iconSizeField;
            }
            set
            {
                this.iconSizeFieldSet = true;
                this.iconSizeField = value;
            }
        }
        
        public YesNoType FixedSize
        {
            get
            {
                return this.fixedSizeField;
            }
            set
            {
                this.fixedSizeFieldSet = true;
                this.fixedSizeField = value;
            }
        }
        
        public YesNoType Icon
        {
            get
            {
                return this.iconField;
            }
            set
            {
                this.iconFieldSet = true;
                this.iconField = value;
            }
        }
        
        public YesNoType Bitmap
        {
            get
            {
                return this.bitmapField;
            }
            set
            {
                this.bitmapFieldSet = true;
                this.bitmapField = value;
            }
        }
        
        public YesNoType PushLike
        {
            get
            {
                return this.pushLikeField;
            }
            set
            {
                this.pushLikeFieldSet = true;
                this.pushLikeField = value;
            }
        }
        
        public YesNoType HasBorder
        {
            get
            {
                return this.hasBorderField;
            }
            set
            {
                this.hasBorderFieldSet = true;
                this.hasBorderField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("Control", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.typeFieldSet)
            {
                writer.WriteAttributeString("Type", this.typeField);
            }
            if (this.xFieldSet)
            {
                writer.WriteAttributeString("X", this.xField.ToString());
            }
            if (this.yFieldSet)
            {
                writer.WriteAttributeString("Y", this.yField.ToString());
            }
            if (this.widthFieldSet)
            {
                writer.WriteAttributeString("Width", this.widthField.ToString());
            }
            if (this.heightFieldSet)
            {
                writer.WriteAttributeString("Height", this.heightField.ToString());
            }
            if (this.propertyFieldSet)
            {
                writer.WriteAttributeString("Property", this.propertyField);
            }
            if (this.textFieldSet)
            {
                writer.WriteAttributeString("Text", this.textField);
            }
            if (this.helpFieldSet)
            {
                writer.WriteAttributeString("Help", this.helpField);
            }
            if (this.toolTipFieldSet)
            {
                writer.WriteAttributeString("ToolTip", this.toolTipField);
            }
            if (this.checkBoxValueFieldSet)
            {
                writer.WriteAttributeString("CheckBoxValue", this.checkBoxValueField);
            }
            if (this.tabSkipFieldSet)
            {
                if ((this.tabSkipField == YesNoType.no))
                {
                    writer.WriteAttributeString("TabSkip", "no");
                }
                if ((this.tabSkipField == YesNoType.yes))
                {
                    writer.WriteAttributeString("TabSkip", "yes");
                }
            }
            if (this.defaultFieldSet)
            {
                if ((this.defaultField == YesNoType.no))
                {
                    writer.WriteAttributeString("Default", "no");
                }
                if ((this.defaultField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Default", "yes");
                }
            }
            if (this.cancelFieldSet)
            {
                if ((this.cancelField == YesNoType.no))
                {
                    writer.WriteAttributeString("Cancel", "no");
                }
                if ((this.cancelField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Cancel", "yes");
                }
            }
            if (this.hiddenFieldSet)
            {
                if ((this.hiddenField == YesNoType.no))
                {
                    writer.WriteAttributeString("Hidden", "no");
                }
                if ((this.hiddenField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Hidden", "yes");
                }
            }
            if (this.disabledFieldSet)
            {
                if ((this.disabledField == YesNoType.no))
                {
                    writer.WriteAttributeString("Disabled", "no");
                }
                if ((this.disabledField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Disabled", "yes");
                }
            }
            if (this.sunkenFieldSet)
            {
                if ((this.sunkenField == YesNoType.no))
                {
                    writer.WriteAttributeString("Sunken", "no");
                }
                if ((this.sunkenField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Sunken", "yes");
                }
            }
            if (this.indirectFieldSet)
            {
                if ((this.indirectField == YesNoType.no))
                {
                    writer.WriteAttributeString("Indirect", "no");
                }
                if ((this.indirectField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Indirect", "yes");
                }
            }
            if (this.integerFieldSet)
            {
                if ((this.integerField == YesNoType.no))
                {
                    writer.WriteAttributeString("Integer", "no");
                }
                if ((this.integerField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Integer", "yes");
                }
            }
            if (this.rightToLeftFieldSet)
            {
                if ((this.rightToLeftField == YesNoType.no))
                {
                    writer.WriteAttributeString("RightToLeft", "no");
                }
                if ((this.rightToLeftField == YesNoType.yes))
                {
                    writer.WriteAttributeString("RightToLeft", "yes");
                }
            }
            if (this.rightAlignedFieldSet)
            {
                if ((this.rightAlignedField == YesNoType.no))
                {
                    writer.WriteAttributeString("RightAligned", "no");
                }
                if ((this.rightAlignedField == YesNoType.yes))
                {
                    writer.WriteAttributeString("RightAligned", "yes");
                }
            }
            if (this.leftScrollFieldSet)
            {
                if ((this.leftScrollField == YesNoType.no))
                {
                    writer.WriteAttributeString("LeftScroll", "no");
                }
                if ((this.leftScrollField == YesNoType.yes))
                {
                    writer.WriteAttributeString("LeftScroll", "yes");
                }
            }
            if (this.transparentFieldSet)
            {
                if ((this.transparentField == YesNoType.no))
                {
                    writer.WriteAttributeString("Transparent", "no");
                }
                if ((this.transparentField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Transparent", "yes");
                }
            }
            if (this.noPrefixFieldSet)
            {
                if ((this.noPrefixField == YesNoType.no))
                {
                    writer.WriteAttributeString("NoPrefix", "no");
                }
                if ((this.noPrefixField == YesNoType.yes))
                {
                    writer.WriteAttributeString("NoPrefix", "yes");
                }
            }
            if (this.noWrapFieldSet)
            {
                if ((this.noWrapField == YesNoType.no))
                {
                    writer.WriteAttributeString("NoWrap", "no");
                }
                if ((this.noWrapField == YesNoType.yes))
                {
                    writer.WriteAttributeString("NoWrap", "yes");
                }
            }
            if (this.formatSizeFieldSet)
            {
                if ((this.formatSizeField == YesNoType.no))
                {
                    writer.WriteAttributeString("FormatSize", "no");
                }
                if ((this.formatSizeField == YesNoType.yes))
                {
                    writer.WriteAttributeString("FormatSize", "yes");
                }
            }
            if (this.userLanguageFieldSet)
            {
                if ((this.userLanguageField == YesNoType.no))
                {
                    writer.WriteAttributeString("UserLanguage", "no");
                }
                if ((this.userLanguageField == YesNoType.yes))
                {
                    writer.WriteAttributeString("UserLanguage", "yes");
                }
            }
            if (this.multilineFieldSet)
            {
                if ((this.multilineField == YesNoType.no))
                {
                    writer.WriteAttributeString("Multiline", "no");
                }
                if ((this.multilineField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Multiline", "yes");
                }
            }
            if (this.passwordFieldSet)
            {
                if ((this.passwordField == YesNoType.no))
                {
                    writer.WriteAttributeString("Password", "no");
                }
                if ((this.passwordField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Password", "yes");
                }
            }
            if (this.progressBlocksFieldSet)
            {
                if ((this.progressBlocksField == YesNoType.no))
                {
                    writer.WriteAttributeString("ProgressBlocks", "no");
                }
                if ((this.progressBlocksField == YesNoType.yes))
                {
                    writer.WriteAttributeString("ProgressBlocks", "yes");
                }
            }
            if (this.removableFieldSet)
            {
                if ((this.removableField == YesNoType.no))
                {
                    writer.WriteAttributeString("Removable", "no");
                }
                if ((this.removableField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Removable", "yes");
                }
            }
            if (this.fixedFieldSet)
            {
                if ((this.fixedField == YesNoType.no))
                {
                    writer.WriteAttributeString("Fixed", "no");
                }
                if ((this.fixedField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Fixed", "yes");
                }
            }
            if (this.remoteFieldSet)
            {
                if ((this.remoteField == YesNoType.no))
                {
                    writer.WriteAttributeString("Remote", "no");
                }
                if ((this.remoteField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Remote", "yes");
                }
            }
            if (this.cDROMFieldSet)
            {
                if ((this.cDROMField == YesNoType.no))
                {
                    writer.WriteAttributeString("CDROM", "no");
                }
                if ((this.cDROMField == YesNoType.yes))
                {
                    writer.WriteAttributeString("CDROM", "yes");
                }
            }
            if (this.rAMDiskFieldSet)
            {
                if ((this.rAMDiskField == YesNoType.no))
                {
                    writer.WriteAttributeString("RAMDisk", "no");
                }
                if ((this.rAMDiskField == YesNoType.yes))
                {
                    writer.WriteAttributeString("RAMDisk", "yes");
                }
            }
            if (this.floppyFieldSet)
            {
                if ((this.floppyField == YesNoType.no))
                {
                    writer.WriteAttributeString("Floppy", "no");
                }
                if ((this.floppyField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Floppy", "yes");
                }
            }
            if (this.showRollbackCostFieldSet)
            {
                if ((this.showRollbackCostField == YesNoType.no))
                {
                    writer.WriteAttributeString("ShowRollbackCost", "no");
                }
                if ((this.showRollbackCostField == YesNoType.yes))
                {
                    writer.WriteAttributeString("ShowRollbackCost", "yes");
                }
            }
            if (this.sortedFieldSet)
            {
                if ((this.sortedField == YesNoType.no))
                {
                    writer.WriteAttributeString("Sorted", "no");
                }
                if ((this.sortedField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Sorted", "yes");
                }
            }
            if (this.comboListFieldSet)
            {
                if ((this.comboListField == YesNoType.no))
                {
                    writer.WriteAttributeString("ComboList", "no");
                }
                if ((this.comboListField == YesNoType.yes))
                {
                    writer.WriteAttributeString("ComboList", "yes");
                }
            }
            if (this.imageFieldSet)
            {
                if ((this.imageField == YesNoType.no))
                {
                    writer.WriteAttributeString("Image", "no");
                }
                if ((this.imageField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Image", "yes");
                }
            }
            if (this.iconSizeFieldSet)
            {
                if ((this.iconSizeField == IconSizeType.Item16))
                {
                    writer.WriteAttributeString("IconSize", "16");
                }
                if ((this.iconSizeField == IconSizeType.Item32))
                {
                    writer.WriteAttributeString("IconSize", "32");
                }
                if ((this.iconSizeField == IconSizeType.Item48))
                {
                    writer.WriteAttributeString("IconSize", "48");
                }
            }
            if (this.fixedSizeFieldSet)
            {
                if ((this.fixedSizeField == YesNoType.no))
                {
                    writer.WriteAttributeString("FixedSize", "no");
                }
                if ((this.fixedSizeField == YesNoType.yes))
                {
                    writer.WriteAttributeString("FixedSize", "yes");
                }
            }
            if (this.iconFieldSet)
            {
                if ((this.iconField == YesNoType.no))
                {
                    writer.WriteAttributeString("Icon", "no");
                }
                if ((this.iconField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Icon", "yes");
                }
            }
            if (this.bitmapFieldSet)
            {
                if ((this.bitmapField == YesNoType.no))
                {
                    writer.WriteAttributeString("Bitmap", "no");
                }
                if ((this.bitmapField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Bitmap", "yes");
                }
            }
            if (this.pushLikeFieldSet)
            {
                if ((this.pushLikeField == YesNoType.no))
                {
                    writer.WriteAttributeString("PushLike", "no");
                }
                if ((this.pushLikeField == YesNoType.yes))
                {
                    writer.WriteAttributeString("PushLike", "yes");
                }
            }
            if (this.hasBorderFieldSet)
            {
                if ((this.hasBorderField == YesNoType.no))
                {
                    writer.WriteAttributeString("HasBorder", "no");
                }
                if ((this.hasBorderField == YesNoType.yes))
                {
                    writer.WriteAttributeString("HasBorder", "yes");
                }
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
        
        public enum IconSizeType
        {
            
            Item16,
            
            Item32,
            
            Item48,
        }
    }
    
    public class WebVirtualDir : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string idField;
        
        private bool idFieldSet;
        
        private string webSiteField;
        
        private bool webSiteFieldSet;
        
        private string aliasField;
        
        private bool aliasFieldSet;
        
        private string directoryField;
        
        private bool directoryFieldSet;
        
        private string dirPropertiesField;
        
        private bool dirPropertiesFieldSet;
        
        private string webApplicationField;
        
        private bool webApplicationFieldSet;
        
        public WebVirtualDir()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Sequence);
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(WebApplication), 0, 1));
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(WebError), 0, -1));
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(WebVirtualDir), 0, -1));
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(MimeMap), 0, -1));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string WebSite
        {
            get
            {
                return this.webSiteField;
            }
            set
            {
                this.webSiteFieldSet = true;
                this.webSiteField = value;
            }
        }
        
        public string Alias
        {
            get
            {
                return this.aliasField;
            }
            set
            {
                this.aliasFieldSet = true;
                this.aliasField = value;
            }
        }
        
        public string Directory
        {
            get
            {
                return this.directoryField;
            }
            set
            {
                this.directoryFieldSet = true;
                this.directoryField = value;
            }
        }
        
        public string DirProperties
        {
            get
            {
                return this.dirPropertiesField;
            }
            set
            {
                this.dirPropertiesFieldSet = true;
                this.dirPropertiesField = value;
            }
        }
        
        public string WebApplication
        {
            get
            {
                return this.webApplicationField;
            }
            set
            {
                this.webApplicationFieldSet = true;
                this.webApplicationField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("WebVirtualDir", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.webSiteFieldSet)
            {
                writer.WriteAttributeString("WebSite", this.webSiteField);
            }
            if (this.aliasFieldSet)
            {
                writer.WriteAttributeString("Alias", this.aliasField);
            }
            if (this.directoryFieldSet)
            {
                writer.WriteAttributeString("Directory", this.directoryField);
            }
            if (this.dirPropertiesFieldSet)
            {
                writer.WriteAttributeString("DirProperties", this.dirPropertiesField);
            }
            if (this.webApplicationFieldSet)
            {
                writer.WriteAttributeString("WebApplication", this.webApplicationField);
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
    
    public class InstallServices : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("InstallServices", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class PatchFiles : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("PatchFiles", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class GroupRef : ISchemaElement
    {
        
        private string idField;
        
        private bool idFieldSet;
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("GroupRef", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            writer.WriteEndElement();
        }
    }
    
    public class InstallFinalize : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("InstallFinalize", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class SqlLogFileSpec : ISchemaElement
    {
        
        private string idField;
        
        private bool idFieldSet;
        
        private string nameField;
        
        private bool nameFieldSet;
        
        private string filenameField;
        
        private bool filenameFieldSet;
        
        private string sizeField;
        
        private bool sizeFieldSet;
        
        private string maxSizeField;
        
        private bool maxSizeFieldSet;
        
        private string growthSizeField;
        
        private bool growthSizeFieldSet;
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameFieldSet = true;
                this.nameField = value;
            }
        }
        
        public string Filename
        {
            get
            {
                return this.filenameField;
            }
            set
            {
                this.filenameFieldSet = true;
                this.filenameField = value;
            }
        }
        
        public string Size
        {
            get
            {
                return this.sizeField;
            }
            set
            {
                this.sizeFieldSet = true;
                this.sizeField = value;
            }
        }
        
        public string MaxSize
        {
            get
            {
                return this.maxSizeField;
            }
            set
            {
                this.maxSizeFieldSet = true;
                this.maxSizeField = value;
            }
        }
        
        public string GrowthSize
        {
            get
            {
                return this.growthSizeField;
            }
            set
            {
                this.growthSizeFieldSet = true;
                this.growthSizeField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("SqlLogFileSpec", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.nameFieldSet)
            {
                writer.WriteAttributeString("Name", this.nameField);
            }
            if (this.filenameFieldSet)
            {
                writer.WriteAttributeString("Filename", this.filenameField);
            }
            if (this.sizeFieldSet)
            {
                writer.WriteAttributeString("Size", this.sizeField);
            }
            if (this.maxSizeFieldSet)
            {
                writer.WriteAttributeString("MaxSize", this.maxSizeField);
            }
            if (this.growthSizeFieldSet)
            {
                writer.WriteAttributeString("GrowthSize", this.growthSizeField);
            }
            writer.WriteEndElement();
        }
    }
    
    public class UnpublishFeatures : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("UnpublishFeatures", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class RemoveExistingProducts : ActionModuleSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("RemoveExistingProducts", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class ScheduleReboot : ActionModuleSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("ScheduleReboot", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class WebApplication : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string idField;
        
        private bool idFieldSet;
        
        private string nameField;
        
        private bool nameFieldSet;
        
        private IsolationType isolationField;
        
        private bool isolationFieldSet;
        
        private YesNoDefaultType allowSessionsField;
        
        private bool allowSessionsFieldSet;
        
        private int sessionTimeoutField;
        
        private bool sessionTimeoutFieldSet;
        
        private YesNoDefaultType bufferField;
        
        private bool bufferFieldSet;
        
        private YesNoDefaultType parentPathsField;
        
        private bool parentPathsFieldSet;
        
        private DefaultScriptType defaultScriptField;
        
        private bool defaultScriptFieldSet;
        
        private int scriptTimeoutField;
        
        private bool scriptTimeoutFieldSet;
        
        private YesNoDefaultType serverDebuggingField;
        
        private bool serverDebuggingFieldSet;
        
        private YesNoDefaultType clientDebuggingField;
        
        private bool clientDebuggingFieldSet;
        
        private string webAppPoolField;
        
        private bool webAppPoolFieldSet;
        
        public WebApplication()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Sequence);
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(WebApplicationExtension), 0, -1));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameFieldSet = true;
                this.nameField = value;
            }
        }
        
        public IsolationType Isolation
        {
            get
            {
                return this.isolationField;
            }
            set
            {
                this.isolationFieldSet = true;
                this.isolationField = value;
            }
        }
        
        public YesNoDefaultType AllowSessions
        {
            get
            {
                return this.allowSessionsField;
            }
            set
            {
                this.allowSessionsFieldSet = true;
                this.allowSessionsField = value;
            }
        }
        
        public int SessionTimeout
        {
            get
            {
                return this.sessionTimeoutField;
            }
            set
            {
                this.sessionTimeoutFieldSet = true;
                this.sessionTimeoutField = value;
            }
        }
        
        public YesNoDefaultType Buffer
        {
            get
            {
                return this.bufferField;
            }
            set
            {
                this.bufferFieldSet = true;
                this.bufferField = value;
            }
        }
        
        public YesNoDefaultType ParentPaths
        {
            get
            {
                return this.parentPathsField;
            }
            set
            {
                this.parentPathsFieldSet = true;
                this.parentPathsField = value;
            }
        }
        
        public DefaultScriptType DefaultScript
        {
            get
            {
                return this.defaultScriptField;
            }
            set
            {
                this.defaultScriptFieldSet = true;
                this.defaultScriptField = value;
            }
        }
        
        public int ScriptTimeout
        {
            get
            {
                return this.scriptTimeoutField;
            }
            set
            {
                this.scriptTimeoutFieldSet = true;
                this.scriptTimeoutField = value;
            }
        }
        
        public YesNoDefaultType ServerDebugging
        {
            get
            {
                return this.serverDebuggingField;
            }
            set
            {
                this.serverDebuggingFieldSet = true;
                this.serverDebuggingField = value;
            }
        }
        
        public YesNoDefaultType ClientDebugging
        {
            get
            {
                return this.clientDebuggingField;
            }
            set
            {
                this.clientDebuggingFieldSet = true;
                this.clientDebuggingField = value;
            }
        }
        
        public string WebAppPool
        {
            get
            {
                return this.webAppPoolField;
            }
            set
            {
                this.webAppPoolFieldSet = true;
                this.webAppPoolField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("WebApplication", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.nameFieldSet)
            {
                writer.WriteAttributeString("Name", this.nameField);
            }
            if (this.isolationFieldSet)
            {
                if ((this.isolationField == IsolationType.low))
                {
                    writer.WriteAttributeString("Isolation", "low");
                }
                if ((this.isolationField == IsolationType.medium))
                {
                    writer.WriteAttributeString("Isolation", "medium");
                }
                if ((this.isolationField == IsolationType.high))
                {
                    writer.WriteAttributeString("Isolation", "high");
                }
            }
            if (this.allowSessionsFieldSet)
            {
                if ((this.allowSessionsField == YesNoDefaultType.@default))
                {
                    writer.WriteAttributeString("AllowSessions", "default");
                }
                if ((this.allowSessionsField == YesNoDefaultType.no))
                {
                    writer.WriteAttributeString("AllowSessions", "no");
                }
                if ((this.allowSessionsField == YesNoDefaultType.yes))
                {
                    writer.WriteAttributeString("AllowSessions", "yes");
                }
            }
            if (this.sessionTimeoutFieldSet)
            {
                writer.WriteAttributeString("SessionTimeout", this.sessionTimeoutField.ToString());
            }
            if (this.bufferFieldSet)
            {
                if ((this.bufferField == YesNoDefaultType.@default))
                {
                    writer.WriteAttributeString("Buffer", "default");
                }
                if ((this.bufferField == YesNoDefaultType.no))
                {
                    writer.WriteAttributeString("Buffer", "no");
                }
                if ((this.bufferField == YesNoDefaultType.yes))
                {
                    writer.WriteAttributeString("Buffer", "yes");
                }
            }
            if (this.parentPathsFieldSet)
            {
                if ((this.parentPathsField == YesNoDefaultType.@default))
                {
                    writer.WriteAttributeString("ParentPaths", "default");
                }
                if ((this.parentPathsField == YesNoDefaultType.no))
                {
                    writer.WriteAttributeString("ParentPaths", "no");
                }
                if ((this.parentPathsField == YesNoDefaultType.yes))
                {
                    writer.WriteAttributeString("ParentPaths", "yes");
                }
            }
            if (this.defaultScriptFieldSet)
            {
                if ((this.defaultScriptField == DefaultScriptType.VBScript))
                {
                    writer.WriteAttributeString("DefaultScript", "VBScript");
                }
                if ((this.defaultScriptField == DefaultScriptType.JScript))
                {
                    writer.WriteAttributeString("DefaultScript", "JScript");
                }
            }
            if (this.scriptTimeoutFieldSet)
            {
                writer.WriteAttributeString("ScriptTimeout", this.scriptTimeoutField.ToString());
            }
            if (this.serverDebuggingFieldSet)
            {
                if ((this.serverDebuggingField == YesNoDefaultType.@default))
                {
                    writer.WriteAttributeString("ServerDebugging", "default");
                }
                if ((this.serverDebuggingField == YesNoDefaultType.no))
                {
                    writer.WriteAttributeString("ServerDebugging", "no");
                }
                if ((this.serverDebuggingField == YesNoDefaultType.yes))
                {
                    writer.WriteAttributeString("ServerDebugging", "yes");
                }
            }
            if (this.clientDebuggingFieldSet)
            {
                if ((this.clientDebuggingField == YesNoDefaultType.@default))
                {
                    writer.WriteAttributeString("ClientDebugging", "default");
                }
                if ((this.clientDebuggingField == YesNoDefaultType.no))
                {
                    writer.WriteAttributeString("ClientDebugging", "no");
                }
                if ((this.clientDebuggingField == YesNoDefaultType.yes))
                {
                    writer.WriteAttributeString("ClientDebugging", "yes");
                }
            }
            if (this.webAppPoolFieldSet)
            {
                writer.WriteAttributeString("WebAppPool", this.webAppPoolField);
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
        
        public enum IsolationType
        {
            
            low,
            
            medium,
            
            high,
        }
        
        public enum DefaultScriptType
        {
            
            VBScript,
            
            JScript,
        }
    }
    
    public class RegisterFonts : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("RegisterFonts", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class ComponentGroupRef : ISchemaElement
    {
        
        private string idField;
        
        private bool idFieldSet;
        
        private YesNoType primaryField;
        
        private bool primaryFieldSet;
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public YesNoType Primary
        {
            get
            {
                return this.primaryField;
            }
            set
            {
                this.primaryFieldSet = true;
                this.primaryField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("ComponentGroupRef", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.primaryFieldSet)
            {
                if ((this.primaryField == YesNoType.no))
                {
                    writer.WriteAttributeString("Primary", "no");
                }
                if ((this.primaryField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Primary", "yes");
                }
            }
            writer.WriteEndElement();
        }
    }
    
    public class ProgId : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string idField;
        
        private bool idFieldSet;
        
        private string descriptionField;
        
        private bool descriptionFieldSet;
        
        private string iconField;
        
        private bool iconFieldSet;
        
        private int iconIndexField;
        
        private bool iconIndexFieldSet;
        
        private YesNoType advertiseField;
        
        private bool advertiseFieldSet;
        
        private string noOpenField;
        
        private bool noOpenFieldSet;
        
        public ProgId()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Sequence);
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(ProgId), 0, 1));
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(Extension), 0, -1));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string Description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionFieldSet = true;
                this.descriptionField = value;
            }
        }
        
        public string Icon
        {
            get
            {
                return this.iconField;
            }
            set
            {
                this.iconFieldSet = true;
                this.iconField = value;
            }
        }
        
        public int IconIndex
        {
            get
            {
                return this.iconIndexField;
            }
            set
            {
                this.iconIndexFieldSet = true;
                this.iconIndexField = value;
            }
        }
        
        public YesNoType Advertise
        {
            get
            {
                return this.advertiseField;
            }
            set
            {
                this.advertiseFieldSet = true;
                this.advertiseField = value;
            }
        }
        
        public string NoOpen
        {
            get
            {
                return this.noOpenField;
            }
            set
            {
                this.noOpenFieldSet = true;
                this.noOpenField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("ProgId", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.descriptionFieldSet)
            {
                writer.WriteAttributeString("Description", this.descriptionField);
            }
            if (this.iconFieldSet)
            {
                writer.WriteAttributeString("Icon", this.iconField);
            }
            if (this.iconIndexFieldSet)
            {
                writer.WriteAttributeString("IconIndex", this.iconIndexField.ToString());
            }
            if (this.advertiseFieldSet)
            {
                if ((this.advertiseField == YesNoType.no))
                {
                    writer.WriteAttributeString("Advertise", "no");
                }
                if ((this.advertiseField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Advertise", "yes");
                }
            }
            if (this.noOpenFieldSet)
            {
                writer.WriteAttributeString("NoOpen", this.noOpenField);
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
    
    public class InstallExecute : ActionModuleSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("InstallExecute", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class RegisterExtensionInfo : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("RegisterExtensionInfo", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class ValidateProductID : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("ValidateProductID", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class Shortcut : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string idField;
        
        private bool idFieldSet;
        
        private string directoryField;
        
        private bool directoryFieldSet;
        
        private string nameField;
        
        private bool nameFieldSet;
        
        private string longNameField;
        
        private bool longNameFieldSet;
        
        private string targetField;
        
        private bool targetFieldSet;
        
        private string descriptionField;
        
        private bool descriptionFieldSet;
        
        private string argumentsField;
        
        private bool argumentsFieldSet;
        
        private int hotkeyField;
        
        private bool hotkeyFieldSet;
        
        private string iconField;
        
        private bool iconFieldSet;
        
        private int iconIndexField;
        
        private bool iconIndexFieldSet;
        
        private ShowType showField;
        
        private bool showFieldSet;
        
        private string workingDirectoryField;
        
        private bool workingDirectoryFieldSet;
        
        private YesNoType advertiseField;
        
        private bool advertiseFieldSet;
        
        public Shortcut()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Sequence);
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(Icon), 0, 1));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string Directory
        {
            get
            {
                return this.directoryField;
            }
            set
            {
                this.directoryFieldSet = true;
                this.directoryField = value;
            }
        }
        
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameFieldSet = true;
                this.nameField = value;
            }
        }
        
        public string LongName
        {
            get
            {
                return this.longNameField;
            }
            set
            {
                this.longNameFieldSet = true;
                this.longNameField = value;
            }
        }
        
        public string Target
        {
            get
            {
                return this.targetField;
            }
            set
            {
                this.targetFieldSet = true;
                this.targetField = value;
            }
        }
        
        public string Description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionFieldSet = true;
                this.descriptionField = value;
            }
        }
        
        public string Arguments
        {
            get
            {
                return this.argumentsField;
            }
            set
            {
                this.argumentsFieldSet = true;
                this.argumentsField = value;
            }
        }
        
        public int Hotkey
        {
            get
            {
                return this.hotkeyField;
            }
            set
            {
                this.hotkeyFieldSet = true;
                this.hotkeyField = value;
            }
        }
        
        public string Icon
        {
            get
            {
                return this.iconField;
            }
            set
            {
                this.iconFieldSet = true;
                this.iconField = value;
            }
        }
        
        public int IconIndex
        {
            get
            {
                return this.iconIndexField;
            }
            set
            {
                this.iconIndexFieldSet = true;
                this.iconIndexField = value;
            }
        }
        
        public ShowType Show
        {
            get
            {
                return this.showField;
            }
            set
            {
                this.showFieldSet = true;
                this.showField = value;
            }
        }
        
        public string WorkingDirectory
        {
            get
            {
                return this.workingDirectoryField;
            }
            set
            {
                this.workingDirectoryFieldSet = true;
                this.workingDirectoryField = value;
            }
        }
        
        public YesNoType Advertise
        {
            get
            {
                return this.advertiseField;
            }
            set
            {
                this.advertiseFieldSet = true;
                this.advertiseField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("Shortcut", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.directoryFieldSet)
            {
                writer.WriteAttributeString("Directory", this.directoryField);
            }
            if (this.nameFieldSet)
            {
                writer.WriteAttributeString("Name", this.nameField);
            }
            if (this.longNameFieldSet)
            {
                writer.WriteAttributeString("LongName", this.longNameField);
            }
            if (this.targetFieldSet)
            {
                writer.WriteAttributeString("Target", this.targetField);
            }
            if (this.descriptionFieldSet)
            {
                writer.WriteAttributeString("Description", this.descriptionField);
            }
            if (this.argumentsFieldSet)
            {
                writer.WriteAttributeString("Arguments", this.argumentsField);
            }
            if (this.hotkeyFieldSet)
            {
                writer.WriteAttributeString("Hotkey", this.hotkeyField.ToString());
            }
            if (this.iconFieldSet)
            {
                writer.WriteAttributeString("Icon", this.iconField);
            }
            if (this.iconIndexFieldSet)
            {
                writer.WriteAttributeString("IconIndex", this.iconIndexField.ToString());
            }
            if (this.showFieldSet)
            {
                if ((this.showField == ShowType.normal))
                {
                    writer.WriteAttributeString("Show", "normal");
                }
                if ((this.showField == ShowType.minimized))
                {
                    writer.WriteAttributeString("Show", "minimized");
                }
                if ((this.showField == ShowType.maximized))
                {
                    writer.WriteAttributeString("Show", "maximized");
                }
            }
            if (this.workingDirectoryFieldSet)
            {
                writer.WriteAttributeString("WorkingDirectory", this.workingDirectoryField);
            }
            if (this.advertiseFieldSet)
            {
                if ((this.advertiseField == YesNoType.no))
                {
                    writer.WriteAttributeString("Advertise", "no");
                }
                if ((this.advertiseField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Advertise", "yes");
                }
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
        
        public enum ShowType
        {
            
            normal,
            
            minimized,
            
            maximized,
        }
    }
    
    public class Directory : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string idField;
        
        private bool idFieldSet;
        
        private string longNameField;
        
        private bool longNameFieldSet;
        
        private string longSourceField;
        
        private bool longSourceFieldSet;
        
        private string nameField;
        
        private bool nameFieldSet;
        
        private string sourceNameField;
        
        private bool sourceNameFieldSet;
        
        private string srcField;
        
        private bool srcFieldSet;
        
        public Directory()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Choice, 0, -1);
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Component)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Directory)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Merge)));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string LongName
        {
            get
            {
                return this.longNameField;
            }
            set
            {
                this.longNameFieldSet = true;
                this.longNameField = value;
            }
        }
        
        public string LongSource
        {
            get
            {
                return this.longSourceField;
            }
            set
            {
                this.longSourceFieldSet = true;
                this.longSourceField = value;
            }
        }
        
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameFieldSet = true;
                this.nameField = value;
            }
        }
        
        public string SourceName
        {
            get
            {
                return this.sourceNameField;
            }
            set
            {
                this.sourceNameFieldSet = true;
                this.sourceNameField = value;
            }
        }
        
        public string src
        {
            get
            {
                return this.srcField;
            }
            set
            {
                this.srcFieldSet = true;
                this.srcField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("Directory", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.longNameFieldSet)
            {
                writer.WriteAttributeString("LongName", this.longNameField);
            }
            if (this.longSourceFieldSet)
            {
                writer.WriteAttributeString("LongSource", this.longSourceField);
            }
            if (this.nameFieldSet)
            {
                writer.WriteAttributeString("Name", this.nameField);
            }
            if (this.sourceNameFieldSet)
            {
                writer.WriteAttributeString("SourceName", this.sourceNameField);
            }
            if (this.srcFieldSet)
            {
                writer.WriteAttributeString("src", this.srcField);
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
    
    public class MergeRef : ISchemaElement
    {
        
        private string idField;
        
        private bool idFieldSet;
        
        private int languageField;
        
        private bool languageFieldSet;
        
        private YesNoType primaryField;
        
        private bool primaryFieldSet;
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public int Language
        {
            get
            {
                return this.languageField;
            }
            set
            {
                this.languageFieldSet = true;
                this.languageField = value;
            }
        }
        
        public YesNoType Primary
        {
            get
            {
                return this.primaryField;
            }
            set
            {
                this.primaryFieldSet = true;
                this.primaryField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("MergeRef", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.languageFieldSet)
            {
                writer.WriteAttributeString("Language", this.languageField.ToString());
            }
            if (this.primaryFieldSet)
            {
                if ((this.primaryField == YesNoType.no))
                {
                    writer.WriteAttributeString("Primary", "no");
                }
                if ((this.primaryField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Primary", "yes");
                }
            }
            writer.WriteEndElement();
        }
    }
    
    public class Media : ISchemaElement
    {
        
        private ElementCollection children;
        
        private int idField;
        
        private bool idFieldSet;
        
        private string cabinetField;
        
        private bool cabinetFieldSet;
        
        private CompressionLevelType compressionLevelField;
        
        private bool compressionLevelFieldSet;
        
        private string diskPromptField;
        
        private bool diskPromptFieldSet;
        
        private YesNoType embedCabField;
        
        private bool embedCabFieldSet;
        
        private string srcField;
        
        private bool srcFieldSet;
        
        private string volumeLabelField;
        
        private bool volumeLabelFieldSet;
        
        public Media()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Sequence);
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(DigitalSignature), 0, 1));
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(PatchPackage), 0, -1));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public int Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string Cabinet
        {
            get
            {
                return this.cabinetField;
            }
            set
            {
                this.cabinetFieldSet = true;
                this.cabinetField = value;
            }
        }
        
        public CompressionLevelType CompressionLevel
        {
            get
            {
                return this.compressionLevelField;
            }
            set
            {
                this.compressionLevelFieldSet = true;
                this.compressionLevelField = value;
            }
        }
        
        public string DiskPrompt
        {
            get
            {
                return this.diskPromptField;
            }
            set
            {
                this.diskPromptFieldSet = true;
                this.diskPromptField = value;
            }
        }
        
        public YesNoType EmbedCab
        {
            get
            {
                return this.embedCabField;
            }
            set
            {
                this.embedCabFieldSet = true;
                this.embedCabField = value;
            }
        }
        
        public string src
        {
            get
            {
                return this.srcField;
            }
            set
            {
                this.srcFieldSet = true;
                this.srcField = value;
            }
        }
        
        public string VolumeLabel
        {
            get
            {
                return this.volumeLabelField;
            }
            set
            {
                this.volumeLabelFieldSet = true;
                this.volumeLabelField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("Media", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField.ToString());
            }
            if (this.cabinetFieldSet)
            {
                writer.WriteAttributeString("Cabinet", this.cabinetField);
            }
            if (this.compressionLevelFieldSet)
            {
                if ((this.compressionLevelField == CompressionLevelType.high))
                {
                    writer.WriteAttributeString("CompressionLevel", "high");
                }
                if ((this.compressionLevelField == CompressionLevelType.low))
                {
                    writer.WriteAttributeString("CompressionLevel", "low");
                }
                if ((this.compressionLevelField == CompressionLevelType.medium))
                {
                    writer.WriteAttributeString("CompressionLevel", "medium");
                }
                if ((this.compressionLevelField == CompressionLevelType.mszip))
                {
                    writer.WriteAttributeString("CompressionLevel", "mszip");
                }
                if ((this.compressionLevelField == CompressionLevelType.none))
                {
                    writer.WriteAttributeString("CompressionLevel", "none");
                }
            }
            if (this.diskPromptFieldSet)
            {
                writer.WriteAttributeString("DiskPrompt", this.diskPromptField);
            }
            if (this.embedCabFieldSet)
            {
                if ((this.embedCabField == YesNoType.no))
                {
                    writer.WriteAttributeString("EmbedCab", "no");
                }
                if ((this.embedCabField == YesNoType.yes))
                {
                    writer.WriteAttributeString("EmbedCab", "yes");
                }
            }
            if (this.srcFieldSet)
            {
                writer.WriteAttributeString("src", this.srcField);
            }
            if (this.volumeLabelFieldSet)
            {
                writer.WriteAttributeString("VolumeLabel", this.volumeLabelField);
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
        
        public enum CompressionLevelType
        {
            
            high,
            
            low,
            
            medium,
            
            mszip,
            
            none,
        }
    }
    
    public class InstallAdminPackage : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("InstallAdminPackage", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class Merge : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string idField;
        
        private bool idFieldSet;
        
        private int languageField;
        
        private bool languageFieldSet;
        
        private int directoryField;
        
        private bool directoryFieldSet;
        
        private string diskIdField;
        
        private bool diskIdFieldSet;
        
        private YesNoType fileCompressionField;
        
        private bool fileCompressionFieldSet;
        
        private string srcField;
        
        private bool srcFieldSet;
        
        public Merge()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Choice, 0, -1);
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(ConfigurationData)));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public int Language
        {
            get
            {
                return this.languageField;
            }
            set
            {
                this.languageFieldSet = true;
                this.languageField = value;
            }
        }
        
        public int Directory
        {
            get
            {
                return this.directoryField;
            }
            set
            {
                this.directoryFieldSet = true;
                this.directoryField = value;
            }
        }
        
        public string DiskId
        {
            get
            {
                return this.diskIdField;
            }
            set
            {
                this.diskIdFieldSet = true;
                this.diskIdField = value;
            }
        }
        
        public YesNoType FileCompression
        {
            get
            {
                return this.fileCompressionField;
            }
            set
            {
                this.fileCompressionFieldSet = true;
                this.fileCompressionField = value;
            }
        }
        
        public string src
        {
            get
            {
                return this.srcField;
            }
            set
            {
                this.srcFieldSet = true;
                this.srcField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("Merge", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.languageFieldSet)
            {
                writer.WriteAttributeString("Language", this.languageField.ToString());
            }
            if (this.directoryFieldSet)
            {
                writer.WriteAttributeString("Directory", this.directoryField.ToString());
            }
            if (this.diskIdFieldSet)
            {
                writer.WriteAttributeString("DiskId", this.diskIdField);
            }
            if (this.fileCompressionFieldSet)
            {
                if ((this.fileCompressionField == YesNoType.no))
                {
                    writer.WriteAttributeString("FileCompression", "no");
                }
                if ((this.fileCompressionField == YesNoType.yes))
                {
                    writer.WriteAttributeString("FileCompression", "yes");
                }
            }
            if (this.srcFieldSet)
            {
                writer.WriteAttributeString("src", this.srcField);
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
    
    public class Dependency : ISchemaElement
    {
        
        private string requiredIdField;
        
        private bool requiredIdFieldSet;
        
        private int requiredLanguageField;
        
        private bool requiredLanguageFieldSet;
        
        private string requiredVersionField;
        
        private bool requiredVersionFieldSet;
        
        public string RequiredId
        {
            get
            {
                return this.requiredIdField;
            }
            set
            {
                this.requiredIdFieldSet = true;
                this.requiredIdField = value;
            }
        }
        
        public int RequiredLanguage
        {
            get
            {
                return this.requiredLanguageField;
            }
            set
            {
                this.requiredLanguageFieldSet = true;
                this.requiredLanguageField = value;
            }
        }
        
        public string RequiredVersion
        {
            get
            {
                return this.requiredVersionField;
            }
            set
            {
                this.requiredVersionFieldSet = true;
                this.requiredVersionField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("Dependency", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.requiredIdFieldSet)
            {
                writer.WriteAttributeString("RequiredId", this.requiredIdField);
            }
            if (this.requiredLanguageFieldSet)
            {
                writer.WriteAttributeString("RequiredLanguage", this.requiredLanguageField.ToString());
            }
            if (this.requiredVersionFieldSet)
            {
                writer.WriteAttributeString("RequiredVersion", this.requiredVersionField);
            }
            writer.WriteEndElement();
        }
    }
    
    public class RecycleTime : ISchemaElement
    {
        
        private string valueField;
        
        private bool valueFieldSet;
        
        public string Value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueFieldSet = true;
                this.valueField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("RecycleTime", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.valueFieldSet)
            {
                writer.WriteAttributeString("Value", this.valueField);
            }
            writer.WriteEndElement();
        }
    }
    
    public class CostInitialize : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("CostInitialize", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class TargetProductCode : ISchemaElement
    {
        
        private string idField;
        
        private bool idFieldSet;
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("TargetProductCode", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            writer.WriteEndElement();
        }
    }
    
    public class ComponentRef : ISchemaElement
    {
        
        private string idField;
        
        private bool idFieldSet;
        
        private YesNoType primaryField;
        
        private bool primaryFieldSet;
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public YesNoType Primary
        {
            get
            {
                return this.primaryField;
            }
            set
            {
                this.primaryFieldSet = true;
                this.primaryField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("ComponentRef", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.primaryFieldSet)
            {
                if ((this.primaryField == YesNoType.no))
                {
                    writer.WriteAttributeString("Primary", "no");
                }
                if ((this.primaryField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Primary", "yes");
                }
            }
            writer.WriteEndElement();
        }
    }
    
    public class StopServices : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("StopServices", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class UnpublishComponents : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("UnpublishComponents", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class TargetImage : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string idField;
        
        private bool idFieldSet;
        
        private string srcField;
        
        private bool srcFieldSet;
        
        private int orderField;
        
        private bool orderFieldSet;
        
        private string validationField;
        
        private bool validationFieldSet;
        
        private YesNoType ignoreMissingFilesField;
        
        private bool ignoreMissingFilesFieldSet;
        
        public TargetImage()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Choice, 0, -1);
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(SymbolPath)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(TargetFile)));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string src
        {
            get
            {
                return this.srcField;
            }
            set
            {
                this.srcFieldSet = true;
                this.srcField = value;
            }
        }
        
        public int Order
        {
            get
            {
                return this.orderField;
            }
            set
            {
                this.orderFieldSet = true;
                this.orderField = value;
            }
        }
        
        public string Validation
        {
            get
            {
                return this.validationField;
            }
            set
            {
                this.validationFieldSet = true;
                this.validationField = value;
            }
        }
        
        public YesNoType IgnoreMissingFiles
        {
            get
            {
                return this.ignoreMissingFilesField;
            }
            set
            {
                this.ignoreMissingFilesFieldSet = true;
                this.ignoreMissingFilesField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("TargetImage", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.srcFieldSet)
            {
                writer.WriteAttributeString("src", this.srcField);
            }
            if (this.orderFieldSet)
            {
                writer.WriteAttributeString("Order", this.orderField.ToString());
            }
            if (this.validationFieldSet)
            {
                writer.WriteAttributeString("Validation", this.validationField);
            }
            if (this.ignoreMissingFilesFieldSet)
            {
                if ((this.ignoreMissingFilesField == YesNoType.no))
                {
                    writer.WriteAttributeString("IgnoreMissingFiles", "no");
                }
                if ((this.ignoreMissingFilesField == YesNoType.yes))
                {
                    writer.WriteAttributeString("IgnoreMissingFiles", "yes");
                }
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
    
    public class RemoveDuplicateFiles : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("RemoveDuplicateFiles", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class RegistrySearchRef : ISchemaElement
    {
        
        private string idField;
        
        private bool idFieldSet;
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("RegistrySearchRef", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            writer.WriteEndElement();
        }
    }
    
    public class PerfCounter : ISchemaElement
    {
        
        private string nameField;
        
        private bool nameFieldSet;
        
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameFieldSet = true;
                this.nameField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("PerfCounter", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.nameFieldSet)
            {
                writer.WriteAttributeString("Name", this.nameField);
            }
            writer.WriteEndElement();
        }
    }
    
    public class Category : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string idField;
        
        private bool idFieldSet;
        
        private string qualifierField;
        
        private bool qualifierFieldSet;
        
        private string appDataField;
        
        private bool appDataFieldSet;
        
        private string featureField;
        
        private bool featureFieldSet;
        
        public Category()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Sequence);
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(AppData), 1, 1));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string Qualifier
        {
            get
            {
                return this.qualifierField;
            }
            set
            {
                this.qualifierFieldSet = true;
                this.qualifierField = value;
            }
        }
        
        public string AppData
        {
            get
            {
                return this.appDataField;
            }
            set
            {
                this.appDataFieldSet = true;
                this.appDataField = value;
            }
        }
        
        public string Feature
        {
            get
            {
                return this.featureField;
            }
            set
            {
                this.featureFieldSet = true;
                this.featureField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("Category", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.qualifierFieldSet)
            {
                writer.WriteAttributeString("Qualifier", this.qualifierField);
            }
            if (this.appDataFieldSet)
            {
                writer.WriteAttributeString("AppData", this.appDataField);
            }
            if (this.featureFieldSet)
            {
                writer.WriteAttributeString("Feature", this.featureField);
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
    
    public class IsolateComponent : ISchemaElement
    {
        
        private string sharedField;
        
        private bool sharedFieldSet;
        
        public string Shared
        {
            get
            {
                return this.sharedField;
            }
            set
            {
                this.sharedFieldSet = true;
                this.sharedField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("IsolateComponent", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.sharedFieldSet)
            {
                writer.WriteAttributeString("Shared", this.sharedField);
            }
            writer.WriteEndElement();
        }
    }
    
    public class Data : ISchemaElement
    {
        
        private string columnField;
        
        private bool columnFieldSet;
        
        private string contentField;
        
        private bool contentFieldSet;
        
        public string Column
        {
            get
            {
                return this.columnField;
            }
            set
            {
                this.columnFieldSet = true;
                this.columnField = value;
            }
        }
        
        public string Content
        {
            get
            {
                return this.contentField;
            }
            set
            {
                this.contentFieldSet = true;
                this.contentField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("Data", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.columnFieldSet)
            {
                writer.WriteAttributeString("Column", this.columnField);
            }
            if (this.contentFieldSet)
            {
                writer.WriteString(this.contentField);
            }
            writer.WriteEndElement();
        }
    }
    
    public class Product : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string idField;
        
        private bool idFieldSet;
        
        private int codepageField;
        
        private bool codepageFieldSet;
        
        private string languageField;
        
        private bool languageFieldSet;
        
        private string manufacturerField;
        
        private bool manufacturerFieldSet;
        
        private string nameField;
        
        private bool nameFieldSet;
        
        private string upgradeCodeField;
        
        private bool upgradeCodeFieldSet;
        
        private string versionField;
        
        private bool versionFieldSet;
        
        public Product()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Sequence);
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(Package), 1, 1));
            ElementCollection childCollection1 = new ElementCollection(ElementCollection.CollectionType.Choice, 0, -1);
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(AppId)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(Binary)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(ComplianceCheck)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(Condition)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(CustomAction)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(CustomTable)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(Directory)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(DirectoryRef)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(EnsureTable)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(Feature)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(FeatureRef)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(FragmentRef)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(Group)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(Icon)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(Media)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(Property)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(PropertyRef)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(SFPCatalog)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(SqlDatabase)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(Upgrade)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(UI)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(User)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(WebApplication)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(WebAppPool)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(WebDirProperties)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(WebLog)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(WebSite)));
            ElementCollection childCollection2 = new ElementCollection(ElementCollection.CollectionType.Sequence);
            childCollection2.AddItem(new ElementCollection.SequenceItem(typeof(InstallExecuteSequence), 0, 1));
            childCollection2.AddItem(new ElementCollection.SequenceItem(typeof(InstallUISequence), 0, 1));
            childCollection2.AddItem(new ElementCollection.SequenceItem(typeof(AdminExecuteSequence), 0, 1));
            childCollection2.AddItem(new ElementCollection.SequenceItem(typeof(AdminUISequence), 0, 1));
            childCollection2.AddItem(new ElementCollection.SequenceItem(typeof(AdvertiseExecuteSequence), 0, 1));
            childCollection1.AddCollection(childCollection2);
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(ISchemaElement)));
            childCollection0.AddCollection(childCollection1);
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public int Codepage
        {
            get
            {
                return this.codepageField;
            }
            set
            {
                this.codepageFieldSet = true;
                this.codepageField = value;
            }
        }
        
        public string Language
        {
            get
            {
                return this.languageField;
            }
            set
            {
                this.languageFieldSet = true;
                this.languageField = value;
            }
        }
        
        public string Manufacturer
        {
            get
            {
                return this.manufacturerField;
            }
            set
            {
                this.manufacturerFieldSet = true;
                this.manufacturerField = value;
            }
        }
        
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameFieldSet = true;
                this.nameField = value;
            }
        }
        
        public string UpgradeCode
        {
            get
            {
                return this.upgradeCodeField;
            }
            set
            {
                this.upgradeCodeFieldSet = true;
                this.upgradeCodeField = value;
            }
        }
        
        public string Version
        {
            get
            {
                return this.versionField;
            }
            set
            {
                this.versionFieldSet = true;
                this.versionField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("Product", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.codepageFieldSet)
            {
                writer.WriteAttributeString("Codepage", this.codepageField.ToString());
            }
            if (this.languageFieldSet)
            {
                writer.WriteAttributeString("Language", this.languageField);
            }
            if (this.manufacturerFieldSet)
            {
                writer.WriteAttributeString("Manufacturer", this.manufacturerField);
            }
            if (this.nameFieldSet)
            {
                writer.WriteAttributeString("Name", this.nameField);
            }
            if (this.upgradeCodeFieldSet)
            {
                writer.WriteAttributeString("UpgradeCode", this.upgradeCodeField);
            }
            if (this.versionFieldSet)
            {
                writer.WriteAttributeString("Version", this.versionField);
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
    
    public class InstallUISequence : ISchemaElement
    {
        
        private ElementCollection children;
        
        public InstallUISequence()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Choice, 0, -1);
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Custom)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(Show)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(ScheduleReboot)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(LaunchConditions)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(FindRelatedProducts)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(AppSearch)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(CCPSearch)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(RMCCPSearch)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(ValidateProductID)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(CostInitialize)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(FileCost)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(IsolateComponents)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(ResolveSource)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(CostFinalize)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(MigrateFeatureStates)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(ExecuteAction)));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("InstallUISequence", "http://schemas.microsoft.com/wix/2003/01/wi");
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
    
    public class ServiceConfig : ISchemaElement
    {
        
        private string serviceNameField;
        
        private bool serviceNameFieldSet;
        
        private FirstFailureActionTypeType firstFailureActionTypeField;
        
        private bool firstFailureActionTypeFieldSet;
        
        private SecondFailureActionTypeType secondFailureActionTypeField;
        
        private bool secondFailureActionTypeFieldSet;
        
        private ThirdFailureActionTypeType thirdFailureActionTypeField;
        
        private bool thirdFailureActionTypeFieldSet;
        
        private int resetPeriodInDaysField;
        
        private bool resetPeriodInDaysFieldSet;
        
        private int restartServiceDelayInSecondsField;
        
        private bool restartServiceDelayInSecondsFieldSet;
        
        private string programCommandLineField;
        
        private bool programCommandLineFieldSet;
        
        private string rebootMessageField;
        
        private bool rebootMessageFieldSet;
        
        public string ServiceName
        {
            get
            {
                return this.serviceNameField;
            }
            set
            {
                this.serviceNameFieldSet = true;
                this.serviceNameField = value;
            }
        }
        
        public FirstFailureActionTypeType FirstFailureActionType
        {
            get
            {
                return this.firstFailureActionTypeField;
            }
            set
            {
                this.firstFailureActionTypeFieldSet = true;
                this.firstFailureActionTypeField = value;
            }
        }
        
        public SecondFailureActionTypeType SecondFailureActionType
        {
            get
            {
                return this.secondFailureActionTypeField;
            }
            set
            {
                this.secondFailureActionTypeFieldSet = true;
                this.secondFailureActionTypeField = value;
            }
        }
        
        public ThirdFailureActionTypeType ThirdFailureActionType
        {
            get
            {
                return this.thirdFailureActionTypeField;
            }
            set
            {
                this.thirdFailureActionTypeFieldSet = true;
                this.thirdFailureActionTypeField = value;
            }
        }
        
        public int ResetPeriodInDays
        {
            get
            {
                return this.resetPeriodInDaysField;
            }
            set
            {
                this.resetPeriodInDaysFieldSet = true;
                this.resetPeriodInDaysField = value;
            }
        }
        
        public int RestartServiceDelayInSeconds
        {
            get
            {
                return this.restartServiceDelayInSecondsField;
            }
            set
            {
                this.restartServiceDelayInSecondsFieldSet = true;
                this.restartServiceDelayInSecondsField = value;
            }
        }
        
        public string ProgramCommandLine
        {
            get
            {
                return this.programCommandLineField;
            }
            set
            {
                this.programCommandLineFieldSet = true;
                this.programCommandLineField = value;
            }
        }
        
        public string RebootMessage
        {
            get
            {
                return this.rebootMessageField;
            }
            set
            {
                this.rebootMessageFieldSet = true;
                this.rebootMessageField = value;
            }
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("ServiceConfig", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.serviceNameFieldSet)
            {
                writer.WriteAttributeString("ServiceName", this.serviceNameField);
            }
            if (this.firstFailureActionTypeFieldSet)
            {
                if ((this.firstFailureActionTypeField == FirstFailureActionTypeType.none))
                {
                    writer.WriteAttributeString("FirstFailureActionType", "none");
                }
                if ((this.firstFailureActionTypeField == FirstFailureActionTypeType.reboot))
                {
                    writer.WriteAttributeString("FirstFailureActionType", "reboot");
                }
                if ((this.firstFailureActionTypeField == FirstFailureActionTypeType.restart))
                {
                    writer.WriteAttributeString("FirstFailureActionType", "restart");
                }
                if ((this.firstFailureActionTypeField == FirstFailureActionTypeType.runCommand))
                {
                    writer.WriteAttributeString("FirstFailureActionType", "runCommand");
                }
            }
            if (this.secondFailureActionTypeFieldSet)
            {
                if ((this.secondFailureActionTypeField == SecondFailureActionTypeType.none))
                {
                    writer.WriteAttributeString("SecondFailureActionType", "none");
                }
                if ((this.secondFailureActionTypeField == SecondFailureActionTypeType.reboot))
                {
                    writer.WriteAttributeString("SecondFailureActionType", "reboot");
                }
                if ((this.secondFailureActionTypeField == SecondFailureActionTypeType.restart))
                {
                    writer.WriteAttributeString("SecondFailureActionType", "restart");
                }
                if ((this.secondFailureActionTypeField == SecondFailureActionTypeType.runCommand))
                {
                    writer.WriteAttributeString("SecondFailureActionType", "runCommand");
                }
            }
            if (this.thirdFailureActionTypeFieldSet)
            {
                if ((this.thirdFailureActionTypeField == ThirdFailureActionTypeType.none))
                {
                    writer.WriteAttributeString("ThirdFailureActionType", "none");
                }
                if ((this.thirdFailureActionTypeField == ThirdFailureActionTypeType.reboot))
                {
                    writer.WriteAttributeString("ThirdFailureActionType", "reboot");
                }
                if ((this.thirdFailureActionTypeField == ThirdFailureActionTypeType.restart))
                {
                    writer.WriteAttributeString("ThirdFailureActionType", "restart");
                }
                if ((this.thirdFailureActionTypeField == ThirdFailureActionTypeType.runCommand))
                {
                    writer.WriteAttributeString("ThirdFailureActionType", "runCommand");
                }
            }
            if (this.resetPeriodInDaysFieldSet)
            {
                writer.WriteAttributeString("ResetPeriodInDays", this.resetPeriodInDaysField.ToString());
            }
            if (this.restartServiceDelayInSecondsFieldSet)
            {
                writer.WriteAttributeString("RestartServiceDelayInSeconds", this.restartServiceDelayInSecondsField.ToString());
            }
            if (this.programCommandLineFieldSet)
            {
                writer.WriteAttributeString("ProgramCommandLine", this.programCommandLineField);
            }
            if (this.rebootMessageFieldSet)
            {
                writer.WriteAttributeString("RebootMessage", this.rebootMessageField);
            }
            writer.WriteEndElement();
        }
        
        public enum FirstFailureActionTypeType
        {
            
            none,
            
            reboot,
            
            restart,
            
            runCommand,
        }
        
        public enum SecondFailureActionTypeType
        {
            
            none,
            
            reboot,
            
            restart,
            
            runCommand,
        }
        
        public enum ThirdFailureActionTypeType
        {
            
            none,
            
            reboot,
            
            restart,
            
            runCommand,
        }
    }
    
    public class ExternalFile : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string fileField;
        
        private bool fileFieldSet;
        
        private string srcField;
        
        private bool srcFieldSet;
        
        private int orderField;
        
        private bool orderFieldSet;
        
        public ExternalFile()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Sequence);
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(ProtectRange), 1, -1));
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(SymbolPath), 1, -1));
            ElementCollection childCollection1 = new ElementCollection(ElementCollection.CollectionType.Choice, 0, -1);
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(IgnoreRange)));
            childCollection0.AddCollection(childCollection1);
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string File
        {
            get
            {
                return this.fileField;
            }
            set
            {
                this.fileFieldSet = true;
                this.fileField = value;
            }
        }
        
        public string src
        {
            get
            {
                return this.srcField;
            }
            set
            {
                this.srcFieldSet = true;
                this.srcField = value;
            }
        }
        
        public int Order
        {
            get
            {
                return this.orderField;
            }
            set
            {
                this.orderFieldSet = true;
                this.orderField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("ExternalFile", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.fileFieldSet)
            {
                writer.WriteAttributeString("File", this.fileField);
            }
            if (this.srcFieldSet)
            {
                writer.WriteAttributeString("src", this.srcField);
            }
            if (this.orderFieldSet)
            {
                writer.WriteAttributeString("Order", this.orderField.ToString());
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
    
    public class PublishFeatures : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("PublishFeatures", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class AppSearch : ActionModuleSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("AppSearch", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class DirectorySearchRef : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string idField;
        
        private bool idFieldSet;
        
        private string parentField;
        
        private bool parentFieldSet;
        
        private string pathField;
        
        private bool pathFieldSet;
        
        public DirectorySearchRef()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Choice, 0, 1);
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(DirectorySearch)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(DirectorySearchRef)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(FileSearch)));
            childCollection0.AddItem(new ElementCollection.ChoiceItem(typeof(FileSearchRef)));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string Parent
        {
            get
            {
                return this.parentField;
            }
            set
            {
                this.parentFieldSet = true;
                this.parentField = value;
            }
        }
        
        public string Path
        {
            get
            {
                return this.pathField;
            }
            set
            {
                this.pathFieldSet = true;
                this.pathField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("DirectorySearchRef", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.parentFieldSet)
            {
                writer.WriteAttributeString("Parent", this.parentField);
            }
            if (this.pathFieldSet)
            {
                writer.WriteAttributeString("Path", this.pathField);
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
    
    public class UnregisterMIMEInfo : ActionSequenceType, ISchemaElement
    {
        
        public override void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("UnregisterMIMEInfo", "http://schemas.microsoft.com/wix/2003/01/wi");
            base.OutputXml(writer);
            writer.WriteEndElement();
        }
    }
    
    public class PatchCreation : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string idField;
        
        private bool idFieldSet;
        
        private string outputPathField;
        
        private bool outputPathFieldSet;
        
        private YesNoType wholeFilesOnlyField;
        
        private bool wholeFilesOnlyFieldSet;
        
        private string sourceListField;
        
        private bool sourceListFieldSet;
        
        private YesNoType allowProductCodeMismatchesField;
        
        private bool allowProductCodeMismatchesFieldSet;
        
        private YesNoType allowMajorVersionMismatchesField;
        
        private bool allowMajorVersionMismatchesFieldSet;
        
        private YesNoType cleanWorkingFolderField;
        
        private bool cleanWorkingFolderFieldSet;
        
        private int symbolFlagsField;
        
        private bool symbolFlagsFieldSet;
        
        public PatchCreation()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Sequence);
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(PatchInformation), 1, 1));
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(PatchMetadata), 0, 1));
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(Family), 1, -1));
            ElementCollection childCollection1 = new ElementCollection(ElementCollection.CollectionType.Choice, 0, -1);
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(PatchProperty)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(PatchSequence)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(ReplacePatch)));
            childCollection1.AddItem(new ElementCollection.ChoiceItem(typeof(TargetProductCode)));
            childCollection0.AddCollection(childCollection1);
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string OutputPath
        {
            get
            {
                return this.outputPathField;
            }
            set
            {
                this.outputPathFieldSet = true;
                this.outputPathField = value;
            }
        }
        
        public YesNoType WholeFilesOnly
        {
            get
            {
                return this.wholeFilesOnlyField;
            }
            set
            {
                this.wholeFilesOnlyFieldSet = true;
                this.wholeFilesOnlyField = value;
            }
        }
        
        public string SourceList
        {
            get
            {
                return this.sourceListField;
            }
            set
            {
                this.sourceListFieldSet = true;
                this.sourceListField = value;
            }
        }
        
        public YesNoType AllowProductCodeMismatches
        {
            get
            {
                return this.allowProductCodeMismatchesField;
            }
            set
            {
                this.allowProductCodeMismatchesFieldSet = true;
                this.allowProductCodeMismatchesField = value;
            }
        }
        
        public YesNoType AllowMajorVersionMismatches
        {
            get
            {
                return this.allowMajorVersionMismatchesField;
            }
            set
            {
                this.allowMajorVersionMismatchesFieldSet = true;
                this.allowMajorVersionMismatchesField = value;
            }
        }
        
        public YesNoType CleanWorkingFolder
        {
            get
            {
                return this.cleanWorkingFolderField;
            }
            set
            {
                this.cleanWorkingFolderFieldSet = true;
                this.cleanWorkingFolderField = value;
            }
        }
        
        public int SymbolFlags
        {
            get
            {
                return this.symbolFlagsField;
            }
            set
            {
                this.symbolFlagsFieldSet = true;
                this.symbolFlagsField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("PatchCreation", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.outputPathFieldSet)
            {
                writer.WriteAttributeString("OutputPath", this.outputPathField);
            }
            if (this.wholeFilesOnlyFieldSet)
            {
                if ((this.wholeFilesOnlyField == YesNoType.no))
                {
                    writer.WriteAttributeString("WholeFilesOnly", "no");
                }
                if ((this.wholeFilesOnlyField == YesNoType.yes))
                {
                    writer.WriteAttributeString("WholeFilesOnly", "yes");
                }
            }
            if (this.sourceListFieldSet)
            {
                writer.WriteAttributeString("SourceList", this.sourceListField);
            }
            if (this.allowProductCodeMismatchesFieldSet)
            {
                if ((this.allowProductCodeMismatchesField == YesNoType.no))
                {
                    writer.WriteAttributeString("AllowProductCodeMismatches", "no");
                }
                if ((this.allowProductCodeMismatchesField == YesNoType.yes))
                {
                    writer.WriteAttributeString("AllowProductCodeMismatches", "yes");
                }
            }
            if (this.allowMajorVersionMismatchesFieldSet)
            {
                if ((this.allowMajorVersionMismatchesField == YesNoType.no))
                {
                    writer.WriteAttributeString("AllowMajorVersionMismatches", "no");
                }
                if ((this.allowMajorVersionMismatchesField == YesNoType.yes))
                {
                    writer.WriteAttributeString("AllowMajorVersionMismatches", "yes");
                }
            }
            if (this.cleanWorkingFolderFieldSet)
            {
                if ((this.cleanWorkingFolderField == YesNoType.no))
                {
                    writer.WriteAttributeString("CleanWorkingFolder", "no");
                }
                if ((this.cleanWorkingFolderField == YesNoType.yes))
                {
                    writer.WriteAttributeString("CleanWorkingFolder", "yes");
                }
            }
            if (this.symbolFlagsFieldSet)
            {
                writer.WriteAttributeString("SymbolFlags", this.symbolFlagsField.ToString());
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
    
    public class User : ISchemaElement
    {
        
        private ElementCollection children;
        
        private string idField;
        
        private bool idFieldSet;
        
        private string nameField;
        
        private bool nameFieldSet;
        
        private string domainField;
        
        private bool domainFieldSet;
        
        private string passwordField;
        
        private bool passwordFieldSet;
        
        private YesNoType passwordNeverExpiresField;
        
        private bool passwordNeverExpiresFieldSet;
        
        private YesNoType canNotChangePasswordField;
        
        private bool canNotChangePasswordFieldSet;
        
        private YesNoType removeOnUninstallField;
        
        private bool removeOnUninstallFieldSet;
        
        private YesNoType failIfExistsField;
        
        private bool failIfExistsFieldSet;
        
        private YesNoType updateIfExistsField;
        
        private bool updateIfExistsFieldSet;
        
        private YesNoType passwordExpiredField;
        
        private bool passwordExpiredFieldSet;
        
        private YesNoType disabledField;
        
        private bool disabledFieldSet;
        
        private YesNoType createUserField;
        
        private bool createUserFieldSet;
        
        public User()
        {
            ElementCollection childCollection0 = new ElementCollection(ElementCollection.CollectionType.Sequence);
            childCollection0.AddItem(new ElementCollection.SequenceItem(typeof(GroupRef), 0, -1));
            this.children = childCollection0;
        }
        
        public virtual IEnumerable Children
        {
            get
            {
                return this.children;
            }
        }
        
        public virtual IEnumerable this[System.Type childType]
        {
            get
            {
                return this.children.Filter(childType);
            }
        }
        
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idFieldSet = true;
                this.idField = value;
            }
        }
        
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameFieldSet = true;
                this.nameField = value;
            }
        }
        
        public string Domain
        {
            get
            {
                return this.domainField;
            }
            set
            {
                this.domainFieldSet = true;
                this.domainField = value;
            }
        }
        
        public string Password
        {
            get
            {
                return this.passwordField;
            }
            set
            {
                this.passwordFieldSet = true;
                this.passwordField = value;
            }
        }
        
        public YesNoType PasswordNeverExpires
        {
            get
            {
                return this.passwordNeverExpiresField;
            }
            set
            {
                this.passwordNeverExpiresFieldSet = true;
                this.passwordNeverExpiresField = value;
            }
        }
        
        public YesNoType CanNotChangePassword
        {
            get
            {
                return this.canNotChangePasswordField;
            }
            set
            {
                this.canNotChangePasswordFieldSet = true;
                this.canNotChangePasswordField = value;
            }
        }
        
        public YesNoType RemoveOnUninstall
        {
            get
            {
                return this.removeOnUninstallField;
            }
            set
            {
                this.removeOnUninstallFieldSet = true;
                this.removeOnUninstallField = value;
            }
        }
        
        public YesNoType FailIfExists
        {
            get
            {
                return this.failIfExistsField;
            }
            set
            {
                this.failIfExistsFieldSet = true;
                this.failIfExistsField = value;
            }
        }
        
        public YesNoType UpdateIfExists
        {
            get
            {
                return this.updateIfExistsField;
            }
            set
            {
                this.updateIfExistsFieldSet = true;
                this.updateIfExistsField = value;
            }
        }
        
        public YesNoType PasswordExpired
        {
            get
            {
                return this.passwordExpiredField;
            }
            set
            {
                this.passwordExpiredFieldSet = true;
                this.passwordExpiredField = value;
            }
        }
        
        public YesNoType Disabled
        {
            get
            {
                return this.disabledField;
            }
            set
            {
                this.disabledFieldSet = true;
                this.disabledField = value;
            }
        }
        
        public YesNoType CreateUser
        {
            get
            {
                return this.createUserField;
            }
            set
            {
                this.createUserFieldSet = true;
                this.createUserField = value;
            }
        }
        
        public virtual void AddChild(ISchemaElement child)
        {
            this.children.AddElement(child);
        }
        
        public virtual void RemoveChild(ISchemaElement child)
        {
            this.children.RemoveElement(child);
        }
        
        public virtual void OutputXml(XmlTextWriter writer)
        {
            writer.WriteStartElement("User", "http://schemas.microsoft.com/wix/2003/01/wi");
            if (this.idFieldSet)
            {
                writer.WriteAttributeString("Id", this.idField);
            }
            if (this.nameFieldSet)
            {
                writer.WriteAttributeString("Name", this.nameField);
            }
            if (this.domainFieldSet)
            {
                writer.WriteAttributeString("Domain", this.domainField);
            }
            if (this.passwordFieldSet)
            {
                writer.WriteAttributeString("Password", this.passwordField);
            }
            if (this.passwordNeverExpiresFieldSet)
            {
                if ((this.passwordNeverExpiresField == YesNoType.no))
                {
                    writer.WriteAttributeString("PasswordNeverExpires", "no");
                }
                if ((this.passwordNeverExpiresField == YesNoType.yes))
                {
                    writer.WriteAttributeString("PasswordNeverExpires", "yes");
                }
            }
            if (this.canNotChangePasswordFieldSet)
            {
                if ((this.canNotChangePasswordField == YesNoType.no))
                {
                    writer.WriteAttributeString("CanNotChangePassword", "no");
                }
                if ((this.canNotChangePasswordField == YesNoType.yes))
                {
                    writer.WriteAttributeString("CanNotChangePassword", "yes");
                }
            }
            if (this.removeOnUninstallFieldSet)
            {
                if ((this.removeOnUninstallField == YesNoType.no))
                {
                    writer.WriteAttributeString("RemoveOnUninstall", "no");
                }
                if ((this.removeOnUninstallField == YesNoType.yes))
                {
                    writer.WriteAttributeString("RemoveOnUninstall", "yes");
                }
            }
            if (this.failIfExistsFieldSet)
            {
                if ((this.failIfExistsField == YesNoType.no))
                {
                    writer.WriteAttributeString("FailIfExists", "no");
                }
                if ((this.failIfExistsField == YesNoType.yes))
                {
                    writer.WriteAttributeString("FailIfExists", "yes");
                }
            }
            if (this.updateIfExistsFieldSet)
            {
                if ((this.updateIfExistsField == YesNoType.no))
                {
                    writer.WriteAttributeString("UpdateIfExists", "no");
                }
                if ((this.updateIfExistsField == YesNoType.yes))
                {
                    writer.WriteAttributeString("UpdateIfExists", "yes");
                }
            }
            if (this.passwordExpiredFieldSet)
            {
                if ((this.passwordExpiredField == YesNoType.no))
                {
                    writer.WriteAttributeString("PasswordExpired", "no");
                }
                if ((this.passwordExpiredField == YesNoType.yes))
                {
                    writer.WriteAttributeString("PasswordExpired", "yes");
                }
            }
            if (this.disabledFieldSet)
            {
                if ((this.disabledField == YesNoType.no))
                {
                    writer.WriteAttributeString("Disabled", "no");
                }
                if ((this.disabledField == YesNoType.yes))
                {
                    writer.WriteAttributeString("Disabled", "yes");
                }
            }
            if (this.createUserFieldSet)
            {
                if ((this.createUserField == YesNoType.no))
                {
                    writer.WriteAttributeString("CreateUser", "no");
                }
                if ((this.createUserField == YesNoType.yes))
                {
                    writer.WriteAttributeString("CreateUser", "yes");
                }
            }
            for (IEnumerator enumerator = this.children.GetEnumerator(); enumerator.MoveNext(); )
            {
                ISchemaElement childElement = ((ISchemaElement)(enumerator.Current));
                childElement.OutputXml(writer);
            }
            writer.WriteEndElement();
        }
    }
}
