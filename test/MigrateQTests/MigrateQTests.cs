//-----------------------------------------------------------------------
// <copyright file="MigrateQTests.cs" company="Microsoft">
//     Copyright (c) Microsoft Corporation.  All rights reserved.
//    
//    The use and distribution terms for this software are covered by the
//    Common Public License 1.0 (http://opensource.org/licenses/cpl1.0.php)
//    which can be found in the file CPL.TXT at the root of this distribution.
//    By using this software in any fashion, you are agreeing to be bound by
//    the terms of this license.
//    
//    You must not remove this notice, or any other, from this software.
// </copyright>
// <summary>
//     Creates Test Methods for QTests to run them in the Wix Tests harness
// </summary>
//-----------------------------------------------------------------------

namespace WixTest.MigrateQTests
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Text;
    using System.Xml;

    /// <summary>
    /// Creates Test Methods for QTests to run them in the Wix Tests harness
    /// </summary>
    internal class MigrateQTests
    {
        /// <summary>
        /// Main method
        /// </summary>
        /// <param name="args">Command line arguments</param>
        public static void Main(string[] args)
        {
            string testsXml = String.Empty;
            string autoGeneratedQTests = String.Empty;

            // Parse the input
            if (args.Length < 2)
            {
                Console.WriteLine("Error: Please specify the path to the QTests file (tests.xml) and the AutoGeneratedQTests.cs file");
                Console.WriteLine();
                Console.WriteLine("Migrates QTests into a .cs file that gets built into WixTests.dll");
                Console.WriteLine("Usage: MigrateQTests.exe <tests.xml> <AutoGeneratedQTests.cs>");
                return;
            }
            else
            {
                // Verify that tests.xml exists
                testsXml = Environment.ExpandEnvironmentVariables(args[0]);
                if (!File.Exists(testsXml))
                {
                    Console.WriteLine("Error: File not found: {0}", testsXml);
                    return;
                }

                // Verify that QTests.cs has a valid path and name
                autoGeneratedQTests = Environment.ExpandEnvironmentVariables(args[1]);

                if (!Path.GetFileName(autoGeneratedQTests).Equals("AutoGeneratedQTests.cs", StringComparison.OrdinalIgnoreCase))
                {
                    Console.WriteLine("Error: The output file must be named AutoGeneratedQTests.cs. It is named: {0}", Path.GetFileName(autoGeneratedQTests));
                    return;
                }

                if (!Directory.Exists(Path.GetDirectoryName(autoGeneratedQTests)))
                {
                    Console.WriteLine("Error: The directory for AutoGeneratedQTests.cs must exist. Directory not found: {0}", Path.GetDirectoryName(autoGeneratedQTests));
                    return;
                }
            }

            // Load the tests.xml file
            XmlDocument xmlDocument = new XmlDocument();
            xmlDocument.Load(testsXml);

            // xpath query for the unit test nodes
            XmlNamespaceManager xmlNamespaceManager = new XmlNamespaceManager(new NameTable());
            xmlNamespaceManager.AddNamespace("qt", "http://schemas.microsoft.com/wix/2006/WixUnit");

            string xpath = @"//qt:UnitTests/qt:UnitTest[@Name]";
            XmlNodeList qtests = xmlDocument.SelectNodes(xpath, xmlNamespaceManager);

            // Create a .cs file (overwrite existing one)            
            FileInfo autoGeneratedQTestsFileInfo = new FileInfo(autoGeneratedQTests);

            if (autoGeneratedQTestsFileInfo.Exists && autoGeneratedQTestsFileInfo.IsReadOnly)
            {
                autoGeneratedQTestsFileInfo.IsReadOnly = false;
            }

            StringBuilder qtestCode = MigrateQTests.GenerateCode(qtests);

            StreamWriter sw = File.CreateText(autoGeneratedQTests);
            sw.Write(qtestCode.ToString());
            sw.Close();

            Console.WriteLine("Created {0} with {1} QTests", autoGeneratedQTests, qtests.Count);
        }

        /// <summary>
        /// Generates the code for the QTests.cs file
        /// </summary>
        /// <param name="qtests">An XmlNodeList that contains all of the qtest names</param>
        /// <returns>A StringBuilder with the generated code</returns>
        private static StringBuilder GenerateCode(XmlNodeList qtests)
        {
            StringBuilder qtestCode = new StringBuilder();

            qtestCode.AppendLine("//-----------------------------------------------------------------------");
            qtestCode.AppendLine("// <copyright file=\"AutoGeneratedQTests.cs\" company=\"Microsoft\">");
            qtestCode.AppendLine("//     Copyright (c) Microsoft Corporation.  All rights reserved.");
            qtestCode.AppendLine("// </copyright>");
            qtestCode.AppendLine("// <summary>");
            qtestCode.AppendLine("//     Contains test methods for the QTests");
            qtestCode.AppendLine("// </summary>");
            qtestCode.AppendLine("//-----------------------------------------------------------------------");
            qtestCode.AppendLine();
            qtestCode.AppendLine("namespace WixTest.Tests");
            qtestCode.AppendLine("{");
            qtestCode.AppendLine("    using Microsoft.VisualStudio.TestTools.UnitTesting;");
            qtestCode.AppendLine();
            qtestCode.AppendLine("    /// <summary>");
            qtestCode.AppendLine("    /// Contains test methods for the QTests");
            qtestCode.AppendLine("    /// </summary>");
            qtestCode.AppendLine("    public partial class QTests : WixTests");
            qtestCode.AppendLine("    {");
            qtestCode.AppendLine();
            qtestCode.AppendLine("        //[TestMethod]");
            qtestCode.AppendLine("        //[Description(\"Example QTest\")]");
            qtestCode.AppendLine("        //[Priority(2)]");
            qtestCode.AppendLine("        //public void ExampleQTest()");
            qtestCode.AppendLine("        //{");
            qtestCode.AppendLine("        //    wixUnit.RunTest(\"ExampleQTest\");");
            qtestCode.AppendLine("        //}");

            // Go through each QTest and create a Test Method for it
            foreach (XmlNode qtest in qtests)
            {
                string qtestName = qtest.Attributes["Name"].Value;
                string methodName = qtestName;
                methodName = methodName.Replace(".", "_");
                methodName = methodName.Replace("-", "_");

                qtestCode.AppendLine();
                qtestCode.AppendLine("        [TestMethod]");
                qtestCode.AppendLine(String.Format("        [Description(\"{0}\")]", qtestName));
                qtestCode.AppendLine("        [Priority(2)]");
                qtestCode.AppendLine(String.Format("        public void {0}()", methodName));
                qtestCode.AppendLine("        {");
                qtestCode.AppendLine(String.Format("            wixUnit.RunTest(\"{0}\");", qtestName));
                qtestCode.AppendLine("        }");
            }

            qtestCode.AppendLine("   }");
            qtestCode.AppendLine("}");

            return qtestCode;
        }
    }
}
